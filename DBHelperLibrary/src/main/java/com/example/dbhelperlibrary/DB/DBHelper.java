package com.example.dbhelperlibrary.DB;

/**
 * Created by zain shah on 2/27/2020.
 */


import static com.t4s.apl.Constrants.S_IS_SYNC.NOT_SUBMITED_CHANGED;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.MatrixCursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import com.t4s.apl.Constrants.SendStatusConstants;
import com.t4s.apl.Constrants.TCP_STATUS_IE;
import com.t4s.apl.Constrants.TCP_STATUS_RETAIL_SITE;
import com.t4s.apl.Interfaces.FraudulentInterface.ApiInterfaces;
import com.t4s.apl.MVP.ListFillStations;
import com.t4s.apl.MVP.RFuelType;
import com.t4s.apl.MVP.RServices;
import com.t4s.apl.Models.API.ActionPlan;
import com.t4s.apl.Models.API.Condition;
import com.t4s.apl.Models.API.NestedActionPlan;
import com.t4s.apl.Models.API.NestedCondition;
import com.t4s.apl.Models.API.ParticularCategory;
import com.t4s.apl.Models.API.Point;
import com.t4s.apl.Models.API.TankCalibration;
import com.t4s.apl.Models.Category;
import com.t4s.apl.Models.EquipmentConditionHeader;
import com.t4s.apl.Models.LabTest.AdvanceAproval.AdvanceAproval;
import com.t4s.apl.Models.LabTest.AdvanceConfirmation.AdvanceConfirmationLabTest;
import com.t4s.apl.Models.LabTest.AdvanceRequest.AdvanceRequestLabTest;
import com.t4s.apl.Models.LabTest.ChargeTo.ChargeToLAbTest;
import com.t4s.apl.Models.LabTest.ChemistList.ChemistListLabTest;
import com.t4s.apl.Models.LabTest.CurrentObject.CurrentObjectLabTest;
import com.t4s.apl.Models.LabTest.LabMangerNames.ManagerList;
import com.t4s.apl.Models.LabTest.ModelLabTestInner;
import com.t4s.apl.Models.LabTest.ProductList.LabInchargeAssignment.Intimation.Intimation;
import com.t4s.apl.Models.LabTest.ProductList.LabInchargeAssignment.LabInchargeAssignment;
import com.t4s.apl.Models.LabTest.ProductList.LabInchargeSection.LabInchargeSection;
import com.t4s.apl.Models.LabTest.ProductList.ProductListLabTest;
import com.t4s.apl.Models.LabTest.ProductList.SampleList.AttachmentsLabTest;
import com.t4s.apl.Models.LabTest.ProductList.SampleList.ChemistObject;
import com.t4s.apl.Models.LabTest.ProductList.SampleList.DrainLocations;
import com.t4s.apl.Models.LabTest.ProductList.SampleList.PossibleReason;
import com.t4s.apl.Models.LabTest.ProductList.SampleList.SampleList;
import com.t4s.apl.Models.LabTest.ProductList.TestList.MethodList.MethodList;
import com.t4s.apl.Models.LabTest.ProductList.TestList.TestList;
import com.t4s.apl.Models.LabTest.QaInchargeSection.QaInchargeSectionLabTest;
import com.t4s.apl.Models.LabTest.RequestDetails.LTCustomerSample;
import com.t4s.apl.Models.LabTest.RequestDetails.LTParcel;
import com.t4s.apl.Models.LabTest.RequestDetails.LTSample;
import com.t4s.apl.Models.LabTest.RequestDetails.LTTLOMC;
import com.t4s.apl.Models.LabTest.RequestDetails.LTTank;
import com.t4s.apl.Models.LabTest.RequestDetails.LTTankLorrySTN;
import com.t4s.apl.Models.LabTest.RequestDetails.LTTankLorrySaleInv;
import com.t4s.apl.Models.Login.MenuLabel;
import com.t4s.apl.Models.MADoctype;
import com.t4s.apl.Models.MAGIStandardAttachment;
import com.t4s.apl.Models.MARetailSites;
import com.t4s.apl.Models.MA_GI_Equipment;
import com.t4s.apl.Models.MA_GI_Main;
import com.t4s.apl.Models.MA_GI_Standard;
import com.t4s.apl.Models.MA_Meterreading;
import com.t4s.apl.Models.MA_QA_Van_Tour;
import com.t4s.apl.Models.MA_SalesData;
import com.t4s.apl.Models.MA_StockReconReasons;
import com.t4s.apl.Models.MA_StockReconciliation;
import com.t4s.apl.Models.MA_TANKDIPS;
import com.t4s.apl.Models.MA_TCP;
import com.t4s.apl.Models.MA_TCP_RetailSites;
import com.t4s.apl.Models.ModelFraudulent.Action;
import com.t4s.apl.Models.ModelFraudulent.Attachment;
import com.t4s.apl.Models.ModelFraudulent.CaseListModel;
import com.t4s.apl.Models.ModelFraudulent.Chamber;
import com.t4s.apl.Models.ModelFraudulent.CurrentAction;
import com.t4s.apl.Models.ModelFraudulent.CurrentReason;
import com.t4s.apl.Models.ModelFraudulent.Driver;
import com.t4s.apl.Models.ModelFraudulent.FAGetReasonsDropdowns;
import com.t4s.apl.Models.ModelFraudulent.FAUserInput;
import com.t4s.apl.Models.ModelFraudulent.FraudulentActivityModel;
import com.t4s.apl.Models.ModelFraudulent.PenaltyClauseListModel;
import com.t4s.apl.Models.ModelFraudulent.PreviousAction;
import com.t4s.apl.Models.ModelFraudulent.PreviousReason;
import com.t4s.apl.Models.ModelFraudulent.Reason;
import com.t4s.apl.Models.ModelFraudulent.ReasonsListModel;
import com.t4s.apl.Models.ModelFraudulent.TankLorry;
import com.t4s.apl.Models.ModelFraudulent.Transport;
import com.t4s.apl.Models.ModelsofQAVan.DropsDowns.DropDownQAVanList;
import com.t4s.apl.Models.ModelsofQAVan.DropsDowns.DropDownRouteList;
import com.t4s.apl.Models.ModelsofQAVan.DropsDowns.DropDownsModel;
import com.t4s.apl.Models.ModelsofQAVan.Employees.EmployeeList;
import com.t4s.apl.Models.ModelsofQAVan.GeneralInspection.GI_Conditions;
import com.t4s.apl.Models.ModelsofQAVan.GeneralInspection.GI_EquipmentConditions;
import com.t4s.apl.Models.ModelsofQAVan.GeneralInspection.GI_Points;
import com.t4s.apl.Models.ModelsofQAVan.GeneralInspection.GI_Stander_Images;
import com.t4s.apl.Models.ModelsofQAVan.GeneralInspection.GI_Standers;
import com.t4s.apl.Models.ModelsofQAVan.GeneralInspection.GI_Standers_DB;
import com.t4s.apl.Models.ModelsofQAVan.GeneralInspection.ServerSubmitDB.GI_Stander_ServerSubmit;
import com.t4s.apl.Models.ModelsofQAVan.GeneralInspection.ServerSubmitDB.Standards;
import com.t4s.apl.Models.ModelsofQAVan.Inbox.DataObject;
import com.t4s.apl.Models.ModelsofQAVan.Inbox.ListInboxData;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.ModelRetailSites;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.ModelUserObservation.UserObservationList;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.ModelUserObservation.UserObservationpossible;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.Model_DispenserType.DispenserCertificate.DispensorMeasurmentDispenserCertificateNozzleList;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.Model_DispenserType.DispenserCertificate.DispensorMeasurmentDispenserCertificateProductList;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.Model_DispenserType.DispenserImageModel.Model_DispensorMeasurmentDispenerImages;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.Model_DispenserType.Model_DispensorMeasurmentActionPlan;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.Model_DispenserType.Model_DispensorMeasurmentDispenserDetail;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.Model_DispenserType.Model_DispensorMeasurmentNozzleDetail;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.Model_DispenserType.Model_DispensorMeasurment_Reaison;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.Model_DispenserType.Model_DispensorMeasurment_SlectedReaison;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.Model_DispenserType.Nozzle_Folder.Model_DispenserMearurmentDispenserNozzleImages;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.Model_DispenserType.Nozzle_Folder.Model_TankTypes_Dispenser;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.Model_DispenserType.Nozzle_Folder.NozzleData_Fetch_Db;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.Model_DispenserType.SubmitToServer.DispenerResult;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.Model_DispenserType.SubmitToServer.DispenserImages;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.Model_DispenserType.SubmitToServer.DispensorMeasurment;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.Model_DispenserType.SubmitToServer.Dispensordata;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.PossibleReasons;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.ProductQuality.ProductQualityCertificate.FuelType_Certificate;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.ProductQuality.ProductQualityCertificate.ProductQualityFuelPassorFail;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.ProductQuality.ProductQualityFromDB.ProductQualityImagesFromDB;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.ProductQuality.ProductQualityFromDB.ProductQualitySamplesFromDB;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.ProductQuality.ProductQualityServerSubmit.ProductQuality_ServerSumbit_Images_Model;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.ProductQuality.ProductQualityServerSubmit.ProductQuality_ServerSumbit_Model;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.ProductQuality.ProductQualityServerSubmit.ProductQuality_ServerSumbit_SampleTest_Model;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.ProductQuality.ProductQualitySignature.ProductQualityResultCaptureImagesFromDb;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.ProductQuality.ProductQualitySignature.ProductQualitySignatureImages;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.ProductQuality.ProductQualtyMethodList;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.ProductQuality.ProductQualtyReasion;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.ProductQuality.ProductQualtySampleStatus;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.ProductQuality.ProductQualtyTestList;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.Tank_Inspection.TankStatus;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.Tank_Inspection.TanksMappingRecyclerView.FuelType;
import com.t4s.apl.Models.ModelsofQAVan.ModelofRetailSites.Tank_Inspection.TanksMappingRecyclerView.TanksMappingOnRecyclerView;
import com.t4s.apl.Models.ModelsofQAVan.OutBox.ListOutboxData;
import com.t4s.apl.Models.ModelsofQAVan.QAProductTest.QAProductTestReq;
import com.t4s.apl.Models.ModelsofQAVan.Qa_Van_TourPlan.QA_Van_Tour_AdditionalSites;
import com.t4s.apl.Models.ModelsofQAVan.Qa_Van_TourPlan.QA_Van_Tour_Plan_DB_Model;
import com.t4s.apl.Models.ModelsofQAVan.Qa_Van_TourPlan.QA_Van_Tour_Plan_Location_DB_Model;
import com.t4s.apl.Models.ModelsofQAVan.SentItems.Inbox_FetchData;
import com.t4s.apl.Models.ModelsofQAVan.SentItems.ListSentItems;
import com.t4s.apl.Models.ModelsofQAVan.TourInspection.ApprovalRemarks;
import com.t4s.apl.Models.ModelsofQAVan.TourInspection.ImagesModel.CaptureImagesModel;
import com.t4s.apl.Models.ModelsofQAVan.TourInspection.PostModel.AttachmentsobjList;
import com.t4s.apl.Models.ModelsofQAVan.TourInspection.PostModelQaIncharge.ApprovedObjList;
import com.t4s.apl.Models.ModelsofQAVan.TourInspection.RetailSitesforInspection;
import com.t4s.apl.Models.ModelsofQAVan.TourInspection.SendMsg.Model_IntmateToo;
import com.t4s.apl.Models.ModelsofQAVan.Van_and_TerritoryModel.RetailSitesList.RetailSiteList;
import com.t4s.apl.Models.ModelsofQAVan.Van_and_TerritoryModel.TerritoryListModel;
import com.t4s.apl.Models.ModelsofQAVan.Van_and_TerritoryModel.VanListModel;
import com.t4s.apl.Models.ModelsofQAVan.jsonpostmodel.RetailSites;
import com.t4s.apl.Models.Nozzle;
import com.t4s.apl.Models.PointHelper;
import com.t4s.apl.Models.Product;
import com.t4s.apl.Models.SampleCollectionAttachment;
import com.t4s.apl.Models.Tank;
import com.t4s.apl.Models.WorkFlow.WFApproveStageInfo;
import com.t4s.apl.R;
import com.t4s.apl.Realm_models.Fillingstations;
import com.t4s.apl.Realm_models.Services;
import com.t4s.apl.enums.EventType;
import com.t4s.apl.events.GenericEvent;
import com.t4s.apl.utils.CommonUtilities;

import org.greenrobot.eventbus.EventBus;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

public class DBHelper extends SQLiteOpenHelper {

    private String TAG = "DB";
    public static final String DATABASE_NAME = "APL.db";
    public static final int DATABASE_VERSION = 1;
    private HashMap hp;
    private Context mContext;
    private ApiInterfaces mInterfaces;
    public SQLiteDatabase Database;

    public DBHelper(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
        mContext = context;
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
//        db.execSQL(
//                "CREATE TABLE IF NOT EXISTS agent_types (id INTEGER primary key, agenttype TEXT)"
//        );
//        db.execSQL(
//                "CREATE TABLE IF NOT EXISTS `ma_doctype` (\n" +
//                        "  `id` Integer(10) NOT NULL  primary key,\n" +
//                        "  `DocID` text(20) DEFAULT NULL,\n" +
//                        "  `DocName` text(50) DEFAULT NULL,\n" +
//                        "  `AreaInchargeID` text(20) DEFAULT NULL,\n" +
//                        "  `AreaInchargeDesc` text(50) DEFAULT NULL,\n" +
//                        "  `PrevTcpCode` text(20) DEFAULT NULL,\n" +
//                        "  `PrevTcpDate` date DEFAULT NULL,\n" +
//                        "  `s_dt` datetime DEFAULT CURRENT_TIMESTAMP,\n" +
//                        "  `s_is_sync` Integer(20) DEFAULT NULL,\n" +
//                        "  `s_long` text(20) DEFAULT NULL,\n" +
//                        "  `s_lat` text(20) DEFAULT NULL\n" +
//                        ") ;"
//        );


        // deleteTables();

//TODO ============== Possible_conditions Create Table Start ====================
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `possible_conditions` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `PointDesc` Text(50) DEFAULT NULL,\n" +
                        "  `PointCode` Text(50) DEFAULT NULL,\n" +
                        "  `Score` Text(50) DEFAULT NULL,\n" +
                        "  `Code` Text(50) DEFAULT NULL,\n" +
                        "  `Desc` Text(50) DEFAULT NULL\n" +
                        ") ;"
        );

        //TODO ============== Possible_conditions Create Table End ====================

//TODO ============== WF_Current_Attachment Create Table Start ====================
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `wf_current_attachments` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Integer(20) DEFAULT NULL,\n" +
                        "  `CallType` Integer(20) DEFAULT NULL,\n" +
                        "  `FileLabel` Text(50) DEFAULT NULL,\n" +
                        "  `FileName` Text(20) DEFAULT NULL,\n" +
                        "  `FileLocalPath` Text(20) DEFAULT NULL\n" +
                        ") ;"
        );
//TODO ============== MA_GI_Standard_Attachment Create Table Start ====================
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `ma_gi_standard_attachment` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `MA_GI_Standard_ID` Integer(20) DEFAULT NULL,\n" +
                        "  `FileLabel` Text(50) DEFAULT NULL,\n" +
                        "  `FileName` Text(20) DEFAULT NULL,\n" +
                        "  `FileServerPath` Text(50) DEFAULT NULL,\n" +
                        "  `FileLocalPath` Text(20) DEFAULT NULL\n" +
                        ") ;"
        );

//TODO ============== Sample_Collection_Attachment Create Table Start ====================
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `sample_collection_attachment` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `SampleId` Text(255) DEFAULT NULL,\n" +
                        "  `ProductCode` Text(50) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `FileLabel` Text(50) DEFAULT NULL,\n" +
                        "  `FileName` Text(20) DEFAULT NULL,\n" +
                        "  `FileServerPath` Text(50) DEFAULT NULL,\n" +
                        "  `FileLocalPath` Text(20) DEFAULT NULL\n" +
                        ") ;"
        );

//TODO ============== LabTest_Sample_Reasons Create Table Start ====================
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_sample_reasons` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `ProductCode` Text(50) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `SampleId` Text(255) DEFAULT NULL,\n" +
                        "  `Description` Text(20) DEFAULT NULL,\n" +
                        "  `Code` Text(20) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_product_reasons` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `ProductCode` Text(50) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `Description` Text(20) DEFAULT NULL,\n" +
                        "  `Code` Text(20) DEFAULT NULL\n" +
                        ") ;"
        );

//TODO ============== LabTest_Sample_Remarks Create Table Start ====================
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_sample_remarks` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `SampleId` Text(255) DEFAULT NULL,\n" +
                        "  `ProductCode` Text(50) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `Remarks` Text(20) DEFAULT NULL\n" +
                        ") ;"
        );

        //TODO ============== MA_GI_Equipment_Attachment Create Table End ====================

//TODO ============== MA_GI_Standard_Attachment Create Table Start ====================
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `ma_gi_equipment_attachment` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `MA_GI_Standard_ID` Integer(20) DEFAULT NULL,\n" +
                        "  `FileLabel` Text(50) DEFAULT NULL,\n" +
                        "  `FileName` Text(20) DEFAULT NULL,\n" +
                        "  `FilePath` Text(50) DEFAULT NULL,\n" +
                        "  `FileLocalPath` Text(20) DEFAULT NULL\n" +
                        ") ;"
        );

        //TODO ============== MA_GI_Equipment_Attachment Create Table End ====================

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `ma_doctype` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `DocID` Text(20) DEFAULT NULL,\n" +
                        "  `DocName` Text(50) DEFAULT NULL,\n" +
                        "  `AreaInchargeID` Text(20) DEFAULT NULL,\n" +
                        "  `AreaInchargeDesc` Text(50) DEFAULT NULL,\n" +
                        "  `PrevTcpCode` Text(20) DEFAULT NULL,\n" +
                        "  `PrevTcpDate` date DEFAULT NULL,\n" +
                        "  `s_dt` datetime DEFAULT CURRENT_TIMESTAMP,\n" +
                        "  `s_is_sync` Integer(20) DEFAULT NULL,\n" +
                        "  `s_long` Text(20) DEFAULT NULL,\n" +
                        "  `s_lat` Text(20) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `ma_meterreadings` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
                        "  `MA_TCP_ID` Integer(10) DEFAULT NULL,\n" +
                        "  `MA_TCP_Retailsites_id` Text(20) DEFAULT NULL,\n" +
                        "  `Server_tcp_code` Text(20) DEFAULT NULL,\n" +
                        "  `CostCentreID` Text(20) DEFAULT NULL,\n" +
                        "  `Product_code` Text(20) DEFAULT NULL,\n" +
                        "  `Product_desc` Text(20) DEFAULT NULL,\n" +
                        "  `Tank_code` Text(20) DEFAULT NULL,\n" +
                        "  `Tank_desc` Text(20) DEFAULT NULL,\n" +
                        "  `Nozzel_Meter_code` Text(20) DEFAULT NULL,\n" +
                        "  `Nozzel_Meter_desc` Text(50) DEFAULT NULL,\n" +
                        "  `Nozzel_code` Text(20) DEFAULT NULL,\n" +
                        "  `Nozzel_desc` Text(20) DEFAULT NULL,\n" +
                        "  `Opening` Text(20) DEFAULT NULL,\n" +
                        "  `Closing` Text(20) DEFAULT NULL,\n" +
                        "  `Sale` Text(20) DEFAULT NULL,\n" +
                        "  `To_date` date DEFAULT NULL,\n" +
                        "  `From_date` date DEFAULT NULL,\n" +
                        "  `Nozzel_Status` Text(20) DEFAULT NULL,\n" +
                        "  `Status` Text(20) DEFAULT NULL,\n" +
                        "  `s_date` datetime DEFAULT CURRENT_TIMESTAMP,\n" +
                        "  `s_is_sync` Integer(20) DEFAULT NULL,\n" +
                        "  `s_status` Integer(20) DEFAULT NULL,\n" +
                        "  `s_long` Text(20) DEFAULT NULL,\n" +
                        "  `s_lat` Text(20) DEFAULT NULL\n" +
                        ") ;"
        );


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS `ma_retailsites` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
                        "  `MA_DocType_id` Integer(20) DEFAULT NULL,\n" +
                        "  `DocID` Text(20) DEFAULT NULL,\n" +
                        "  `CostCentreID` Text(20) DEFAULT NULL,\n" +
                        "  `CostCentreDesc` Text(200) DEFAULT NULL,\n" +
                        "  `Location` Text(200) DEFAULT NULL,\n" +
                        "  `District` Text(100) DEFAULT NULL,\n" +
                        "  `LastInspDate` date DEFAULT NULL,\n" +
                        "  `s_date` datetime DEFAULT CURRENT_TIMESTAMP,\n" +
                        "  `s_is_sync` Integer(20) DEFAULT NULL,\n" +
                        "  `s_status` Integer(20) DEFAULT NULL,\n" +
                        "  `s_long` Text(20) DEFAULT NULL,\n" +
                        "  `s_lat` Text(20) DEFAULT NULL\n" +
                        ") ;"
        );


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS `ma_tankdips` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
                        "  `MA_TCP_ID` Integer(10) DEFAULT NULL,\n" +
                        "  `Server_TCP_code` Text(20) DEFAULT NULL,\n" +
                        "  `MA_TCP_Retailsites_id` Text(20) DEFAULT NULL,\n" +
                        "  `CostCentreID` Text(20) DEFAULT NULL,\n" +
                        "  `Product_code` Text(20) DEFAULT NULL,\n" +
                        "  `Product_desc` Text(20) DEFAULT NULL,\n" +
                        "  `Tank_code` Text(20) DEFAULT NULL,\n" +
                        "  `Tank_desc` Text(20) DEFAULT NULL,\n" +
                        "  `Dip_Stock_M` Text(20) DEFAULT NULL,\n" +
                        "  `Dip_Stock_L` Text(20) DEFAULT NULL,\n" +
                        "  `StockType` Text(20) DEFAULT NULL,\n" +
                        "  `s_date` datetime DEFAULT CURRENT_TIMESTAMP,\n" +
                        "  `s_is_sync` Integer(20) DEFAULT NULL,\n" +
                        "  `s_status` Integer(20) DEFAULT NULL,\n" +
                        "  `s_long` Text(20) DEFAULT NULL,\n" +
                        "  `s_lat` Text(20) DEFAULT NULL\n" +
                        ") ;"
        );


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `ma_tcp` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
                        "  `Server_tcp_code` Text(20) DEFAULT NULL,\n" +
                        "  `TcpDesc` Text(500) DEFAULT NULL,\n" +
                        "  `TcpDate` date DEFAULT NULL,\n" +
                        "  `DocID` Text(20) DEFAULT NULL,\n" +
                        "  `DocName` Text(50) DEFAULT NULL,\n" +
                        "  `MA_DocType_id` Integer(10) DEFAULT NULL,\n" +
                        "  `AreaInchargeID` Text(20) DEFAULT NULL,\n" +
                        "  `AreaInchargeDesc` Text(20) DEFAULT NULL,\n" +
                        "  `LastTcpCode` Text(20) DEFAULT NULL,\n" +
                        "  `LastTcpDate` Text(20) DEFAULT NULL,\n" +
                        "  `CreatedBy` Text(20) DEFAULT NULL,\n" +
                        "  `ApprovedBy` Text(50) DEFAULT NULL,\n" +
                        "  `ApprovedDate` date DEFAULT NULL,\n" +
                        "  `ApprovedComments` Text(500) DEFAULT NULL,\n" +
                        "  `RejectedBy` Text(50) DEFAULT NULL,\n" +
                        "  `RejectedDate` date DEFAULT NULL,\n" +
                        "  `RejectedComments` Text(500) DEFAULT NULL,\n" +
                        "  `Status` Text(20) DEFAULT NULL,\n" +
                        "  `s_date` datetime DEFAULT CURRENT_TIMESTAMP,\n" +
                        "  `s_is_sync` Integer(20) DEFAULT NULL,\n" +
                        "  `s_status` Integer(20) DEFAULT NULL,\n" +
                        "  `s_long` Text(20) DEFAULT NULL,\n" +
                        "  `s_lat` Text(20) DEFAULT NULL,\n" +
                        "  `isCalledFrQA` Integer(20) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `ma_tcp_retailsites` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
                        "  `MA_TCP_ID` Integer(10) DEFAULT NULL,\n" +
                        "  `Server_TCP_code` Text(20) DEFAULT NULL,\n" +
                        "  `MA_RetailSites_id` Integer(20) DEFAULT NULL,\n" +
                        "  `DocID` Text(20) DEFAULT NULL,\n" +
                        "  `DocName` Text(50) DEFAULT NULL,\n" +
                        "  `CostCentreID` Text(20) DEFAULT NULL,\n" +
                        "  `CostCentreDesc` Text(200) DEFAULT NULL,\n" +
                        "  `Location` Text(200) DEFAULT NULL,\n" +
                        "  `District` Text(100) DEFAULT NULL,\n" +
                        "  `LastInspCode` Text(20) DEFAULT NULL,\n" +
                        "  `LastinspDate` date DEFAULT NULL,\n" +
                        "  `TourPlanning` Integer(2) DEFAULT NULL,\n" +
                        "  `visitDate` date DEFAULT NULL,\n" +
                        "  `TravelTime` Text(20) DEFAULT NULL,\n" +
                        "  `InspTime` Text(20) DEFAULT NULL,\n" +
                        "  `KMs` Text(10) DEFAULT NULL,\n" +
                        "  `VisitPurpose` Text(100) DEFAULT NULL,\n" +
                        "  `TourOrderNo` Integer(10) DEFAULT NULL,\n" +
                        "  `CocoSite` Text(10) DEFAULT NULL,\n" +
                        "  `InspectionDate` Text(50) DEFAULT NULL,\n" +
                        "  `Status` Text(20) DEFAULT NULL,\n" +
                        "  `CommentedBy` Text(50) DEFAULT NULL,\n" +
                        "  `CommentedDate` Text(20) DEFAULT NULL,\n" +
                        "  `Comment` Text(300) DEFAULT NULL,\n" +
                        "  `Status_IE_1` Integer(10) DEFAULT NULL,\n" +
                        "  `Status_IE_2` Integer(10) DEFAULT NULL,\n" +
                        "  `Status_IE_3` Integer(10) DEFAULT NULL,\n" +
                        "  `Status_IE_4` Integer(10) DEFAULT NULL,\n" +
                        "  `Status_IE_5` Integer(10) DEFAULT NULL,\n" +
                        "  `s_date` datetime DEFAULT CURRENT_TIMESTAMP,\n" +
                        "  `s_is_sync` Integer(20) DEFAULT NULL,\n" +
                        "  `s_status` Integer(20) DEFAULT NULL,\n" +
                        "  `s_long` Text(20) DEFAULT NULL,\n" +
                        "  `s_lat` Text(20) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE `ma_GI_Main` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
                        "  `MA_TCP_ID` INTEGER(10) DEFAULT NULL,\n" +
                        "  `Server_TCP_code` TEXT(20) DEFAULT NULL,\n" +
                        "  `MA_TCP_RetailSite_id` INTEGER(20) DEFAULT NULL,\n" +
                        "  `CostCentreID` TEXT(20) DEFAULT NULL,\n" +
                        "  `Comments` TEXT(1000) DEFAULT NULL,\n" +
                        "  `userAck` TEXT(1000) DEFAULT NULL,\n" +
                        "  `UA_img_id` TEXT(50) DEFAULT NULL,\n" +
                        "  `UA_img_file` TEXT(100) DEFAULT NULL,\n" +
                        "  `UA_img_path` TEXT(200) DEFAULT NULL,\n" +
                        "  `UA_server_id` TEXT(50) DEFAULT NULL,\n" +
                        "  `UA_server_path` TEXT(200) DEFAULT NULL,\n" +
                        //  "    \n" +
                        "  `Status` TEXT(20) DEFAULT NULL,\n" +
                        "  `s_date` DATETIME DEFAULT CURRENT_TIMESTAMP,\n" +
                        "  `s_is_sync` INTEGER(20) DEFAULT NULL,\n" +
                        "  `s_status` INTEGER(20) DEFAULT NULL,\n" +
                        "  `s_long` TEXT(20) DEFAULT NULL,\n" +
                        "  `s_lat` TEXT(20) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE `ma_GI_Standard` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
                        "  `MA_TCP_ID` INTEGER(10) DEFAULT NULL,\n" +
                        "  `Server_TCP_code` TEXT(20) DEFAULT NULL,\n" +
                        "  `MA_TCP_RetailSite_id` INTEGER(20) DEFAULT NULL,\n" +
                        "  `CostCentreID` TEXT(20) DEFAULT NULL,\n" +
                        "  `MA_GI_id` INTEGER(20) DEFAULT NULL,\n" +
                        //   "\n" +
                        "  `CategoryGroup` TEXT(50) DEFAULT NULL,\n" +
                        "  `CategoryID` TEXT(50) DEFAULT NULL,\n" +
                        "  `CategoryName` TEXT(100) DEFAULT NULL,\n" +
                        "  `ParticularCode` TEXT(50) DEFAULT NULL,\n" +
                        "  `PartName` TEXT(100) DEFAULT NULL,\n" +
                        "  `Points` TEXT(100) DEFAULT NULL,\n" +
                        "  `ConditionCode` TEXT(50) DEFAULT NULL,\n" +
                        "  `Condition` TEXT(100) DEFAULT NULL,\n" +
                        "  `ActionPlanCode` TEXT(50) DEFAULT NULL,\n" +
                        "  `ActionPlan` TEXT(100) DEFAULT NULL,\n" +
                        "  `Remarks` TEXT(1000) DEFAULT NULL,\n" +
                        //   "\n" +
                        "  `Att_id` TEXT(50) DEFAULT NULL,\n" +
                        "  `Att_file` TEXT(100) DEFAULT NULL,\n" +
                        "  `Att_path` TEXT(200) DEFAULT NULL,\n" +
                        "  `Att_server_id` TEXT(50) DEFAULT NULL,\n" +
                        "  `Att_server_path` TEXT(200) DEFAULT NULL,\n" +
                        //   "    \n" +
                        "  `Status` TEXT(20) DEFAULT NULL,\n" +
                        "  `s_date` DATETIME DEFAULT CURRENT_TIMESTAMP,\n" +
                        "  `s_is_sync` INTEGER(20) DEFAULT NULL,\n" +
                        "  `s_status` INTEGER(20) DEFAULT NULL,\n" +
                        "  `s_long` TEXT(20) DEFAULT NULL,\n" +
                        "  `s_lat` TEXT(20) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE `ma_GI_Equipment` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
                        "  `MA_TCP_ID` INTEGER(10) DEFAULT NULL,\n" +
                        "  `Server_TCP_code` TEXT(20) DEFAULT NULL,\n" +
                        "  `MA_TCP_RetailSite_id` INTEGER(20) DEFAULT NULL,\n" +
                        "  `CostCentreID` TEXT(20) DEFAULT NULL,\n" +
                        "  `MA_GI_id` INTEGER(20) DEFAULT NULL,\n" +
                        //     "\n" +
                        "  `MainCode` TEXT(50) DEFAULT NULL,\n" +
                        "  `MainDesc` TEXT(100) DEFAULT NULL,\n" +
                        "  `FixAssetCode` TEXT(50) DEFAULT NULL,\n" +
                        "  `FixAssetDesc` TEXT(100) DEFAULT NULL,\n" +
                        "  `Ownership` TEXT(100) DEFAULT NULL,\n" +
                        "  `ItemChecked` TEXT(100) DEFAULT NULL,\n" +
                        "  `Remarks` TEXT(1000) DEFAULT NULL,\n" +
                        //     "\n" +
                        "  `Att_id` TEXT(50) DEFAULT NULL,\n" +
                        "  `Att_file` TEXT(100) DEFAULT NULL,\n" +
                        "  `Att_path` TEXT(200) DEFAULT NULL,\n" +
                        "  `Att_server_id` TEXT(50) DEFAULT NULL,\n" +
                        "  `Att_server_path` TEXT(200) DEFAULT NULL,\n" +
                        //      "    \n" +
                        "  `SerialNo` TEXT(100) DEFAULT NULL,\n" +
                        "  `Status` TEXT(20) DEFAULT NULL,\n" +
                        "  `s_date` DATETIME DEFAULT CURRENT_TIMESTAMP,\n" +
                        "  `s_is_sync` INTEGER(20) DEFAULT NULL,\n" +
                        "  `s_status` INTEGER(20) DEFAULT NULL,\n" +
                        "  `s_long` TEXT(20) DEFAULT NULL,\n" +
                        "  `s_lat` TEXT(20) DEFAULT NULL\n" +
                        ") ;"
        );


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS `ma_salesdata` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
                        "  `MA_TCP_ID` Integer(10) DEFAULT NULL,\n" +
                        "  `Server_TCP_code` Text(20) DEFAULT NULL,\n" +
                        "  `MA_TCP_Retailsites_id` Text(20) DEFAULT NULL,\n" +
                        "  `CostCentreID` Text(20) DEFAULT NULL,\n" +
                        "  `Type` Text(20) DEFAULT NULL,\n" +
                        "  `DocNo` Text(20) DEFAULT NULL,\n" +
                        "  `DocDate` Text(20) DEFAULT NULL,\n" +
                        "  `Product` Text(20) DEFAULT NULL,\n" +
                        "  `ProductCode` Text(20) DEFAULT NULL,\n" +
                        "  `QTY` Text(20) DEFAULT NULL,\n" +
                        "  `TankLorryNo` Text(20) DEFAULT NULL,\n" +
                        "  `Selection` Integer(10) DEFAULT NULL,\n" +

                        "  `s_date` datetime DEFAULT CURRENT_TIMESTAMP,\n" +
                        "  `s_is_sync` Integer(20) DEFAULT NULL,\n" +
                        "  `s_status` Integer(20) DEFAULT NULL,\n" +
                        "  `s_long` Text(20) DEFAULT NULL,\n" +
                        "  `s_lat` Text(20) DEFAULT NULL\n" +
                        ") ;"
        );


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS `ma_stockreconciliation` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
                        "  `MA_TCP_ID` Integer(10) DEFAULT NULL,\n" +
                        "  `Server_TCP_code` Text(20) DEFAULT NULL,\n" +
                        "  `MA_TCP_Retailsites_id` Text(20) DEFAULT NULL,\n" +
                        "  `CostCentreID` Text(20) DEFAULT NULL,\n" +
                        "  `ProductCode` Text(50) DEFAULT NULL,\n" +
                        "  `ProductDesc` Text(50) DEFAULT NULL,\n" +
                        "  `Type` Text(20) DEFAULT NULL,\n" +
                        "  `OpeningStock` Text(20) DEFAULT NULL,\n" +
                        "  `StockRecept` Text(20) DEFAULT NULL,\n" +
                        "  `Sale` Text(20) DEFAULT NULL,\n" +
                        "  `BalanceStock` Text(20) DEFAULT NULL,\n" +
                        "  `DipStock` Text(20) DEFAULT NULL,\n" +
                        "  `GainLoss` Text(20) DEFAULT NULL,\n" +
                        "  `ReconciliationStatus` Text(20) DEFAULT NULL,\n" +
                        "  `UserObservation` Text(20) DEFAULT NULL,\n" +
                        "  `s_date` datetime DEFAULT CURRENT_TIMESTAMP,\n" +
                        "  `s_is_sync` Integer(20) DEFAULT NULL,\n" +
                        "  `s_status` Integer(20) DEFAULT NULL,\n" +
                        "  `s_long` Text(20) DEFAULT NULL,\n" +
                        "  `s_lat` Text(20) DEFAULT NULL,\n" +
                        "  `remarks` Text(20) DEFAULT NULL,\n" +
                        "  `reason` Text(20) DEFAULT NULL,\n" +
                        "  `reasonDesc` Text(20) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS `ma_stockrecon_reasons` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
                        "  `Desc` Text(20) DEFAULT NULL,\n" +
                        "  `Code` Text(20) DEFAULT NULL,\n" +
                        "  `ForScreen` Text(20) DEFAULT NULL,\n" +
                        "  `DocNo` Text(20) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS `ma_conditions` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
                        "  `Code` Text(20) DEFAULT NULL,\n" +
                        "  `Desc` Text(20) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS `ma_actionplan` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
                        "  `Code` Text(20) DEFAULT NULL,\n" +
                        "  `Desc` Text(20) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS `ma_points` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
                        "  `Code` Text(20) DEFAULT NULL,\n" +
                        "  `Score` Text(20) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS `ma_particularcategory` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
                        "  `CategoryCode` Text(20) DEFAULT NULL,\n" +
                        "  `CategoryDesc` Text(50) DEFAULT NULL,\n" +
                        "  `Code` Text(20) DEFAULT NULL,\n" +
                        "  `Type` Text(20) DEFAULT NULL,\n" +
                        "  `Desc` Text(20) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS `ma_nestedactionplan` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
                        "  `PCode` Text(20) DEFAULT NULL,\n" +
                        "  `Code` Text(20) DEFAULT NULL,\n" +
                        "  `Desc` Text(50) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS `ma_nestedconditions` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
                        "  `PCode` Text(20) DEFAULT NULL,\n" +
                        "  `Code` Text(20) DEFAULT NULL,\n" +
                        "  `Desc` Text(50) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `ma_TankCalibrations` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `SeqNo` Text(20) DEFAULT NULL,\n" +
                        "  `Ltr` Text(20) DEFAULT NULL,\n" +
                        "  `DipMM` Text(20) DEFAULT NULL,\n" +
                        "  `TankCode` Text(20) DEFAULT NULL\n" +
                        ") ;"
        );


        //========================================QAVan Tour Plan===========================================================
        //   Created by  Zain
        //==================================================================================================================

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `dispenser` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `dispenser_id` Text(255) DEFAULT NULL,\n" +
                        "  `dispenser_type` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `dispenser_measurment_plan` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `qa_inpection_check_id` Text(255) DEFAULT NULL,\n" +
                        "  `dis_measr_plan_id` Text(255) DEFAULT NULL\n" +

                        ") ;"
        );


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `dropdowns_Sequence` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `Sequence_id` Text(255) DEFAULT NULL,\n" +
                        "  `Name` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        //==========================================================================================================
        ///======================================= QATour Plan DATA FROM SERVER ====================================
        //==========================================================================================================


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `dropdowns_Territory` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `Territory_id` Text(255) DEFAULT NULL,\n" +
                        "  `Territory_Des` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `dropdowns_RouteList` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `Territory_id` Text(255) DEFAULT NULL,\n" +
                        "  `RT_ACTIVE` Text(255) DEFAULT NULL,\n" +
                        "  `RouteDes` Text(255) DEFAULT NULL,\n" +
                        "  `EffectiveFromDt` Text(255) DEFAULT NULL,\n" +
                        "  `VanCode` Text(255) DEFAULT NULL,\n" +
                        "  `RouteCode` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `dropdowns_QaVan` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `VanActive` Text(255) DEFAULT NULL,\n" +
                        "  `VanCode` Text(255) DEFAULT NULL,\n" +
                        "  `VanDes` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `Retail_sites_from_server` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `Territory_id` Text(255) DEFAULT NULL,\n" +
                        "  `AreaExective` Text(255) DEFAULT NULL,\n" +
                        "  `LastVistTourCode` Text(255) DEFAULT NULL,\n" +
                        "  `RetailSiteDes` Text(255) DEFAULT NULL,\n" +
                        "  `VisionType` Text(255) DEFAULT NULL,\n" +
                        "  `Lati` Text(255) DEFAULT NULL,\n" +
                        "  `Location` Text(255) DEFAULT NULL,\n" +
                        "  `Sub_Region` Text(255) DEFAULT NULL,\n" +
                        "  `PersonContacNumber` Text(255) DEFAULT NULL,\n" +
                        "  `LastInspDate` Text(255) DEFAULT NULL,\n" +
                        "  `ContactPersonName` Text(255) DEFAULT NULL,\n" +
                        "  `Region` Text(255) DEFAULT NULL,\n" +
                        "  `AreaIncharge` Text(255) DEFAULT NULL,\n" +
                        "  `CostCenter` Text(255) DEFAULT NULL,\n" +
                        "  `AreaInchargeContact` Text(255) DEFAULT NULL,\n" +
                        "  `District` Text(255) DEFAULT NULL,\n" +
                        "  `RetailSiteCode` Text(255) DEFAULT NULL,\n" +
                        "  `Address` Text(255) DEFAULT NULL,\n" +
                        "  `Longi` Text(255) DEFAULT NULL,\n" +
                        "  `AreaExectiveContact` Text(255) DEFAULT NULL,\n" +
                        "  `NoOfDaysPass` Text(255) DEFAULT NULL,\n" +
                        "  `CostCentrDes` Text(255) DEFAULT NULL,\n" +
                        "  `LastVistStatus` Text(255) DEFAULT NULL,\n" +
                        "  `SequenceNo` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );


        //=============================================================================================
        //=============================================================================================
        //=============================================================================================
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `dropdowns_Nature` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `Nature_id` Text(255) DEFAULT NULL,\n" +
                        "  `Name` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `dropdowns_VisitReason` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `Reason_id` Text(255) DEFAULT NULL,\n" +
                        "  `Name` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `qavan_TourPlannerLocation` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `QVTP_id` Text(255) DEFAULT NULL,\n" +
                        "  `Creator_id` Text(255) DEFAULT NULL,\n" +// foriegn key missing
                        "  `Territory_id` Text(255) DEFAULT NULL,\n" +
                        "  `Route_code` Text(255) DEFAULT NULL,\n" +
                        "  `Place_id` Text(255) DEFAULT NULL,\n" +

                        "  `AreaExective` Text(255) DEFAULT NULL,\n" +
                        "  `LastVistTourCode` Text(255) DEFAULT NULL,\n" +
                        "  `RetailSiteDes` Text(255) DEFAULT NULL,\n" +
                        "  `VisionType` Text(255) DEFAULT NULL,\n" +
                        "  `Lati` Text(255) DEFAULT NULL,\n" +
                        "  `Location` Text(255) DEFAULT NULL,\n" +
                        "  `Sub_Region` Text(255) DEFAULT NULL,\n" +
                        "  `PersonContacNumber` Text(255) DEFAULT NULL,\n" +
                        "  `LastInspDate` Text(255) DEFAULT NULL,\n" +
                        "  `ContactPersonName` Text(255) DEFAULT NULL,\n" +
                        "  `Region` Text(255) DEFAULT NULL,\n" +
                        "  `AreaIncharge` Text(255) DEFAULT NULL,\n" +
                        "  `CostCenter` Text(255) DEFAULT NULL,\n" +
                        "  `AreaInchargeContact` Text(255) DEFAULT NULL,\n" +
                        "  `District` Text(255) DEFAULT NULL,\n" +
                        "  `RetailSiteCode` Text(255) DEFAULT NULL,\n" +
                        "  `Address` Text(255) DEFAULT NULL,\n" +
                        "  `Longi` Text(255) DEFAULT NULL,\n" +
                        "  `AreaExectiveContact` Text(255) DEFAULT NULL,\n" +
                        "  `NoOfDaysPass` Text(255) DEFAULT NULL,\n" +
                        "  `CostCentrDes` Text(255) DEFAULT NULL,\n" +
                        "  `LastVistStatus` Text(255) DEFAULT NULL,\n" +
                        "  `InspectionStatus` Text(255) DEFAULT NULL,\n" +

                        "  `tour_plan_status` Interger DEFAULT NULL,\n" +
                        "  `dispenser_measurment_plan_id` Interger DEFAULT NULL,\n" +
                        "  `product_quality_plan` Interger(20) DEFAULT NULL,\n" +
                        "  `tank_inspection_plan` Interger(20) DEFAULT NULL,\n" +
                        "  `sales_data_plan` Interger(20) DEFAULT NULL,\n" +
                        "  `stock_reconcelation_plan` Interger(20) DEFAULT NULL,\n" +
                        "  `general_inpection_plan` Interger(20) DEFAULT NULL,\n" +

                        "  `AL_dispenser_measurment_plan_id` Interger DEFAULT NULL,\n" +
                        "  `AL_product_quality_plan` Interger(20) DEFAULT NULL,\n" +
                        "  `AL_tank_inspection_plan` Interger(20) DEFAULT NULL,\n" +
                        "  `AL_sales_data_plan` Interger(20) DEFAULT NULL,\n" +
                        "  `AL_stock_reconcelation_plan` Interger(20) DEFAULT NULL,\n" +
                        "  `AL_general_inpection_plan` Interger(20) DEFAULT NULL,\n" +

                        "  `dispenser_measurment_plan_id_default` Interger DEFAULT NULL,\n" +
                        "  `product_quality_plan_default` Interger(20) DEFAULT NULL,\n" +
                        "  `tank_inspection_plan_default` Interger(20) DEFAULT NULL,\n" +
                        "  `sales_data_plan_default` Interger(20) DEFAULT NULL,\n" +
                        "  `stock_reconcelation_plan_default` Interger(20) DEFAULT NULL,\n" +
                        "  `general_inpection_plan_default` Interger(20) DEFAULT NULL,\n" +

                        "  `dispenser_measurment_plan_id_enable` Interger DEFAULT NULL,\n" +
                        "  `product_quality_plan_enable` Interger(20) DEFAULT NULL,\n" +
                        "  `tank_inspection_plan_enable` Interger(20) DEFAULT NULL,\n" +
                        "  `sales_data_plan_enable` Interger(20) DEFAULT NULL,\n" +
                        "  `stock_reconcelation_plan_enable` Interger(20) DEFAULT NULL,\n" +
                        "  `general_inpection_plan_enable` Interger(20) DEFAULT NULL,\n" +


                        "  `Plan_date` Text(255) DEFAULT NULL,\n" +
                        "  `Reason_id` Text(255) DEFAULT NULL,\n" +
                        "  `Sequence_id` Text(255) DEFAULT NULL,\n" +
                        "  `Remarks` Text(255) DEFAULT NULL,\n" +
                        "  `AreaInchargeRemarks` Text(255) DEFAULT NULL,\n" +
                        "  `isAdditionSite` INTEGER(20) DEFAULT NULL,\n" +
                        "  `Status` TEXT(20) DEFAULT NULL,\n" +
                        "  `s_date` DATETIME DEFAULT CURRENT_TIMESTAMP,\n" +
                        "  `s_is_sync` INTEGER(20) DEFAULT NULL,\n" +
                        "  `s_status` INTEGER(20) DEFAULT NULL,\n" +
                        "  `s_long` TEXT(20) DEFAULT NULL,\n" +
                        "  `s_lat` TEXT(20) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `qavan_AdditionalSites` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `QVTP_id` Text(255) DEFAULT NULL,\n" +
                        "  `Creator_id` Text(255) DEFAULT NULL,\n" +// foriegn key missing
                        "  `Territory_id` Text(255) DEFAULT NULL,\n" +
                        "  `Route_code` Text(255) DEFAULT NULL,\n" +
                        "  `Place_id` Text(255) DEFAULT NULL,\n" +

                        "  `AreaExective` Text(255) DEFAULT NULL,\n" +
                        "  `LastVistTourCode` Text(255) DEFAULT NULL,\n" +
                        "  `RetailSiteDes` Text(255) DEFAULT NULL,\n" +
                        "  `VisionType` Text(255) DEFAULT NULL,\n" +
                        "  `Lati` Text(255) DEFAULT NULL,\n" +
                        "  `Location` Text(255) DEFAULT NULL,\n" +
                        "  `Sub_Region` Text(255) DEFAULT NULL,\n" +
                        "  `PersonContacNumber` Text(255) DEFAULT NULL,\n" +
                        "  `LastInspDate` Text(255) DEFAULT NULL,\n" +
                        "  `ContactPersonName` Text(255) DEFAULT NULL,\n" +
                        "  `Region` Text(255) DEFAULT NULL,\n" +
                        "  `AreaIncharge` Text(255) DEFAULT NULL,\n" +
                        "  `CostCenter` Text(255) DEFAULT NULL,\n" +
                        "  `AreaInchargeContact` Text(255) DEFAULT NULL,\n" +
                        "  `District` Text(255) DEFAULT NULL,\n" +
                        "  `RetailSiteCode` Text(255) DEFAULT NULL,\n" +
                        "  `Address` Text(255) DEFAULT NULL,\n" +
                        "  `Longi` Text(255) DEFAULT NULL,\n" +
                        "  `AreaExectiveContact` Text(255) DEFAULT NULL,\n" +
                        "  `NoOfDaysPass` Text(255) DEFAULT NULL,\n" +
                        "  `CostCentrDes` Text(255) DEFAULT NULL,\n" +
                        "  `LastVistStatus` Text(255) DEFAULT NULL,\n" +

                        "  `tour_plan_status` Interger DEFAULT NULL,\n" +
                        "  `dispenser_measurment_plan_id` Interger DEFAULT NULL,\n" +
                        "  `product_quality_plan` Interger(20) DEFAULT NULL,\n" +
                        "  `tank_inspection_plan` Interger(20) DEFAULT NULL,\n" +
                        "  `sales_data_plan` Interger(20) DEFAULT NULL,\n" +
                        "  `stock_reconcelation_plan` Interger(20) DEFAULT NULL,\n" +
                        "  `general_inpection_plan` Interger(20) DEFAULT NULL,\n" +

                        "  `dispenser_measurment_plan_id_default` Interger DEFAULT NULL,\n" +
                        "  `product_quality_plan_default` Interger(20) DEFAULT NULL,\n" +
                        "  `tank_inspection_plan_default` Interger(20) DEFAULT NULL,\n" +
                        "  `sales_data_plan_default` Interger(20) DEFAULT NULL,\n" +
                        "  `stock_reconcelation_plan_default` Interger(20) DEFAULT NULL,\n" +
                        "  `general_inpection_plan_default` Interger(20) DEFAULT NULL,\n" +


                        "  `dispenser_measurment_plan_id_enable` Interger DEFAULT NULL,\n" +
                        "  `product_quality_plan_enable` Interger(20) DEFAULT NULL,\n" +
                        "  `tank_inspection_plan_enable` Interger(20) DEFAULT NULL,\n" +
                        "  `sales_data_plan_enable` Interger(20) DEFAULT NULL,\n" +
                        "  `stock_reconcelation_plan_enable` Interger(20) DEFAULT NULL,\n" +
                        "  `general_inpection_plan_enable` Interger(20) DEFAULT NULL,\n" +

                        "  `Plan_date` Text(255) DEFAULT NULL,\n" +
                        "  `Reason_id` Text(255) DEFAULT NULL,\n" +
                        "  `Sequence_id` Text(255) DEFAULT NULL,\n" +
                        "  `Remarks` Text(255) DEFAULT NULL,\n" +
                        "  `Status` TEXT(20) DEFAULT NULL,\n" +
                        "  `s_date` DATETIME DEFAULT CURRENT_TIMESTAMP,\n" +
                        "  `s_is_sync` INTEGER(20) DEFAULT NULL,\n" +
                        "  `s_status` INTEGER(20) DEFAULT NULL,\n" +
                        "  `s_long` TEXT(20) DEFAULT NULL,\n" +
                        "  `s_lat` TEXT(20) DEFAULT NULL\n" +
                        ") ;"
        );


        ///===============================================================================================
        ///===============================================================================================
        ///===============================================================================================


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `history` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `user_id` Text(255) DEFAULT NULL,\n" +
                        "  `location` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `initiated_to` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `remarks_id` Text(255) DEFAULT NULL,\n" +
                        "  `remarks_user_id` Text(255) DEFAULT NULL,\n" +
                        "  `initiate_to_user_id` Text(255) DEFAULT NULL,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `qavan_TourPlanner` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `Creator_id` Text(255) DEFAULT NULL,\n" +
                        "  `QVTP_Server_id` Text(255) DEFAULT NULL,\n" +
                        "  `Title` Text(255) DEFAULT NULL,\n" +
                        "  `Nature` Text(255)  DEFAULT NULL,\n" +
                        "  `Creation_date` date DEFAULT NULL,\n" +
                        "  `Tour_start_date` date DEFAULT NULL,\n" +
                        "  `Tour_end_date` date DEFAULT NULL,\n" +
                        "  `Terrority_id` Text(255) DEFAULT NULL,\n" +
                        "  `Qavanid` Text(255) DEFAULT NULL,\n" +
                        "  `Status` Text(255) DEFAULT NULL,\n" +
                        "  `s_date` DATETIME DEFAULT CURRENT_TIMESTAMP,\n" +
                        "  `s_is_sync` INTEGER(20) DEFAULT NULL,\n" +
                        "  `s_status` INTEGER(20) DEFAULT NULL,\n" +
                        "  `s_long` TEXT(20) DEFAULT NULL,\n" +
                        "  `s_lat` TEXT(20) DEFAULT NULL\n" +
                        ") ;"
        );


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `qa_inspection_checked` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `user_id` Text(255) DEFAULT NULL,\n" +
                        "  `location_id` Text(255) DEFAULT NULL,\n" +// foriegn key missing
                        "  `Place_id` Text(255) DEFAULT NULL,\n" +
                        "  `dispenser_measurment_plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `product_quality_plan` Text(255) DEFAULT NULL,\n" +
                        "  `tank_inspection_plan` Text(255)DEFAULT NULL,\n" +
                        "  `sales_data_plan` Text(255) DEFAULT NULL,\n" +
                        "  `stock_reconcelation_plan` Text(255) DEFAULT NULL,\n" +
                        "  `general_inpection_plan` Text(255) DEFAULT NULL,\n" +
                        "  `terminate_site_check` Text(255) DEFAULT NULL,\n" +
                        "  `qa_remarks` Text(255) DEFAULT NULL,\n" +
                        "  `obs_mangemnet_remarks` Text(255) DEFAULT NULL,\n" +
                        "  `area_incharge_remarks` Text(255) DEFAULT NULL,\n" +
                        "  `Status` TEXT(20) DEFAULT NULL,\n" +
                        "  `s_date` DATETIME DEFAULT CURRENT_TIMESTAMP,\n" +
                        "  `s_is_sync` INTEGER(20) DEFAULT NULL,\n" +
                        "  `s_status` INTEGER(20) DEFAULT NULL,\n" +
                        "  `s_long` TEXT(20) DEFAULT NULL,\n" +
                        "  `s_lat` TEXT(20) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `remarks` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `user_id` Text(255) DEFAULT NULL,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +// foriegn key missing
                        "  `remarks` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `qa_terrtory_list_from_server` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `user_id` Text(255) DEFAULT NULL,\n" +
                        "  `location_id` Text(255) DEFAULT NULL,\n" +// foriegn key missing
                        "  `Place_id` Text(255) DEFAULT NULL,\n" +
                        "  `dispenser_measurment_plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `product_quality_plan` Text(255) DEFAULT NULL,\n" +
                        "  `tank_inspection_plan` Text(255) DEFAULT NULL,\n" +
                        "  `sales_data_plan` Text(255) DEFAULT NULL,\n" +
                        "  `stock_reconcelation_plan` Text(255) DEFAULT NULL,\n" +
                        "  `general_inpection_plan` Text(255) DEFAULT NULL,\n" +
                        "  `terminate_site_check` Text(255) DEFAULT NULL,\n" +
                        "  `qa_remarks` Text(255) DEFAULT NULL,\n" +
                        "  `obs_mangemnet_remarks` Text(255) DEFAULT NULL,\n" +
                        "  `area_incharge_remarks` Text(255) DEFAULT NULL,\n" +
                        "  `Status` TEXT(20) DEFAULT NULL,\n" +
                        "  `s_date` DATETIME DEFAULT CURRENT_TIMESTAMP,\n" +
                        "  `s_is_sync` INTEGER(20) DEFAULT NULL,\n" +
                        "  `s_status` INTEGER(20) DEFAULT NULL,\n" +
                        "  `s_long` TEXT(20) DEFAULT NULL,\n" +
                        "  `s_lat` TEXT(20) DEFAULT NULL\n" +
                        ") ;"
        );


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `qa_inbox` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `ProcessType` Text(255) DEFAULT NULL,\n" +
                        "  `IsVanIncharge` Text(255) DEFAULT NULL,\n" +
                        "  `SubProcess` Text(255) DEFAULT NULL,\n" +
                        "  `Remarks` Text(255) DEFAULT NULL,\n" +// foriegn key missing
                        "  `UserID` Text(255) DEFAULT NULL,\n" +
                        "  `ReadStatus` Text(255) DEFAULT NULL,\n" +
                        "  `UserName` Text(255) DEFAULT NULL,\n" +
                        "  `PinStatus` Text(255) DEFAULT NULL,\n" +
                        "  `Priority` Text(255) DEFAULT NULL,\n" +
                        "  `CurrentVersionNo` Text(255) DEFAULT NULL,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `ReleaseOption` Text(255) DEFAULT NULL,\n" +
                        "  `RevisonOption` Text(255) DEFAULT NULL,\n" +
                        "  `ControlTypeID` Text(255) DEFAULT NULL,\n" +
                        "  `SubmitButtonID` Text(255) DEFAULT NULL,\n" +
                        "  `RoleDes` Text(255) DEFAULT NULL,\n" +
                        "  `RoleCode` Text(255) DEFAULT NULL,\n" +
                        "  `FeedBackOp` Text(255) DEFAULT NULL,\n" +
                        "  `SubmitButtonType` Text(255) DEFAULT NULL,\n" +
                        "  `LeadTime` Text(255) DEFAULT NULL,\n" +
                        "  `ReleaseRequestOp` Text(255) DEFAULT NULL,\n" +
                        "  `ActivityName` Text(255) DEFAULT NULL,\n" +
                        "  `NextStepNO` Text(255) DEFAULT NULL,\n" +
                        "  `OtherRemarks` Text(255) DEFAULT NULL,\n" +
                        "  `SubProcessVersion` Text(255) DEFAULT NULL,\n" +
                        "  `MessageID` Text(255) DEFAULT NULL,\n" +
                        "  `Process` Text(255) DEFAULT NULL,\n" +
                        "  `DocumentNo` Text(255) DEFAULT NULL,\n" +
                        "  `RecievedDate` Text(255) DEFAULT NULL,\n" +
                        "  `Department` Text(255) DEFAULT NULL,\n" +
                        "  `ProcessDescription` Text(255) DEFAULT NULL,\n" +
                        "  `MessageType` Text(255) DEFAULT NULL,\n" +
                        "  `UserPicPath` Text DEFAULT NULL,\n" +
                        "  `Designation` Text(255) DEFAULT NULL,\n" +
                        "  `RetailSiteCode` Text(255) DEFAULT NULL,\n" +
                        "  `DocType` Text(255) DEFAULT NULL,\n" +
                        "  `DocYear` Text(255) DEFAULT NULL,\n" +
                        "  `IsRejectable` Text(255) DEFAULT NULL,\n" +
                        "  `DocDate` Text(255) DEFAULT NULL,\n" +
                        "  `MessageText` Text(255) DEFAULT NULL,\n" +
                        "  `SendStatus` Integer(20) DEFAULT NULL,\n" +
                        "  `Lat` Text(20) DEFAULT NULL,\n" +
                        "  `Long` Text(20) DEFAULT NULL,\n" +
                        "  `LastResponse` Text(255) DEFAULT NULL,\n" +
                        "  `LastTryDate` DATETIME DEFAULT CURRENT_TIMESTAMP\n" +
                        ") ;"
        );


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `Dumy_qavan_TourPlanner` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `Qvan_End_date` Text(255)DEFAULT NULL,\n" +
                        "  `Qvan_Start_date` Text(255) DEFAULT NULL,\n" +
                        "  `QVanTCPNo` Text(255) DEFAULT NULL,\n" +
                        "  `QVanCompCode` Text(255)  DEFAULT NULL,\n" +
                        "  `Qvan_plan_title` date DEFAULT NULL,\n" +
                        "  `QVanPeriod` date DEFAULT NULL,\n" +
                        "  `Qvan_Creation_date` date DEFAULT NULL,\n" +
                        "  `Qvan_QVan_id` Text(255) DEFAULT NULL,\n" +
                        "  `QVanSiteCode` Text(255) DEFAULT NULL,\n" +
                        "  `QVan_plan_id_local` TEXT(255) DEFAULT NULL,\n" +
                        "  `Creator_id` TEXT(255) DEFAULT NULL,\n" +
                        "  `Qvan_nature` TEXT(255) DEFAULT NULL,\n" +
                        "  `QVanYear` TEXT(255) DEFAULT NULL,\n" +
                        "  `Qvan_Territory_id` TEXT(255) DEFAULT NULL,\n" +
                        "  `s_date` DATETIME DEFAULT CURRENT_TIMESTAMP,\n" +
                        "  `s_is_sync` INTEGER(20) DEFAULT NULL,\n" +
                        "  `s_status` INTEGER(20) DEFAULT NULL,\n" +
                        "  `s_long` TEXT(20) DEFAULT NULL,\n" +
                        "  `s_lat` TEXT(20) DEFAULT NULL\n" +
                        ") ;"
        );


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `Dumy_qavan_TourPlannerLocation` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `Remarks` Text(255) DEFAULT NULL,\n" +
                        "  `QVanTCPNo` Text(255) DEFAULT NULL,\n" +// foriegn key missing
                        "  `Product_Quality_plan` Text(255) DEFAULT NULL,\n" +
                        "  `QVanCompCode` Text(255) DEFAULT NULL,\n" +
                        "  `Sales_Data_plan` Text(255) DEFAULT NULL,\n" +
                        "  `QVanPeriod` Text(255)DEFAULT NULL,\n" +
                        "  `Planned_status` Text(255) DEFAULT NULL,\n" +
                        "  `QVanTransNo` Text(255) DEFAULT NULL,\n" +
                        "  `Qvan_RouteSite_id` Text(255) DEFAULT NULL,\n" +
                        "  `Tour_status` Text(255) DEFAULT NULL,\n" +
                        "  `QVanSiteCode` Text(255) DEFAULT NULL,\n" +
                        "  `QVan_plan_id_local` Text(255) DEFAULT NULL,\n" +
                        "  `Creation_date` Text(255) DEFAULT NULL,\n" +
                        "  `CostCenter` Text(255) DEFAULT NULL,\n" +
                        "  `Creator_id` Text(255) DEFAULT NULL,\n" +
                        "  `RetailSiteCode` Text(255) DEFAULT NULL,\n" +
                        "  `General_Inspection_plan` Text(255) DEFAULT NULL,\n" +
                        "  `Stock_Recnocelation_plan` Text(255) DEFAULT NULL,\n" +
                        "  `Dispenser_Measurment_plan` Text(255) DEFAULT NULL,\n" +
                        "  `QVanYear` Text(255) DEFAULT NULL,\n" +
                        "  `Tank_Inspection_plan` Text(255) DEFAULT NULL,\n" +
                        "  `SequenceNo` Text(255) DEFAULT NULL,\n" +
                        "  `Reason` Text(255) DEFAULT NULL,\n" +
                       /* "  `Longi` Text(255) DEFAULT NULL,\n" +
                        "  `AreaExectiveContact` Text(255) DEFAULT NULL,\n" +
                        "  `NoOfDaysPass` Text(255) DEFAULT NULL,\n" +
                        "  `CostCentrDes` Text(255) DEFAULT NULL,\n" +
                        "  `LastVistStatus` Text(255) DEFAULT NULL,\n" +

                        "  `tour_plan_status` Interger DEFAULT NULL,\n" +
                        "  `dispenser_measurment_plan_id` Interger DEFAULT NULL,\n" +
                        "  `product_quality_plan` Interger(20) DEFAULT NULL,\n" +
                        "  `tank_inspection_plan` Interger(20) DEFAULT NULL,\n" +
                        "  `sales_data_plan` Interger(20) DEFAULT NULL,\n" +
                        "  `stock_reconcelation_plan` Interger(20) DEFAULT NULL,\n" +
                        "  `general_inpection_plan` Interger(20) DEFAULT NULL,\n" +
                        "  `Plan_date` date DEFAULT NULL,\n" +
                        "  `Reason_id` Text(255) DEFAULT NULL,\n" +
                        "  `Sequence_id` Text(255) DEFAULT NULL,\n" +*/

                        "  `Status` TEXT(20) DEFAULT NULL,\n" +
                        "  `s_date` DATETIME DEFAULT CURRENT_TIMESTAMP,\n" +
                        "  `s_is_sync` INTEGER(20) DEFAULT NULL,\n" +
                        "  `s_status` INTEGER(20) DEFAULT NULL,\n" +
                        "  `s_long` TEXT(20) DEFAULT NULL,\n" +
                        "  `s_lat` TEXT(20) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `sentitems` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `user_id` Text(255) DEFAULT NULL,\n" +
                        "  `user_name` Text(255) DEFAULT NULL,\n" +
                        "  `postion` Text(255) DEFAULT NULL,\n" +// foriegn key missing
                        "  `documentid` Text(255) DEFAULT NULL,\n" +// foriegn key missing
                        "  `planname` Text(255) DEFAULT NULL,\n" +// foriegn key missing
                        "  `readstatus` Text(255) DEFAULT NULL,\n" +
                        "  `date` Text(255) DEFAULT NULL,\n" +
                        "  `nextaction` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `outbox` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `user_name` Text(255) DEFAULT NULL,\n" +
                        "  `postion` Text(255) DEFAULT NULL,\n" +// foriegn key missing
                        "  `date` Text(255) DEFAULT NULL,\n" +
                        "  `planname` Text(255) DEFAULT NULL,\n" +// foriegn key missing
                        "  `planmodel` Text(2000) DEFAULT NULL,\n" +
                        "  `id_territory` Text(2000) DEFAULT NULL,\n" +
                        "  `id_qavan` Text(2000) DEFAULT NULL,\n" +
                        "  `id_nature` Text(2000) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `menulabel` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `Enabled` Text(255) DEFAULT NULL,\n" +
                        "  `menu_id` Text(255) DEFAULT NULL,\n" +// foriegn key missing
                        "  `label` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `tanks_status` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `fueltype` Text(255) DEFAULT NULL,\n" +
                        "  `Standard` Text(255) DEFAULT NULL,\n" +// foriegn key missing
                        "  `Active` Text(255) DEFAULT NULL,\n" +// foriegn key missing
                        "  `StockUnit` Text(255) DEFAULT NULL,\n" +// foriegn key missing
                        "  `CostCenterCode` Text(255) DEFAULT NULL,\n" +// foriegn key missing
                        "  `TankDes` Text(255) DEFAULT NULL,\n" +// foriegn key missing
                        "  `CostCenterDes` Text(255) DEFAULT NULL,\n" +// foriegn key missing
                        "  `Image` Text(255) DEFAULT NULL,\n" +// foriegn key missing
                        "  `Dry` Text(255) DEFAULT NULL,\n" +// foriegn key missing
                        "  `Remarks` Text(255) DEFAULT NULL,\n" +// foriegn key missing
                        "  `TankCode` Text(255) DEFAULT NULL,\n" +// foriegn key missing
                        "  `Water` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `fueltype` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `name` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `tanks_description_dispenser` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `tankcode` Text(255) DEFAULT NULL,\n" +
                        "  `tankdes` Text(255) DEFAULT NULL,\n" +
                        "  `fueltype` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `dispenser_meaurment` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `tankcode` Text(255) DEFAULT NULL,\n" +
                        "  `fueltype` Text(255) DEFAULT NULL,\n" +
                        "  `dispensorid` Text(255) DEFAULT NULL,\n" +
                        "  `image` Text(255) DEFAULT NULL,\n" +
                        "  `remarks` Text(255) DEFAULT NULL\n" +

                        ") ;"
        );


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `dispenser_meaurment_certificate` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `remarks` Text(255) DEFAULT NULL,\n" +
                        "  `image` Text DEFAULT NULL,\n" +
                        "  `signature_retailer` Text DEFAULT NULL,\n" +
                        "  `signature_technician` Text DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `dispenser_meaurment_certificate_retailer` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `label` Text(255) DEFAULT NULL,\n" +
                        "  `fileName` Text(255) DEFAULT NULL,\n" +
                        "  `url` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `dispenser_meaurment_certificate_technician` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `label` Text(255) DEFAULT NULL,\n" +
                        "  `fileName` Text(255) DEFAULT NULL,\n" +
                        "  `url` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `dispenser_meaurment_images` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `tankcode` Text(255) DEFAULT NULL,\n" +
                        "  `dispensorid` Text(255) DEFAULT NULL,\n" +
                        "  `label` Text(255) DEFAULT NULL,\n" +
                        "  `fileName` Text(255) DEFAULT NULL,\n" +
                        "  `url` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `nozzle` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `tankcode` Text(255) DEFAULT NULL,\n" +
                        "  `fueltype` Text(255) DEFAULT NULL,\n" +
                        "  `dispensorid` Text(255) DEFAULT NULL,\n" +
                        "  `ActionPlan` Text(255) DEFAULT NULL,\n" +
                        "  `TotalSampleDrawn` Text(255) DEFAULT NULL,\n" +
                        "  `FirstMeterReading` Text(255) DEFAULT NULL,\n" +
                        "  `SampleDrawn` Text(255) DEFAULT NULL,\n" +
                        "  `NozzelID` Text(255) DEFAULT NULL,\n" +
                        "  `FirstReading` Text(255) DEFAULT NULL,\n" +
                        "  `FirstReadingPercentage` Text(255) DEFAULT NULL,\n" +
                        "  `ReadingDate` Text(255) DEFAULT NULL,\n" +
                        "  `FinalReading` TEXT(255) DEFAULT NULL,\n" +
                        "  `FinalReadingPercentage` TEXT(255) DEFAULT NULL,\n" +
                        "  `PreviousRefNo` TEXT(255) DEFAULT NULL,\n" +
                        "  `ClosingMeterReading` TEXT(255) DEFAULT NULL,\n" +
                        "  `NozzelDes` TEXT(255) DEFAULT NULL,\n" +
                        "  `NozzelNO` TEXT(255) DEFAULT NULL,\n" +
                        "  `PreviousReading` TEXT(255) DEFAULT NULL,\n" +
                        "  `status` Integer(10) DEFAULT NULL,\n" +
                        "  `Remarks` Text(255) DEFAULT NULL,\n" +
                        "  `Reasion` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `nozzle_images` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `tankcode` Text(255) DEFAULT NULL,\n" +
                        "  `dispensorid` Text(255) DEFAULT NULL,\n" +
                        "  `nozzleid` Text(255) DEFAULT NULL,\n" +
                        "  `label` Text(255) DEFAULT NULL,\n" +
                        "  `fileName` Text(255) DEFAULT NULL,\n" +
                        "  `url` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `ActionPlan` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `Code` Text(255) DEFAULT NULL,\n" +
                        "  `Desc` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `Reasion` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `Description` Text(255) DEFAULT NULL,\n" +
                        "  `Code` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `SelectedReasionDispenserAndNozzleWise` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `tankcode` Text(255) DEFAULT NULL,\n" +
                        "  `dispensorid` Text(255) DEFAULT NULL,\n" +
                        "  `nozzleid` Text(255) DEFAULT NULL,\n" +
                        "  `Description` Text(255) DEFAULT NULL,\n" +
                        "  `Code` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

//        //TODO:===================Certificate Generating Table
//        db.execSQL(
//                "CREATE TABLE IF NOT EXISTS  `fueltype_and_make_certificate` (\n" +
//                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
//                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
//                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
//                        "  `name` Text(255) DEFAULT NULL,\n" +
//                        "  `make` Text(255) DEFAULT NULL\n" +
//                        ") ;"
//        );
//
//


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `QAVan_GI_signature` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `signature` Text DEFAULT NULL,\n" +
                        "  `remarks` Text DEFAULT NULL,\n" +
                        "  `obtainpoints` Text DEFAULT NULL,\n" +
                        "  `totalpoints` Text DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `QAVan_GI_capture_signature` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `label` Text(255) DEFAULT NULL,\n" +
                        "  `fileName` Text(255) DEFAULT NULL,\n" +
                        "  `url` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE `QAVan_GI_Standard` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `Stander_id` INTEGER(10) DEFAULT NULL,\n" +
                        "  `CategoryCode` TEXT(50) DEFAULT NULL,\n" +
                        "  `Type` TEXT(255) DEFAULT NULL,\n" +
                        "  `ParticularCode` TEXT(50) DEFAULT NULL,\n" +
                        "  `Image` TEXT DEFAULT NULL,\n" +
                        "  `Remarks` TEXT DEFAULT NULL,\n" +
                        "  `CategoryDesc` TEXT(1000) DEFAULT NULL,\n" +
                        "  `ParticularDesc` TEXT(1000) DEFAULT NULL,\n" +
                        "  `Conditions` TEXT(1000) DEFAULT NULL,\n" +
                        "  `ActionPlan` TEXT(1000) DEFAULT NULL,\n" +
                        "  `Points` TEXT(1000) DEFAULT NULL,\n" +
                        "  `Status` TEXT(20) DEFAULT NULL,\n" +
                        "  `isClicked` INTEGER(10) DEFAULT NULL,\n" +
                        "  `s_date` DATETIME DEFAULT CURRENT_TIMESTAMP,\n" +
                        "  `s_is_sync` INTEGER(20) DEFAULT NULL,\n" +
                        "  `s_status` INTEGER(20) DEFAULT NULL,\n" +
                        "  `s_long` TEXT(20) DEFAULT NULL,\n" +
                        "  `s_lat` TEXT(20) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE `QAVan_GI_Standard_Images` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `CategoryCode` TEXT(50) DEFAULT NULL,\n" +
                        "  `ParticularCode` TEXT(50) DEFAULT NULL,\n" +
                        "  `label` Text(255) DEFAULT NULL,\n" +
                        "  `fileName` Text(255) DEFAULT NULL,\n" +
                        "  `url` Text(255) DEFAULT NULL\n" +

                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE `QAVan_GI_Equipment` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
                        "  `Stander_id` INTEGER(10) DEFAULT NULL,\n" +
                        "  `EquipmentDesc` TEXT(255) DEFAULT NULL,\n" +
                        "  `Checked` TEXT(50) DEFAULT NULL,\n" +
                        "  `Image` TEXT(50) DEFAULT NULL,\n" +
                        "  `SerialNo` TEXT(50) DEFAULT NULL,\n" +
                        "  `Remarks` TEXT(50) DEFAULT NULL,\n" +
                        "  `FixedAssetDesc` TEXT(50) DEFAULT NULL,\n" +
                        "  `OwnerShip` TEXT(1000) DEFAULT NULL,\n" +
                        "  `EquipmentCode` TEXT(1000) DEFAULT NULL,\n" +
                        "  `FixedAssetCode` TEXT(1000) DEFAULT NULL,\n" +
                        "  `Status` TEXT(20) DEFAULT NULL,\n" +
                        "  `s_date` DATETIME DEFAULT CURRENT_TIMESTAMP,\n" +
                        "  `s_is_sync` INTEGER(20) DEFAULT NULL,\n" +
                        "  `s_status` INTEGER(20) DEFAULT NULL,\n" +
                        "  `s_long` TEXT(20) DEFAULT NULL,\n" +
                        "  `s_lat` TEXT(20) DEFAULT NULL\n" +
                        ") ;"
        );


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `QAVan_GI_Conditions` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `CategoryCode` Text(255) DEFAULT NULL,\n" +
                        "  `ParticularCode` Text(255) DEFAULT NULL,\n" +
                        "  `Code` Text(255) DEFAULT NULL,\n" +
                        "  `Desc` Text(255) DEFAULT NULL,\n" +
                        "  `PointDesc` Text(255) DEFAULT NULL,\n" +
                        "  `PointCode` Text(255) DEFAULT NULL,\n" +
                        "  `Score` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `QAVan_GI_Actions` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `CategoryCode` Text(255) DEFAULT NULL,\n" +
                        "  `ParticularCode` Text(255) DEFAULT NULL,\n" +
                        "  `Code` Text(255) DEFAULT NULL,\n" +
                        "  `Desc` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS `all_points` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
                        "  `Code` Text(20) DEFAULT NULL,\n" +
                        "  `Score` Text(20) DEFAULT NULL\n" +
                        ") ;"
        );


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `fueltype_productquality` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `name` Text(255) DEFAULT NULL,\n" +
                        "  `status` Interger DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `tanks_description_productqualitytest` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `tankcode` Text(255) DEFAULT NULL,\n" +
                        "  `tankdes` Text(255) DEFAULT NULL,\n" +
                        "  `fueltype` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `sample_type_productqualitytest` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `tankcode` Text(255) DEFAULT NULL,\n" +
                        "  `fueltype` Text(255) DEFAULT NULL,\n" +

                        "  `Finalize` Text(255) DEFAULT NULL,\n" +
                        "  `ChargeTo` Text(255) DEFAULT NULL,\n" +
                        "  `TankDes` Text(255) DEFAULT NULL,\n" +
                        "  `Quantity` Text(255) DEFAULT NULL,\n" +
                        "  `ProductCode` Text(255) DEFAULT NULL,\n" +
                        "  `Image` Text(255) DEFAULT NULL,\n" +
                        "  `SampleRefNo` Text(255) DEFAULT NULL,\n" +
                        "  `Remarks` Text(255) DEFAULT NULL,\n" +
                        "  `ProductDes` Text(255) DEFAULT NULL,\n" +
                        "  `CollectionDate` Text(255) DEFAULT NULL,\n" +
                        "  `SampleCollectedBy` Text(255) DEFAULT NULL,\n" +
                        "  `DryReasonCode` Text(255) DEFAULT NULL,\n" +

                        "  `Remarks_submit` Text(255) DEFAULT NULL,\n" +
                        "  `SampleStatus` Text(255) DEFAULT NULL,\n" +
                        "  `Reasion` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `product_quality_images` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `tankcode` Text(255) DEFAULT NULL,\n" +
                        "  `label` Text(255) DEFAULT NULL,\n" +
                        "  `fileName` Text(255) DEFAULT NULL,\n" +
                        "  `url` Text(255) DEFAULT NULL\n" +

                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `product_quality_retain_images` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `tankcode` Text(255) DEFAULT NULL,\n" +
                        "  `label` Text(255) DEFAULT NULL,\n" +
                        "  `fileName` Text(255) DEFAULT NULL,\n" +
                        "  `url` Text(255) DEFAULT NULL\n" +

                        ") ;"
        );


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `product_quality_signature_images` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `label` Text(255) DEFAULT NULL,\n" +
                        "  `fileName` Text(255) DEFAULT NULL,\n" +
                        "  `url` Text(255) DEFAULT NULL\n" +

                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `product_quality_tech_signature_images` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `label` Text(255) DEFAULT NULL,\n" +
                        "  `fileName` Text(255) DEFAULT NULL,\n" +
                        "  `url` Text(255) DEFAULT NULL\n" +

                        ") ;"
        );


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `sample_description_productqualitytest` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `tankcode` Text(255) DEFAULT NULL,\n" +
                        "  `fueltype` Text(255) DEFAULT NULL,\n" +
                        "  `testcode` Text(255) DEFAULT NULL,\n" +


                        "  `TestTitleCode` Text(255) DEFAULT NULL,\n" +
                        "  `Method` Text(255) DEFAULT NULL,\n" +
                        "  `DefaultMethodName` Text(255) DEFAULT NULL,\n" +
                        "  `SummerFromDay` Text(255) DEFAULT NULL,\n" +
                        "  `DataTypeLabel` Text(255) DEFAULT NULL,\n" +
                        "  `WinterToDay` Text(255) DEFAULT NULL,\n" +
                        "  `RangeInWinterMax` Text(255) DEFAULT NULL,\n" +
                        "  `RangeInSumerMax` Text(255) DEFAULT NULL,\n" +
                        "  `Max` Text(255) DEFAULT NULL,\n" +
                        "  `TestSeasionApply` Text(255) DEFAULT NULL,\n" +
                        "  `Min` Text(255) DEFAULT NULL,\n" +
                        "  `RangeInSumerMin` Text(255) DEFAULT NULL,\n" +
                        "  `Result` Text(255) DEFAULT NULL,\n" +
                        "  `SummerFromMonth` Text(255) DEFAULT NULL,\n" +
                        "  `DataTypeID` Text(255) DEFAULT NULL,\n" +
                        "  `Critical` Text(255) DEFAULT NULL,\n" +
                        "  `TestSpecificationReq` Text(255) DEFAULT NULL,\n" +
                        "  `RangeSummerTo` Text(255) DEFAULT NULL,\n" +
                        "  `DefaultMethodCode` Text(255) DEFAULT NULL,\n" +
                        "  `WinterFromDay` Text(255) DEFAULT NULL,\n" +
                        "  `Mandatory` Text(255) DEFAULT NULL,\n" +
                        "  `TestTitleDes` Text(255) DEFAULT NULL,\n" +
                        "  `RangeWinterTo` Text(255) DEFAULT NULL,\n" +
                        "  `RangeSummerFrom` Text(255) DEFAULT NULL,\n" +
                        "  `SummerToDay` Text(255) DEFAULT NULL,\n" +
                        "  `RangeWinterFrom` Text(255) DEFAULT NULL,\n" +
                        "  `RangeInWinterMin` Text(255) DEFAULT NULL,\n" +
                        "  `WinterToMonth` Text(255) DEFAULT NULL,\n" +
                        "  `TestStatus` Text(255) DEFAULT NULL,\n" +
                        "  `Remarks` Text(255) DEFAULT NULL,\n" +
                        "  `SampleStatus` Text(255) DEFAULT NULL,\n" +
                        "  `Reasion` Text(255) DEFAULT NULL\n" +

                        ") ;"
        );


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `MethodListProductQuality` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `tankcode` Text(255) DEFAULT NULL,\n" +
                        "  `testcode` Text(255) DEFAULT NULL,\n" +
                        "  `Description` Text(255) DEFAULT NULL,\n" +
                        "  `Code` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `ReasionsProductQuality` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `tankcode` Text(255) DEFAULT NULL,\n" +
                        "  `Description` Text(255) DEFAULT NULL,\n" +
                        "  `Code` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `SampleStatusProductQuality` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `tankcode` Text(255) DEFAULT NULL,\n" +
                        "  `Description` Text(255) DEFAULT NULL,\n" +
                        "  `Code` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `productqualityresult_certificate_signature` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `retailsite_code` Text(255) DEFAULT NULL,\n" +
                        "  `label` Text(255) DEFAULT NULL,\n" +
                        "  `fileName` Text(255) DEFAULT NULL,\n" +
                        "  `url` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `UserObservation` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `plan_id` Text(255) DEFAULT NULL,\n" +
                        "  `ProductColor` Text(255) DEFAULT NULL,\n" +
                        "  `FuelType` Text(255) DEFAULT NULL,\n" +
                        "  `RetailSiteName` Text(255) DEFAULT NULL,\n" +
                        "  `UserObservation` Text(255) DEFAULT NULL,\n" +
                        "  `RetailSiteCode` Text(255) DEFAULT NULL,\n" +
                        "  `SpecificGravity` Text(255) DEFAULT NULL,\n" +
                        "  `Remarks` Text(255) DEFAULT NULL,\n" +
                        "  `ReconStatus` Text(255) DEFAULT NULL,\n" +
                        "  `Reasion` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `qa_possibleuserobservation` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `Description` Text(255) DEFAULT NULL,\n" +
                        "  `Code` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `qa_possibleuserobservation_productcolor` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `Description` Text(255) DEFAULT NULL,\n" +
                        "  `Code` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `qa_possibleuserobservation_reasons` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `Description` Text(255) DEFAULT NULL,\n" +
                        "  `Code` Text(255) DEFAULT NULL\n" +
                        ") ;"

        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `employees` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `Code` Text(255) DEFAULT NULL,\n" +
                        "  `IsThirdParty` Text(255) DEFAULT NULL,\n" +
                        "  `Designation` Text(255) DEFAULT NULL,\n" +
                        "  `EmployeeName` Text(255) DEFAULT NULL\n" +
                        ") ;"

        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `starttourstatus` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `planid` Text(255) DEFAULT NULL,\n" +
                        "  `status` Integer(10) DEFAULT NULL\n" +
                        ") ;"
        );

        // TODO: LAB TEST REQUEST
        // TODO: ===========================================================


        // TODO: ======================= QA Product Test Requests ===========================

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `qa_product_test_req` (\n" +
                        "  `Id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `TestCase` Text(255) DEFAULT NULL,\n" +
                        "  `RequestDate` Text(255) DEFAULT NULL,\n" +
                        "  `LabType` Text(255) DEFAULT NULL,\n" +
                        "  `Remarks` Text(255) DEFAULT NULL,\n" +
                        "  `TestType` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_managers` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `QualityInchargeName` Text(255) DEFAULT NULL,\n" +
                        "  `VanCode` Text(255) DEFAULT NULL,\n" +
                        "  `VanDesc` Text(255) DEFAULT NULL,\n" +
                        "  `QualityInchargeCode` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_request` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `FormNo` Text(255) DEFAULT NULL,\n" +
                        "  `ReleaseNo` Text(255) DEFAULT NULL,\n" +
                        "  `TestReportDate` Text(255) DEFAULT NULL,\n" +
                        "  `ReportNo` Text(255) DEFAULT NULL,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestDate` Text(255) DEFAULT NULL,\n" +
                        "  `RequestDetail` Text(255) DEFAULT NULL,\n" +
                        "  `TankDesc` Text(255) DEFAULT NULL,\n" +
                        "  `OldTestReportNo` Text(255) DEFAULT NULL,\n" +
                        "  `TankCode` Text(255) DEFAULT NULL,\n" +
                        "  `RequesterRemarks` Text(255) DEFAULT NULL,\n" +
                        "  `SupplyPointDesc` Text(255) DEFAULT NULL,\n" +
                        "  `VanTCPNo` Text(255) DEFAULT NULL,\n" +
                        "  `LabType` Text(255) DEFAULT NULL,\n" +
                        "  `ManageLabDesc` Text(255) DEFAULT NULL,\n" +
                        "  `SupplyPointCode` Text(255) DEFAULT NULL,\n" +
                        "  `PerformedLabCode` Text(255) DEFAULT NULL,\n" +
                        "  `DepartmentCode` Text(255) DEFAULT NULL,\n" +
                        "  `PerformedLabDesc` Text(255) DEFAULT NULL,\n" +
                        "  `DesignationDesc` Text(255) DEFAULT NULL,\n" +
                        "  `ManageLabCode` Text(255) DEFAULT NULL,\n" +
                        "  `DesignationCode` Text(255) DEFAULT NULL,\n" +
                        "  `RequestedBy` Text(255) DEFAULT NULL,\n" +
                        "  `VanTCPDate` Text(255) DEFAULT NULL,\n" +
                        "  `TestType` Text(255) DEFAULT NULL,\n" +
                        "  `InvoiceUrl` Text(255) DEFAULT NULL,\n" +
                        "  `DepartmentDesc` Text(255) DEFAULT NULL,\n" +
                        "  `LabSelectionVisible` Text(255) DEFAULT NULL,\n" +
                        "  `LabSelectionEnable` Text(255) DEFAULT NULL,\n" +
                        "  `LabInchargeRemarksVisible` Text(255) DEFAULT NULL,\n" +
                        "  `LabInchargeRemarksEnable` Text(255) DEFAULT NULL,\n" +
                        "  `SampleCollectionReq` Text(255) DEFAULT NULL,\n" +
                        "  `TestSelectionQAVisible` Text(255) DEFAULT NULL,\n" +
                        "  `TestSelectionLabInchVisible` Text(255) DEFAULT NULL,\n" +
                        "  `ChargeToVisible` Text(255) DEFAULT NULL,\n" +
                        "  `AdvanceRequiredVisible` Text(255) DEFAULT NULL,\n" +
                        "  `AdvanceRequiredEnable` Text(255) DEFAULT NULL,\n" +
                        "  `AdvanceApprovalVisible` Text(255) DEFAULT NULL,\n" +
                        "  `AdvanceApprovalEnable` Text(255) DEFAULT NULL,\n" +
                        "  `AdvanceConfirmationVisible` Text(255) DEFAULT NULL,\n" +
                        "  `AdvanceConfirmationEnable` Text(255) DEFAULT NULL,\n" +
                        "  `ChemistSelectionVisible` Text(255) DEFAULT NULL,\n" +
                        "  `ChemistSelectionEnable` Text(255) DEFAULT NULL,\n" +
                        "  `TestPerformVisible` Text(255) DEFAULT NULL,\n" +
                        "  `SampleCollectorVisible` Text(255) DEFAULT NULL,\n" +
                        "  `SampleCollectorEnable` Text(255) DEFAULT NULL,\n" +
                        "  `MenuCollectSampleVisible` Text(255) DEFAULT NULL,\n" +
                        "  `MenuCollectSampleEnable` Text(255) DEFAULT NULL,\n" +
                        "  `MenuRetainSampleVisible` Text(255) DEFAULT NULL,\n" +
                        "  `MenuRetainSampleEnable` Text(255) DEFAULT NULL,\n" +
                        "  `MenuReceiveSampleVisible` Text(255) DEFAULT NULL,\n" +
                        "  `MenuReceiveSampleEnable` Text(255) DEFAULT NULL,\n" +
                        "  `MenuDrainSampleVisible` Text(255) DEFAULT NULL,\n" +
                        "  `MenuDrainSampleEnable` Text(255) DEFAULT NULL,\n" +
                        "  `MenuInvoiceVisible` Text(255) DEFAULT NULL\n" +
                        ") ;"

        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_advanceaproval` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `AdvanceStatus` Text(255) DEFAULT NULL,\n" +
                        "  `Remarks` Text(2000) DEFAULT NULL\n" +
                        ") ;"
        );


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_Advanceaproval_intimate` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `empCode` Text(255) DEFAULT NULL,\n" +
                        "  `Designation` Text(255) DEFAULT NULL,\n" +
                        "  `EmployeeName` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_chemistlist` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `IsSelected` Text(255) DEFAULT NULL,\n" +
                        "  `EmpName` Text(255) DEFAULT NULL,\n" +
                        "  `EmpCode` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_qainchargeSection` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `DesignationDesc` Text(255) DEFAULT NULL,\n" +
                        "  `ShowHide` Text(255) DEFAULT NULL,\n" +
                        "  `ManagingLabDesc` Text(255) DEFAULT NULL,\n" +
                        "  `DesignationCode` Text(255) DEFAULT NULL,\n" +
                        "  `EnableDisable` Text(255) DEFAULT NULL,\n" +
                        "  `TestingLabDesc` Text(255) DEFAULT NULL,\n" +
                        "  `ManagingLabCode` Text(255) DEFAULT NULL,\n" +
                        "  `TestingLabCode` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_ChargeTo` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `ProductCode` Text(255) DEFAULT NULL,\n" +
                        "  `SampleId` Text(255) DEFAULT NULL,\n" +
                        "  `Requester` Text(255) DEFAULT NULL,\n" +
                        "  `Finance` Text(255) DEFAULT NULL,\n" +
                        "  `SalesPerson` Text(255) DEFAULT NULL,\n" +
                        "  `LogisticAtSite` Text(255) DEFAULT NULL,\n" +
                        "  `LogisticAtHeadOffice` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_AdvanceConfirmation` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `Remarks` Text(2000) DEFAULT NULL,\n" +
                        "  `AdvanceArrangementStatus` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_AdvanceConfirmation_intimate` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `empCode` Text(255) DEFAULT NULL,\n" +
                        "  `Designation` Text(255) DEFAULT NULL,\n" +
                        "  `EmployeeName` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_AdvanceRequest` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `AdvanceAmount` Text(255) DEFAULT NULL,\n" +
                        "  `AdvanceRequired` Text(255) DEFAULT NULL,\n" +
                        "  `Remarks` Text(2000) DEFAULT NULL,\n" +
                        "  `AdvanceApprovalFromCode` Text(2000) DEFAULT NULL,\n" +
                        "  `AdvanceApprovalFrom` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_AdvanceRequest_intimate` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `empCode` Text(255) DEFAULT NULL,\n" +
                        "  `Designation` Text(255) DEFAULT NULL,\n" +
                        "  `EmployeeName` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_ProductList` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `ProductCode` Text(255) DEFAULT NULL,\n" +
                        "  `TransNo` Text(255) DEFAULT NULL,\n" +
                        "  `CurrentActor` Text(255) DEFAULT NULL,\n" +
                        "  `ProductDesc` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_TestList` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `ProductCode` Text(255) DEFAULT NULL,\n" +
                        "  `SampleId` Text(255) DEFAULT NULL,\n" +
                        "  `TestCode` Text(255) DEFAULT NULL,\n" +
                        "  `TestTitleCode` Text(255) DEFAULT NULL,\n" +
                        "  `Method` Text(255) DEFAULT NULL,\n" +
                        "  `RequesterSelection` Text(255) DEFAULT NULL,\n" +
                        "  `LabInchargeSelection` Text(255) DEFAULT NULL,\n" +
                        "  `DefaultMethodName` Text(255) DEFAULT NULL,\n" +
                        "  `DataTypeLabel` Text(255) DEFAULT NULL,\n" +
                        "  `TestPrice` Text(255) DEFAULT NULL,\n" +
                        "  `RangeInWinterMax` Text(255) DEFAULT NULL,\n" +
                        "  `RangeInSumerMax` Text(255) DEFAULT NULL,\n" +
                        "  `Max` Text(255) DEFAULT NULL,\n" +
                        "  `TestSeasionApply` Text(255) DEFAULT NULL,\n" +
                        "  `Min` Text(255) DEFAULT NULL,\n" +
                        "  `RangeInSumerMin` Text(255) DEFAULT NULL,\n" +
                        "  `Result` Text(255) DEFAULT NULL,\n" +
                        "  `DataTypeID` Text(255) DEFAULT NULL,\n" +
                        "  `Critical` Text(255) DEFAULT NULL,\n" +
                        "  `TestSpecificationReq` Text(255) DEFAULT NULL,\n" +
                        "  `RangeSummerTo` Text(255) DEFAULT NULL,\n" +
                        "  `DefaultMethodCode` Text(255) DEFAULT NULL,\n" +
                        "  `QVInchargeSelection` Text(255) DEFAULT NULL,\n" +
                        "  `Mandatory` Text(255) DEFAULT NULL,\n" +
                        "  `TestTitleDes` Text(255) DEFAULT NULL,\n" +
                        "  `RangeWinterTo` Text(255) DEFAULT NULL,\n" +
                        "  `RangeSummerFrom` Text(255) DEFAULT NULL,\n" +
                        "  `RangeWinterFrom` Text(255) DEFAULT NULL,\n" +
                        "  `RangeInWinterMin` Text(255) DEFAULT NULL,\n" +
                        "  `TestStatus` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_TestList_sample` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `ProductCode` Text(255) DEFAULT NULL,\n" +
                        "  `SampleId` Text(255) DEFAULT NULL,\n" +
                        "  `TestCode` Text(255) DEFAULT NULL,\n" +
                        "  `TestTitleCode` Text(255) DEFAULT NULL,\n" +
                        "  `Method` Text(255) DEFAULT NULL,\n" +
                        "  `RequesterSelection` Text(255) DEFAULT NULL,\n" +
                        "  `LabInchargeSelection` Text(255) DEFAULT NULL,\n" +
                        "  `DefaultMethodName` Text(255) DEFAULT NULL,\n" +
                        "  `DataTypeLabel` Text(255) DEFAULT NULL,\n" +
                        "  `TestPrice` Text(255) DEFAULT NULL,\n" +
                        "  `RangeInWinterMax` Text(255) DEFAULT NULL,\n" +
                        "  `RangeInSumerMax` Text(255) DEFAULT NULL,\n" +
                        "  `Max` Text(255) DEFAULT NULL,\n" +
                        "  `TestSeasionApply` Text(255) DEFAULT NULL,\n" +
                        "  `Min` Text(255) DEFAULT NULL,\n" +
                        "  `RangeInSumerMin` Text(255) DEFAULT NULL,\n" +
                        "  `Result` Text(255) DEFAULT NULL,\n" +
                        "  `DataTypeID` Text(255) DEFAULT NULL,\n" +
                        "  `Critical` Text(255) DEFAULT NULL,\n" +
                        "  `TestSpecificationReq` Text(255) DEFAULT NULL,\n" +
                        "  `RangeSummerTo` Text(255) DEFAULT NULL,\n" +
                        "  `DefaultMethodCode` Text(255) DEFAULT NULL,\n" +
                        "  `QVInchargeSelection` Text(255) DEFAULT NULL,\n" +
                        "  `Mandatory` Text(255) DEFAULT NULL,\n" +
                        "  `TestTitleDes` Text(255) DEFAULT NULL,\n" +
                        "  `RangeWinterTo` Text(255) DEFAULT NULL,\n" +
                        "  `RangeSummerFrom` Text(255) DEFAULT NULL,\n" +
                        "  `RangeWinterFrom` Text(255) DEFAULT NULL,\n" +
                        "  `RangeInWinterMin` Text(255) DEFAULT NULL,\n" +
                        "  `TestStatus` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_MethodList` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `ProductCode` Text(255) DEFAULT NULL,\n" +
                        "  `TestCode` Text(255) DEFAULT NULL,\n" +
                        "  `Description` Text(255) DEFAULT NULL,\n" +
                        "  `Code` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_MethodList_sample` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `ProductCode` Text(255) DEFAULT NULL,\n" +
                        "  `SampleId` Text(255) DEFAULT NULL,\n" +
                        "  `TestCode` Text(255) DEFAULT NULL,\n" +
                        "  `Description` Text(255) DEFAULT NULL,\n" +
                        "  `Code` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_LabInchargeSection` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `ProductCode` Text(255) DEFAULT NULL,\n" +
                        "  `LabInchargeName` Text(255) DEFAULT NULL,\n" +
                        "  `DesignationDesc` Text(255) DEFAULT NULL,\n" +
                        "  `ShowHide` Text(255) DEFAULT NULL,\n" +
                        "  `LabInchargeCode` Text(255) DEFAULT NULL,\n" +
                        "  `DesignationCode` Text(255) DEFAULT NULL,\n" +
                        "  `Date` Text(255) DEFAULT NULL,\n" +
                        "  `EnableDisable` Text(255) DEFAULT NULL,\n" +
                        "  `SampleStatus` Text(255) DEFAULT NULL,\n" +
                        "  `Reason` Text(255) DEFAULT NULL,\n" +
                        "  `Remarks` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_SampleList` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `ProductCode` Text(255) DEFAULT NULL,\n" +
                        "  `ProductName` Text(255) DEFAULT NULL,\n" +
                        "  `Finalize` Text(255) DEFAULT NULL,\n" +
                        "  `Quantity` Text(255) DEFAULT NULL,\n" +
                        "  `SampleRefNo` Text(255) DEFAULT NULL,\n" +
                        "  `Remarks` Text(255) DEFAULT NULL,\n" +
                        "  `OldSampleId` Text(255) DEFAULT NULL,\n" +
                        "  `SampleStatus` Text(255) DEFAULT NULL,\n" +
                        "  `SampleType` Text(255) DEFAULT NULL,\n" +
                        "  `SampleId` Text(255) DEFAULT NULL,\n" +
                        "  `CollectedBy` Text(255) DEFAULT NULL,\n" +
                        "  `CollectionDate` Text(255) DEFAULT NULL,\n" +
                        "  `MenuRetainSampleVisible` Text(255) DEFAULT NULL,\n" +
                        "  `MenuRetainSampleEnable` Text(255) DEFAULT NULL,\n" +
                        "  `MenuDrainSampleVisible` Text(255) DEFAULT NULL,\n" +
                        "  `MenuDrainSampleEnable` Text(255) DEFAULT NULL,\n" +
                        "  `sampleAction` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_selected_chemist` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `ProductCode` Text(255) DEFAULT NULL,\n" +
                        "  `SampleId` Text(255) DEFAULT NULL,\n" +
                        "  `ShowHide` Text(255) DEFAULT NULL,\n" +
                        "  `DesignationDesc` Text(255) DEFAULT NULL,\n" +
                        "  `ChemistName` Text(255) DEFAULT NULL,\n" +
                        "  `DesignationCode` Text(255) DEFAULT NULL,\n" +
                        "  `EnableDisable` Text(255) DEFAULT NULL,\n" +
                        "  `ChemistCode` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_SampleAttachmentsList` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `ProductCode` Text(255) DEFAULT NULL,\n" +
                        "  `SampleId` Text(255) DEFAULT NULL,\n" +
                        "  `label` Text(255) DEFAULT NULL,\n" +
                        "  `fileName` Text(255) DEFAULT NULL,\n" +
                        "  `url` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_LabInchargeAssignment` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `ProductCode` Text(255) DEFAULT NULL,\n" +
                        "  `SampleId` Text(255) DEFAULT NULL,\n" +
                        "  `ShowHide` Text(255) DEFAULT NULL,\n" +
                        "  `DesignationDesc` Text(255) DEFAULT NULL,\n" +
                        "  `CollectorCode` Text(255) DEFAULT NULL,\n" +
                        "  `DesignationCode` Text(255) DEFAULT NULL,\n" +
                        "  `EnableDisable` Text(255) DEFAULT NULL,\n" +
                        "  `Remarks` Text(255) DEFAULT NULL,\n" +
                        "  `CollectorName` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_LabInchargeAssignment_intimate` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `ProductCode` Text(255) DEFAULT NULL,\n" +
                        "  `SampleId` Text(255) DEFAULT NULL,\n" +
                        "  `empCode` Text(255) DEFAULT NULL,\n" +
                        "  `Designation` Text(255) DEFAULT NULL,\n" +
                        "  `EmployeeName` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_Samplelist_PossibleReasons` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `ProductCode` Text(255) DEFAULT NULL,\n" +
                        "  `SampleId` Text(255) DEFAULT NULL,\n" +
                        "  `Code` Text(255) DEFAULT NULL,\n" +
                        "  `Description` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );
        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `labtest_Samplelist_DrainLocations` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                        "  `ProductCode` Text(255) DEFAULT NULL,\n" +
                        "  `SampleId` Text(255) DEFAULT NULL,\n" +
                        "  `LocationCode` Text(255) DEFAULT NULL,\n" +
                        "  `LocationDesc` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );


        //TODO:=====================================================


        //region Locator
        // Sqlite Locator Tables

        db.execSQL("CREATE TABLE \"FillingStations\" (\n" +
                "\t\"id\"\tINTEGER PRIMARY KEY AUTOINCREMENT,\n" +
                "\"CusCode\"\tTEXT," +
                "\t\"HobPrice\"\tTEXT,\n" +
                "\t\"HSDPrice\"\tTEXT,\n" +
                "\t\"District\"\tTEXT,\n" +
                "\t\"CusDesc\"\tTEXT,\n" +
                "\t\"SupremPrice\"\tTEXT,\n" +
                "\t\"Lati\"\tTEXT,\n" +
                "\t\"CNGPrice\"\tTEXT,\n" +
                "\t\"longi\"\tTEXT,\n" +
                "\t\"CusAddress\"\tTEXT,\n" +
                "\t\"region\"\tTEXT,\n" +
                "\t\"subregion\"\tTEXT\n" +
                ");");

        db.execSQL("CREATE TABLE \"FuelTypes\" (\n" +
                "\t\"id\"\tINTEGER PRIMARY KEY AUTOINCREMENT,\n" +
                "\t\"cuscode\"\tTEXT,\n" +
                "\t\"HOBC97\"\tTEXT,\n" +
                "\t\"CNG\"\tTEXT,\n" +
                "\t\"Superem\"\tTEXT,\n" +
                "\t\"Diesel\"\tTEXT\n" +
                ");");

        db.execSQL("CREATE TABLE \"Services\" (\n" +
                "\t\"id\"\tINTEGER PRIMARY KEY AUTOINCREMENT,\n" +
                "\t\"cuscode\"\tTEXT,\n" +
                "\t\"ServiceCode\"\tTEXT,\n" +
                "\t\"ServiceDes\"\tTEXT\n" +
                ");");


        db.execSQL("CREATE TABLE \"SearchedFillingStations\" (\n" +
                "\t\"id\"\tINTEGER PRIMARY KEY AUTOINCREMENT,\n" +
                "\t\"CusCode\"\tTEXT,\n" +
                "\t\"HobPrice\"\tTEXT,\n" +
                "\t\"HSDPrice\"\tTEXT,\n" +
                "\t\"District\"\tTEXT,\n" +
                "\t\"CusDesc\"\tTEXT,\n" +
                "\t\"SupremPrice\"\tTEXT,\n" +
                "\t\"Lati\"\tTEXT,\n" +
                "\t\"CNGPrice\"\tTEXT,\n" +
                "\t\"longi\"\tTEXT,\n" +
                "\t\"CusAddress\"\tTEXT,\n" +
                "\t\"HOBC97\"\tTEXT,\n" +
                "\t\"CNG\"\tTEXT,\n" +
                "\t\"Diesel\"\tTEXT,\n" +
                "\t\"Superem\"\tTEXT,\n" +
                "\t\"Services\"\tTEXT\n" +
                ")");
        //endregion


        //region mansoor

        /////////////////=====================Start Mansoor Tables====================///////////

        //////////==============Start create Fragment Lab Test========================////


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `LTTank` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestId` Text(255) DEFAULT NULL,\n" +
                        "  `TankCode` Text(255) DEFAULT NULL,\n" +
                        "  `TankDesc` Text(255) DEFAULT NULL,\n" +
                        "  `SupplyPoint` Text(255) DEFAULT NULL,\n" +
                        "  `SupplyPointDesc` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `LTParcel` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestId` Text(255) DEFAULT NULL,\n" +
                        "  `SupplySource` Text(255) DEFAULT NULL,\n" +
                        "  `SupplySourceDesc` Text(255) DEFAULT NULL,\n" +
                        "  `ReferenceNo` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `LTSample` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestId` Text(255) DEFAULT NULL,\n" +
                        "  `SupplyPoint` Text(255) DEFAULT NULL,\n" +
                        "  `SupplyPointDesc` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `LTTankLorrySTN` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestId` Text(255) DEFAULT NULL,\n" +
                        "  `ToSupplyPoint` Text(255) DEFAULT NULL,\n" +
                        "  `ToSupplyPointDesc` Text(255) DEFAULT NULL,\n" +
                        "  `FromSupplyPoint` Text(255) DEFAULT NULL,\n" +
                        "  `FromSupplyPointDesc` Text(255) DEFAULT NULL,\n" +
                        "  `TankLorry` Text(255) DEFAULT NULL,\n" +
                        "  `Carriage` Text(255) DEFAULT NULL,\n" +
                        "  `STNNo` Text(255) DEFAULT NULL,\n" +
                        "  `Driver` Text(255) DEFAULT NULL,\n" +
                        "  `Date` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `LTTankLorrySaleInv` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestId` Text(255) DEFAULT NULL,\n" +
                        "  `Customer` Text(255) DEFAULT NULL,\n" +
                        "  `CustomerDesc` Text(255) DEFAULT NULL,\n" +
                        "  `SupplyPointDesc` Text(255) DEFAULT NULL,\n" +
                        "  `TankLorry` Text(255) DEFAULT NULL,\n" +
                        "  `Carriage` Text(255) DEFAULT NULL,\n" +
                        "  `InvoiceNo` Text(255) DEFAULT NULL,\n" +
                        "  `Driver` Text(255) DEFAULT NULL,\n" +
                        "  `InvoiceDate` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `LTTLOMC` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestId` Text(255) DEFAULT NULL,\n" +
                        "  `SupplySource` Text(255) DEFAULT NULL,\n" +
                        "  `SupplySourceDesc` Text(255) DEFAULT NULL,\n" +
                        "  `TankLorryNo` Text(255) DEFAULT NULL,\n" +
                        "  `TankLorryCheck` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `LTCustomerSample` (\n" +
                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `RequestId` Text(255) DEFAULT NULL,\n" +
                        "  `Customer` Text(255) DEFAULT NULL,\n" +
                        "  `CustomerDesc` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );


        //////////==============End create Fragment Lab Test========================////


        //////////==============Start Tables Fraudulent========================////


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `FAMain` (\n" +
                        "  `FAid` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `FANumber` Text(255) DEFAULT NULL,\n" +
                        "  `FAAgreementFile` Text(255) DEFAULT NULL,\n" +
                        "  `TLNumber` Text(255) DEFAULT NULL,\n" +
                        "  `Carriage` Text(255) DEFAULT NULL,\n" +
                        "  `STNInvoiceNo` Text(255) DEFAULT NULL,\n" +
                        "  `DocDate` Text(255) DEFAULT NULL,\n" +
                        "  `FromSupplyPointDesc` Text(255) DEFAULT NULL,\n" +
                        "  `ToSupplyPointDesc` Text(255) DEFAULT NULL,\n" +
                        "  `DriverCodeDesc` Text(255) DEFAULT NULL,\n" +
                        "  `DriverCode` Text(255) DEFAULT NULL,\n" +
                        "  `CarriageCode` Text(255) DEFAULT NULL,\n" +
                        "  `FakeDipChart` Text(255) DEFAULT NULL,\n" +
                        "  `Type` Text(255) DEFAULT NULL,\n" +
                        "  `DebitNoteUrl` Text(255) DEFAULT NULL,\n" +
                        "  `AgreementUrl` Text(255) DEFAULT NULL,\n" +
                        "  `DipChartUrl` Text(255) DEFAULT NULL,\n" +
                        "  `s_is_sync` Integer(255) DEFAULT NULL,\n" +
                        "  `s_date` DATETIME DEFAULT CURRENT_TIMESTAMP\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `FAChamber` (\n" +
                        "  `FACid` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `FAid` Integer(255) DEFAULT NULL,\n" +
                        "  `FANumber` Text(255) DEFAULT NULL,\n" +
                        "  `ChamberNo` Text(255) DEFAULT NULL,\n" +
                        "  `ChamberDescription` Text(255) DEFAULT NULL,\n" +
                        "  `ProductDesc` Text(255) DEFAULT NULL,\n" +
                        "  `Rate` Text(255) DEFAULT NULL,\n" +
                        "  `FillingRate` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `FAUserInput` (\n" +
                        "  `FACUIid` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `FACid` Integer(255) DEFAULT NULL,\n" +
                        "  `FAid` Integer(255) DEFAULT NULL,\n" +
                        "  `FANumber` Text(255) DEFAULT NULL,\n" +
                        "  `ChamberNo` Text(255) DEFAULT NULL,\n" +
                        "  `InvolvementNo` Text(255) DEFAULT NULL,\n" +
                        "  `Involvement` Text(255) DEFAULT NULL,\n" +
                        "  `Quantity` Text(255) DEFAULT NULL,\n" +
                        "  `Remarks` Text(255) DEFAULT NULL\n" +
                        ") ;"
        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `FAAttachments` (\n" +
                        "  `FAAid` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `FACUIid` Integer(255) DEFAULT NULL,\n" +
                        "  `FileName` Text(255) DEFAULT NULL,\n" +
                        "  `AttachmentID` Text(255) DEFAULT NULL,\n" +
                        "  `FileLabel` Text(255) DEFAULT NULL,\n" +
                        "  `FilePath` Text(255) DEFAULT NULL\n" +
                        ") ;"

        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `FAAction` (\n" +
                        "  `FAActid` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `FAid` Integer(255) DEFAULT NULL,\n" +
                        "  `FANumber` Text(255) DEFAULT NULL,\n" +
                        "  `Title` Text(255) DEFAULT NULL,\n" +
                        "  `isCurrent` Integer(255) DEFAULT NULL\n" +
                        ") ;"

        );


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `FAADriver` (\n" +
                        "  `FAADid` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `FAActid` Integer(255) DEFAULT NULL,\n" +
                        "  `DTitle` Text(255) DEFAULT NULL,\n" +
                        "  `isApply` Integer(255) DEFAULT NULL,\n" +
                        "  `isImmediate` Integer(255) DEFAULT NULL,\n" +
                        "  `isSpecified` Integer(255) DEFAULT NULL,\n" +
                        "  `isUnspecified` Integer(255) DEFAULT NULL,\n" +
                        "  `fromDate` Text(255) DEFAULT NULL,\n" +
                        "  `toDate` Text(255) DEFAULT NULL,\n" +
                        "  `remarks` Text(255) DEFAULT NULL\n" +
                        ") ;"

        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `FAATankLorry` (\n" +
                        "  `FAATid` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `FAActid` Integer(255) DEFAULT NULL,\n" +
                        "  `TankTitle` Text(255) DEFAULT NULL,\n" +
                        "  `isApply` Integer(255) DEFAULT NULL,\n" +
                        "  `isImmediate` Integer(255) DEFAULT NULL,\n" +
                        "  `isSpecified` Integer(255) DEFAULT NULL,\n" +
                        "  `isUnspecified` Integer(255) DEFAULT NULL,\n" +
                        "  `fromDate` Text(255) DEFAULT NULL,\n" +
                        "  `toDate` Text(255) DEFAULT NULL,\n" +
                        "  `remarks` Text(255) DEFAULT NULL\n" +
                        ") ;"

        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `FAATransport` (\n" +
                        "  `FAATransid` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `FAActid` Integer(255) DEFAULT NULL,\n" +
                        "  `TransTitle` Text(255) DEFAULT NULL,\n" +
                        "  `isApply` Integer(255) DEFAULT NULL,\n" +
                        "  `isImmediate` Integer(255) DEFAULT NULL,\n" +
                        "  `isSpecified` Integer(255) DEFAULT NULL,\n" +
                        "  `isUnspecified` Integer(255) DEFAULT NULL,\n" +
                        "  `fromDate` Text(255) DEFAULT NULL,\n" +
                        "  `toDate` Text(255) DEFAULT NULL,\n" +
                        "  `remarks` Text(255) DEFAULT NULL\n" +
                        ") ;"

        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `ReasonsMaster` (\n" +
                        "  `FARMid` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `FAid` Integer(255) DEFAULT NULL,\n" +
                        "  `FANumber` Text(255) DEFAULT NULL,\n" +
                        "  `FACid` Integer(255) DEFAULT NULL,\n" +
                        "  `FACNumber` Text(255) DEFAULT NULL,\n" +
                        "  `RMTitle` Text(255) DEFAULT NULL,\n" +
                        "  `RMUser` Text(255) DEFAULT NULL,\n" +
                        "  `RMUserDesignation` Text(255) DEFAULT NULL,\n" +
                        "  `isCurrent` Integer(255) DEFAULT NULL\n" +
                        ") ;"

        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `Reasons` (\n" +
                        "  `FARid` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `FARMid` Integer(255) DEFAULT NULL,\n" +
                        "  `RCode` Text(255) DEFAULT NULL,\n" +
                        "  `RDescription` Text(255) DEFAULT NULL,\n" +
                        "  `RPenaltyClauseNo` Text(255) DEFAULT NULL,\n" +
                        "  `RPenatyCaseNumber` Text(255) DEFAULT NULL,\n" +
                        "  `RSurcharge` Text(255) DEFAULT NULL,\n" +
                        "  `RPenaltyPercentage` Text(255) DEFAULT NULL,\n" +
                        "  `RLumsum` Text(255) DEFAULT NULL,\n" +
                        "  `RTotal` Text(255) DEFAULT NULL,\n" +
                        "  `RRemarks` Text(255) DEFAULT NULL\n" +
                        ") ;"

        );


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `Case_List` (\n" +
                        "  `CLId` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `Description` Text(255) DEFAULT NULL,\n" +
                        "  `Code` Text(255) DEFAULT NULL,\n" +
                        "  `FANumber` Text(255) DEFAULT NULL,\n" +
                        "  `CarriageCode` Text(255) DEFAULT NULL\n" +
                        ") ;"

        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `Penalty_Clause_List` (\n" +
                        "  `PCLId` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `CaseNo` Text(255) DEFAULT NULL,\n" +
                        "  `FANumber` Text(255) DEFAULT NULL,\n" +
                        "  `CarriageCode` Text(255) DEFAULT NULL\n" +
                        ") ;"

        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `Reasons_List` (\n" +
                        "  `RLId` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                        "  `Description` Text(255) DEFAULT NULL,\n" +
                        "  `Code` Text(255) DEFAULT NULL,\n" +
                        "  `FANumber` Text(255) DEFAULT NULL,\n" +
                        "  `CarriageCode` Text(255) DEFAULT NULL\n" +
                        ") ;"

        );

        /////////////////=====================End Mansoor Tables Fradulent====================///////////


        /////////////////=====================Start XYZ Tables WF====================///////////


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `WF_Remarks` (\n" +
                        "  `Rid` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `ProceeType` Text(255) DEFAULT NULL,\n" +
                        "  `Process` Text(255) DEFAULT NULL,\n" +
                        "  `SubProcess` Text(255) DEFAULT NULL,\n" +
                        "  `DocumentNo` Text(255) DEFAULT NULL,\n" +
                        "  `DocDate` Text(255) DEFAULT NULL,\n" +
                        "  `CurrentVNo` Text(255) DEFAULT NULL,\n" +
                        "  `StepNo` Text(255) DEFAULT NULL,\n" +
                        "  `Status` Text(255) DEFAULT NULL,\n" +
                        "  `Remarks` Text(255) DEFAULT NULL\n" +
                        ") ;"

        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `WF_CCList` (\n" +
                        "  `CCid` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `Rid` Integer(255) DEFAULT NULL,\n" +
                        "  `CCList` Text(255) DEFAULT NULL\n" +
                        ") ;"

        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `WF_Approval_Attachment` (\n" +
                        "  `AAid` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `Rid` Integer(255) DEFAULT NULL,\n" +
                        "  `AALabel` Text(255) DEFAULT NULL,\n" +
                        "  `AAFileName` Text(255) DEFAULT NULL,\n" +
                        "  `AAUrl` Text(255) DEFAULT NULL\n" +
                        ") ;"

        );

        /////////////////=====================End XYZ Tables WF====================///////////

        /////////////////=====================Start QAVanTourSync Mansoor Tables====================///////////


        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `QARetailSite` (\n" +
                        "  `Id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `TCPNo` Text(255) DEFAULT NULL,\n" +
                        "  `AreaExective` Text(255) DEFAULT NULL,\n" +
                        "  `LastVistTourCode` Text(255) DEFAULT NULL,\n" +
                        "  `RetailSiteDes` Text(255) DEFAULT NULL,\n" +
                        "  `VisionType` Text(255) DEFAULT NULL,\n" +
                        "  `Remarks` Text(255) DEFAULT NULL,\n" +
                        "  `Lati` Text(255) DEFAULT NULL,\n" +
                        "  `ContactPersonName` Text(255) DEFAULT NULL,\n" +
                        "  `Tour_status` Text(255) DEFAULT NULL,\n" +
                        "  `Creation_date` Text(255) DEFAULT NULL,\n" +
                        "  `Region` Text(255) DEFAULT NULL,\n" +
                        "  `AreaInchargeContact` Text(255) DEFAULT NULL,\n" +
                        "  `Dispenser_Measurment_plan` Text(255) DEFAULT NULL,\n" +
                        "  `TerminateSite` Text(255) DEFAULT NULL,\n" +
                        "  `CostCentrDes` Text(255) DEFAULT NULL,\n" +
                        "  `AreaExectiveContact` Text(255) DEFAULT NULL,\n" +
                        "  `SequenceNo` Text(255) DEFAULT NULL,\n" +
                        "  `Reason` Text(255) DEFAULT NULL,\n" +
                        "  `Location` Text(255) DEFAULT NULL,\n" +
                        "  `Sub_Region` Text(255) DEFAULT NULL,\n" +
                        "  `Product_Quality_plan` Text(255) DEFAULT NULL,\n" +
                        "  `Sales_Data_plan` Text(255) DEFAULT NULL,\n" +
                        "  `PersonContacNumber` Text(255) DEFAULT NULL,\n" +
                        "  `LastInspDate` Text(255) DEFAULT NULL,\n" +
                        "  `Planned_status` Text(255) DEFAULT NULL,\n" +
                        "  `AreaIncharge` Text(255) DEFAULT NULL,\n" +
                        "  `CostCenter` Text(255) DEFAULT NULL,\n" +
                        "  `District` Text(255) DEFAULT NULL,\n" +
                        "  `RetailSiteCode` Text(255) DEFAULT NULL,\n" +
                        "  `InspReasion` Text(255) DEFAULT NULL,\n" +
                        "  `General_Inspection_plan` Text(255) DEFAULT NULL,\n" +
                        "  `Longi` Text(255) DEFAULT NULL,\n" +
                        "  `Address` Text(255) DEFAULT NULL,\n" +
                        "  `Stock_Recnocelation_plan` Text(255) DEFAULT NULL,\n" +
                        "  `ObserForMangRep` Text(255) DEFAULT NULL,\n" +
                        "  `Inspection_Remarks` Text(255) DEFAULT NULL,\n" +
                        "  `NoOfDaysPass` Text(255) DEFAULT NULL,\n" +
                        "  `Tank_Inspection_plan` Text(255) DEFAULT NULL,\n" +
                        "  `LastVistStatus` Text(255) DEFAULT NULL\n" +
                        ") ;"

        );

        db.execSQL(
                "CREATE TABLE IF NOT EXISTS  `Possible_Reasons` (\n" +
                        "  `Id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                        "  `TCPNo` Text(255) DEFAULT NULL,\n" +
                        "  `RetailSiteCode` Text(255) DEFAULT NULL,\n" +
                        "  `Code` Text(255) DEFAULT NULL,\n" +
                        "  `Description` Text(255) DEFAULT NULL\n" +
                        ") ;"

        );


        /////////////////=====================End QAVanTourSync Mansoor Tables====================///////////

        //endregion
    }

    //region mansoor2

    //TODO: ===============================Start Queries created by Mansoor================================

    public void mDeleteFATables() {
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            String deleteQueryFAMain = "DELETE FROM FAMain";
            db.execSQL(deleteQueryFAMain);
            String deleteQueryFAChamber = "DELETE FROM FAChamber";
            db.execSQL(deleteQueryFAChamber);
            String deleteQueryFAUserInput = "DELETE FROM FAUserInput";
            db.execSQL(deleteQueryFAUserInput);
            String deleteQueryFAAttachments = "DELETE FROM FAAttachments";
            db.execSQL(deleteQueryFAAttachments);
            String deleteQueryFAAction = "DELETE FROM FAAction";
            db.execSQL(deleteQueryFAAction);
            String deleteQueryFAADriver = "DELETE FROM FAADriver";
            db.execSQL(deleteQueryFAADriver);
            String deleteQueryFAATankLorry = "DELETE FROM FAATankLorry";
            db.execSQL(deleteQueryFAATankLorry);
            String deleteQueryFAATransport = "DELETE FROM FAATransport";
            db.execSQL(deleteQueryFAATransport);
            String deleteQueryReasonsMaster = "DELETE FROM ReasonsMaster";
            db.execSQL(deleteQueryReasonsMaster);
            String deleteQueryReasons = "DELETE FROM Reasons";
            db.execSQL(deleteQueryReasons);
            String deleteQueryCaseList = "DELETE FROM Case_List";
            db.execSQL(deleteQueryCaseList);
            String deleteQueryPenaltyClauseList = "DELETE FROM Penalty_Clause_List";
            db.execSQL(deleteQueryPenaltyClauseList);
            String deleteQueryReasonsList = "DELETE FROM Reasons_List";
            db.execSQL(deleteQueryReasonsList);
        } catch (SQLException e) {
            e.printStackTrace();
            Log.d("_mLogLogout= ", "" + e.getMessage());
            CommonUtilities.toastShort(mContext, "error while deleting FA Tables" + e.getMessage());
        } finally {
            if (db != null)
                db.close();
        }
    }

    public int setIsSyncFA(int isSync, int fAid) {
        SQLiteDatabase db = this.getReadableDatabase();
        int idInsert = -1;

        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("s_is_sync", isSync);
            idInsert = db.update("FAMain", contentValues, "FAid=" + fAid, null);

        } catch (SQLException e) {
            Log.d("SYNC", e.getMessage());
            e.printStackTrace();

        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public int setIsSyncFAByFANumber(int isSync, String fANumber) {

        SQLiteDatabase db = this.getReadableDatabase();
        int idInsert = -1;

        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("s_is_sync", isSync);
            idInsert = db.update("FAMain", contentValues, "FANumber='" + fANumber + "'", null);

        } catch (SQLException e) {
            Log.d("SYNC", e.getMessage());
            e.printStackTrace();

        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public long updateRetailSiteIEStatus(int ma_tcp_id, int ma_tcp_retailsiteid, int IE, int IE_Status) {
        // "UPDATE ma_tcp_retailsites set Status_IE_1 =  0
        String strQrySub = " ";
        switch (IE) {
            case 1:
                strQrySub = " Status_IE_1 ";
                break;
            case 2:
                strQrySub = " Status_IE_2 ";
                break;
            case 3:
                strQrySub = " Status_IE_3 ";
                break;
            case 4:
                strQrySub = " Status_IE_4 ";
                break;
            case 5:
                strQrySub = " Status_IE_5 ";
                break;
            default:
                throw new IllegalStateException("Unexpected value: " + IE);
        }


        SQLiteDatabase db = this.getReadableDatabase();
        Cursor res = null;
        Long returnValue = 1L;
        try {

            String updateRetailSiteIEStatusData = "UPDATE ma_tcp_retailsites set " + strQrySub + " = " + IE_Status + " where MA_TCP_ID = " + ma_tcp_id + " AND id=" + ma_tcp_retailsiteid + "";
            db.execSQL(updateRetailSiteIEStatusData);
            EventBus.getDefault().post(new GenericEvent(EventType.Refresh_Sales_Reconsilation));
        } catch (SQLException e) {
            e.printStackTrace();
            returnValue = -1L;
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return returnValue;
    }

    public long deleteMA_StockReconRecord(int ma_tcp_id, int ma_tcp_retailsiteid) {

        SQLiteDatabase db = this.getReadableDatabase();
        Cursor res = null;
        Long returnValue = 1L;
        try {

            String deleteQuerystockreconciliationData = "DELETE FROM ma_stockreconciliation where MA_TCP_ID = " + ma_tcp_id + " AND MA_TCP_Retailsites_id=" + ma_tcp_retailsiteid + "";
            db.execSQL(deleteQuerystockreconciliationData);

        } catch (SQLException e) {
            e.printStackTrace();
            returnValue = -1L;
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return returnValue;
    }

    public long deleteMA_StockReconRecordByProduct(int ma_tcp_id, int ma_tcp_retailsiteid, String productCode) {

        SQLiteDatabase db = this.getReadableDatabase();
        Cursor res = null;
        Long returnValue = 1L;
        try {

            String deleteQuerystockreconciliationData = "DELETE FROM ma_stockreconciliation where MA_TCP_ID = " + ma_tcp_id + " AND MA_TCP_Retailsites_id=" + ma_tcp_retailsiteid + " and  ProductCode='" + productCode + "'";
            db.execSQL(deleteQuerystockreconciliationData);

        } catch (SQLException e) {
            e.printStackTrace();
            returnValue = -1L;
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return returnValue;
    }

    public long deleteMA_MeterReadingRecord(int ma_tcp_id, int ma_tcp_retailsiteid) {

        SQLiteDatabase db = this.getReadableDatabase();
        Cursor res = null;
        Long returnValue = 1L;
        try {
//delete from meterreadings table where matcpid= and costcenterid/retailsiteid =
            String deleteQueryMeterReading = "DELETE FROM ma_meterreadings where MA_TCP_ID = " + ma_tcp_id + " AND MA_TCP_Retailsites_id=" + ma_tcp_retailsiteid + "";

            db.execSQL(deleteQueryMeterReading);

            updateRetailSiteIEStatus(ma_tcp_id, ma_tcp_retailsiteid, 1, TCP_STATUS_IE.SYNCED);

        } catch (SQLException e) {
            e.printStackTrace();
            returnValue = -1L;
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return returnValue;
    }

    public long deleteMA_TankDipsRecord(int ma_tcp_id, int ma_tcp_retailsiteid) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor res = null;
        Long returnValue = 1L;
        try {
//delete from meterreadings table where matcpid= and costcenterid/retailsiteid =
            String deleteQueryTankdips = "DELETE FROM ma_tankdips where MA_TCP_ID = " + ma_tcp_id + " AND MA_TCP_Retailsites_id=" + ma_tcp_retailsiteid + "";

            db.execSQL(deleteQueryTankdips);

            updateRetailSiteIEStatus(ma_tcp_id, ma_tcp_retailsiteid, 2, TCP_STATUS_IE.SYNCED);
        } catch (SQLException e) {
            e.printStackTrace();
            returnValue = -1L;
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return returnValue;
    }

    public long deleteMA_SalesDataRecord(int ma_tcp_id, int ma_tcp_retailsiteid) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor res = null;
        Long returnValue = 1L;
        try {

            String deleteQuerySalesData = "DELETE FROM ma_salesdata where MA_TCP_ID = " + ma_tcp_id + " AND MA_TCP_Retailsites_id=" + ma_tcp_retailsiteid + "";
            db.execSQL(deleteQuerySalesData);

            updateRetailSiteIEStatus(ma_tcp_id, ma_tcp_retailsiteid, 3, TCP_STATUS_IE.SYNCED);
        } catch (SQLException e) {
            e.printStackTrace();
            returnValue = -1L;
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return returnValue;
    }

    public long deleteMA_GIRecord(int ma_tcp_id, int ma_tcp_retailsiteid) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor res = null;
        Long returnValue = 1L;
        try {

            String deleteQueryStandardData = "DELETE FROM ma_GI_Standard where MA_TCP_ID = " + ma_tcp_id + " AND MA_TCP_Retailsite_id=" + ma_tcp_retailsiteid + "";
            String deleteQueryEquipmentData = "DELETE FROM ma_GI_Equipment where MA_TCP_ID = " + ma_tcp_id + " AND MA_TCP_Retailsite_id=" + ma_tcp_retailsiteid + "";
            String deleteQueryMainData = "DELETE FROM ma_GI_Main where MA_TCP_ID = " + ma_tcp_id + " AND MA_TCP_Retailsite_id=" + ma_tcp_retailsiteid + "";

            db.execSQL(deleteQueryStandardData);
            db.execSQL(deleteQueryEquipmentData);
            db.execSQL(deleteQueryMainData);

            updateRetailSiteIEStatus(ma_tcp_id, ma_tcp_retailsiteid, 5, TCP_STATUS_IE.SYNCED);

        } catch (SQLException e) {
            e.printStackTrace();
            returnValue = -1L;
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return returnValue;
    }

    public long deleteMA_InspectionExecutionRecord(int ma_tcp_id, int ma_tcp_retailsiteid) {

        long returnValue = 0L;
        try {
            deleteMA_MeterReadingRecord(ma_tcp_id, ma_tcp_retailsiteid);
            deleteMA_TankDipsRecord(ma_tcp_id, ma_tcp_retailsiteid);
            deleteMA_SalesDataRecord(ma_tcp_id, ma_tcp_retailsiteid);
            deleteMA_StockReconRecord(ma_tcp_id, ma_tcp_retailsiteid);
            deleteMA_GIRecord(ma_tcp_id, ma_tcp_retailsiteid);
        } catch (Exception e) {
            returnValue = -1L;
            e.printStackTrace();
        }
        return returnValue;

    }

    public Inbox_FetchData getInboxItem(String autoDocNo) {
        Inbox_FetchData inboxFetchData = null;

        String selectQueryInboxItem = "SELECT  * FROM  qa_inbox WHERE AutoDocNo = '" + autoDocNo + "'";
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryInboxItem, null);
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {
                inboxFetchData = new Inbox_FetchData();
                /*(getActivity(), InboxId, creator_id, FANumber, DocDate, DocType, ProcessType, Process, SubProcess, CurrentVersionNo)*/
                inboxFetchData.setInboxId(cursor.getInt(cursor.getColumnIndex("id")));
                inboxFetchData.setUserID(cursor.getString(cursor.getColumnIndex("UserID")));
                inboxFetchData.setAutoDocNo(cursor.getString(cursor.getColumnIndex("AutoDocNo")));
                inboxFetchData.setDocumentNo(cursor.getString(cursor.getColumnIndex("DocumentNo")));
                inboxFetchData.setDocDate(cursor.getString(cursor.getColumnIndex("DocDate")));
                inboxFetchData.setDocType(cursor.getString(cursor.getColumnIndex("DocType")));
                inboxFetchData.setDocYear(cursor.getString(cursor.getColumnIndex("DocYear")));
                inboxFetchData.setProcessType(cursor.getString(cursor.getColumnIndex("ProcessType")));
                inboxFetchData.setProcess(cursor.getString(cursor.getColumnIndex("Process")));
                inboxFetchData.setSubProcess(cursor.getString(cursor.getColumnIndex("SubProcess")));
                inboxFetchData.setCurrentVersionNo(cursor.getString(cursor.getColumnIndex("CurrentVersionNo")));
                inboxFetchData.setNextStepNO(cursor.getString(cursor.getColumnIndex("NextStepNO")));

                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return inboxFetchData;
    }

    public List<FraudulentActivityModel> getALLFAbySyncStatus(int s_is_sync_status) {
        // String fAN = "ABC123";
        List<FraudulentActivityModel> fraudulentActivityModelList = new ArrayList<>();
        FraudulentActivityModel fAModel = null;
        String selectQueryFAMain = "SELECT * FROM  FAMain  WHERE s_is_sync = " + s_is_sync_status + "";
//        String selectQueryPReason = "SELECT  * FROM " + "FAAction" + " WHERE isCurrent = 0 ";
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryFAMain, null);

        CurrentAction currentAction = new CurrentAction();

        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {

                fAModel = new FraudulentActivityModel();
                String fANumber = cursor.getString(cursor.getColumnIndex("FANumber"));
                fAModel = getFAMAinData(fANumber);
                fraudulentActivityModelList.add(fAModel);
                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return fraudulentActivityModelList;
    }


    //================Start QAVanTour Insert Mansoor======================
    public Long insertQARetailSite(ModelRetailSites modelRetailSites) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;
        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("TCPNo", modelRetailSites.getTCPNo());
            contentValues.put("AreaExective", modelRetailSites.getAreaExective());
            contentValues.put("LastVistTourCode", modelRetailSites.getLastVistTourCode());
            contentValues.put("RetailSiteDes", modelRetailSites.getRetailSiteDes());
            contentValues.put("VisionType", modelRetailSites.getVisionType());
            contentValues.put("Remarks", modelRetailSites.getRemarks());
            contentValues.put("Lati", modelRetailSites.getLati());
            contentValues.put("ContactPersonName", modelRetailSites.getContactPersonName());
            contentValues.put("Tour_status", modelRetailSites.getTourStatus());
            contentValues.put("Creation_date", modelRetailSites.getCreationDate());
            contentValues.put("Region", modelRetailSites.getRegion());
            contentValues.put("AreaInchargeContact", modelRetailSites.getAreaInchargeContact());
            contentValues.put("Dispenser_Measurment_plan", modelRetailSites.getDispenserMeasurmentPlan());
            contentValues.put("TerminateSite", modelRetailSites.getTerminateSite());
            contentValues.put("CostCentrDes", modelRetailSites.getCostCentrDes());
            contentValues.put("AreaExectiveContact", modelRetailSites.getAreaExectiveContact());

            for (int i = 0; i < modelRetailSites.getPossibleReasion().size(); i++) {
                insertPossibleReasons(db, modelRetailSites.getTCPNo(), modelRetailSites.getRetailSiteCode(), modelRetailSites.getPossibleReasion().get(i));
            }

            contentValues.put("SequenceNo", modelRetailSites.getSequenceNo());
            contentValues.put("Reason", modelRetailSites.getReason());
            contentValues.put("Location", modelRetailSites.getLocation());
            contentValues.put("Sub_Region", modelRetailSites.getSubRegion());
            contentValues.put("Product_Quality_plan", modelRetailSites.getProductQualityPlan());
            contentValues.put("Sales_Data_plan", modelRetailSites.getSalesDataPlan());
            contentValues.put("PersonContacNumber", modelRetailSites.getPersonContacNumber());
            contentValues.put("LastInspDate", modelRetailSites.getLastInspDate());
            contentValues.put("Planned_status", modelRetailSites.getPlannedStatus());
            contentValues.put("AreaIncharge", modelRetailSites.getAreaIncharge());
            contentValues.put("CostCenter", modelRetailSites.getCostCenter());
            contentValues.put("District", modelRetailSites.getDistrict());
            contentValues.put("RetailSiteCode", modelRetailSites.getRetailSiteCode());
            contentValues.put("InspReasion", modelRetailSites.getInspReasion());
            contentValues.put("General_Inspection_plan", modelRetailSites.getGeneralInspectionPlan());
            contentValues.put("Longi", modelRetailSites.getLongi());
            contentValues.put("Address", modelRetailSites.getAddress());
            contentValues.put("Stock_Recnocelation_plan", modelRetailSites.getStockRecnocelationPlan());
            contentValues.put("ObserForMangRep", modelRetailSites.getObserForMangRep());
            contentValues.put("Inspection_Remarks", modelRetailSites.getInspection_Remarks());
            contentValues.put("NoOfDaysPass", modelRetailSites.getNoOfDaysPass());
            contentValues.put("Tank_Inspection_plan", modelRetailSites.getTankInspectionPlan());
            contentValues.put("LastVistStatus", modelRetailSites.getLastVistStatus());


            idInsert = db.insert("QARetailSite", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }


    public Long insertPossibleReasons(SQLiteDatabase db, String tcpNo, String retailSiteCode, PossibleReasons possibleReasons) {


        Long idInsert = -1L;
        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("TCPNo", tcpNo);
            contentValues.put("RetailSiteCode", retailSiteCode);
            contentValues.put("Code", possibleReasons.getCode());
            contentValues.put("Description", possibleReasons.getDescription());

            idInsert = db.insert("Possible_Reasons", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {

        }

        return idInsert;
    }


    public long deleteQARetailSite(String tCPNo, String retailSiteCode) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor res = null;
        Long returnValue = 1L;
        try {

            String deleteQuery = "DELETE FROM  QARetailSite  WHERE TCPNo = '" + tCPNo + "' AND RetailSiteCode = '" + retailSiteCode + "'";
            db.execSQL(deleteQuery);
            String deletePossible_ReasonsQuery = "DELETE FROM  Possible_Reasons  WHERE TCPNo = '" + tCPNo + "' AND RetailSiteCode = '" + retailSiteCode + "'";
            db.execSQL(deletePossible_ReasonsQuery);


        } catch (SQLException e) {
            e.printStackTrace();
            returnValue = -1L;
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return returnValue;
    }


    public List<PossibleReasons> getPossibleReasons(String tCPNo, String retailSiteCode) {
        List<PossibleReasons> possibleReasons = null;
        PossibleReasons possibleReason = null;
        String selectQueryPossibleReasons = "SELECT  * FROM  Possible_Reasons  WHERE TCPNo = '" + tCPNo + "' AND RetailSiteCode = '" + retailSiteCode + "'";
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryPossibleReasons, null);

        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {
                if (possibleReasons == null) {
                    possibleReasons = new ArrayList<>();
                }

                possibleReason = new PossibleReasons();
                possibleReason.setCode(cursor.getString(cursor.getColumnIndex("Code")));
                possibleReason.setDescription(cursor.getString(cursor.getColumnIndex("Description")));
                possibleReasons.add(possibleReason);
                cursor.moveToNext();

            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return possibleReasons;
    }

    public ModelRetailSites getQARetailSite(String tCPNo, String retailSiteCode) {
        ModelRetailSites modelRetailSites = null;
        String selectQueryModelRetailSites = "SELECT  * FROM  QARetailSite  WHERE TCPNo = '" + tCPNo + "' AND RetailSiteCode = '" + retailSiteCode + "'";
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryModelRetailSites, null);

        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {
                modelRetailSites = new ModelRetailSites();
                modelRetailSites.setTCPNo(cursor.getString(cursor.getColumnIndex("TCPNo")));
                modelRetailSites.setAreaExective(cursor.getString(cursor.getColumnIndex("AreaExective")));
                modelRetailSites.setLastVistTourCode(cursor.getString(cursor.getColumnIndex("LastVistTourCode")));
                modelRetailSites.setRetailSiteDes(cursor.getString(cursor.getColumnIndex("RetailSiteDes")));
                modelRetailSites.setVisionType(cursor.getString(cursor.getColumnIndex("VisionType")));
                modelRetailSites.setRemarks(cursor.getString(cursor.getColumnIndex("Remarks")));
                modelRetailSites.setLati(cursor.getString(cursor.getColumnIndex("Lati")));
                modelRetailSites.setContactPersonName(cursor.getString(cursor.getColumnIndex("ContactPersonName")));
                modelRetailSites.setTourStatus(cursor.getString(cursor.getColumnIndex("Tour_status")));
                modelRetailSites.setCreationDate(cursor.getString(cursor.getColumnIndex("Creation_date")));
                modelRetailSites.setRegion(cursor.getString(cursor.getColumnIndex("Region")));
                modelRetailSites.setAreaInchargeContact(cursor.getString(cursor.getColumnIndex("AreaInchargeContact")));
                modelRetailSites.setDispenserMeasurmentPlan(cursor.getString(cursor.getColumnIndex("Dispenser_Measurment_plan")));
                modelRetailSites.setTerminateSite(cursor.getString(cursor.getColumnIndex("TerminateSite")));
                modelRetailSites.setCostCentrDes(cursor.getString(cursor.getColumnIndex("CostCentrDes")));
                modelRetailSites.setAreaExectiveContact(cursor.getString(cursor.getColumnIndex("AreaExectiveContact")));
                modelRetailSites.setPossibleReasion(getPossibleReasons(tCPNo, retailSiteCode));
                modelRetailSites.setSequenceNo(cursor.getString(cursor.getColumnIndex("SequenceNo")));
                modelRetailSites.setReason(cursor.getString(cursor.getColumnIndex("Reason")));
                modelRetailSites.setLocation(cursor.getString(cursor.getColumnIndex("Location")));
                modelRetailSites.setSubRegion(cursor.getString(cursor.getColumnIndex("Sub_Region")));
                modelRetailSites.setProductQualityPlan(cursor.getString(cursor.getColumnIndex("Product_Quality_plan")));
                modelRetailSites.setSalesDataPlan(cursor.getString(cursor.getColumnIndex("Sales_Data_plan")));
                modelRetailSites.setPersonContacNumber(cursor.getString(cursor.getColumnIndex("PersonContacNumber")));
                modelRetailSites.setLastInspDate(cursor.getString(cursor.getColumnIndex("LastInspDate")));
                modelRetailSites.setPlannedStatus(cursor.getString(cursor.getColumnIndex("Planned_status")));
                modelRetailSites.setAreaIncharge(cursor.getString(cursor.getColumnIndex("AreaIncharge")));
                modelRetailSites.setCostCenter(cursor.getString(cursor.getColumnIndex("CostCenter")));
                modelRetailSites.setDistrict(cursor.getString(cursor.getColumnIndex("District")));
                modelRetailSites.setRetailSiteCode(cursor.getString(cursor.getColumnIndex("RetailSiteCode")));
                modelRetailSites.setInspReasion(cursor.getString(cursor.getColumnIndex("InspReasion")));
                modelRetailSites.setGeneralInspectionPlan(cursor.getString(cursor.getColumnIndex("General_Inspection_plan")));
                modelRetailSites.setLongi(cursor.getString(cursor.getColumnIndex("Longi")));
                modelRetailSites.setAddress(cursor.getString(cursor.getColumnIndex("Address")));
                modelRetailSites.setStockRecnocelationPlan(cursor.getString(cursor.getColumnIndex("Stock_Recnocelation_plan")));
                modelRetailSites.setObserForMangRep(cursor.getString(cursor.getColumnIndex("ObserForMangRep")));
                modelRetailSites.setInspection_Remarks(cursor.getString(cursor.getColumnIndex("Inspection_Remarks")));
                modelRetailSites.setNoOfDaysPass(cursor.getString(cursor.getColumnIndex("NoOfDaysPass")));
                modelRetailSites.setTankInspectionPlan(cursor.getString(cursor.getColumnIndex("Tank_Inspection_plan")));
                modelRetailSites.setLastVistStatus(cursor.getString(cursor.getColumnIndex("LastVistStatus")));
                cursor.moveToNext();

            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return modelRetailSites;
    }
    //================End QAVanTour Insert Mansoor======================


    //================Start Lab Test Insert Mansoor======================
    public Long insertLabTestRDTank(String AutoDocNo, String requestId, LTTank ltTank) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;
        try {
            ContentValues contentValues = new ContentValues();

            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("RequestId", requestId);
            contentValues.put("TankCode", ltTank.getTankCode());
            contentValues.put("TankDesc", ltTank.getTankDesc());
            contentValues.put("SupplyPoint", ltTank.getSupplyPoint());
            contentValues.put("SupplyPointDesc", ltTank.getSupplyPointDesc());


            idInsert = db.insert("LTTank", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public Long insertLabTestRDParcel(String AutoDocNo, String requestId, LTParcel ltParcel) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;
        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("RequestId", requestId);
            contentValues.put("SupplySource", ltParcel.getSupplySource());
            contentValues.put("SupplySourceDesc", ltParcel.getSupplySourceDesc());
            contentValues.put("ReferenceNo", ltParcel.getReferenceNo());


            idInsert = db.insert("LTParcel", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public Long insertLabTestRDSample(String AutoDocNo, String requestId, LTSample ltSample) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;
        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("RequestId", requestId);
            contentValues.put("SupplyPoint", ltSample.getSupplyPoint());
            contentValues.put("SupplyPointDesc", ltSample.getSupplyPointDesc());


            idInsert = db.insert("LTSample", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public Long insertLabTestRDTankLorrySTN(String AutoDocNo, String requestId, LTTankLorrySTN ltTankLorrySTN) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;
        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("RequestId", requestId);
            contentValues.put("ToSupplyPoint", ltTankLorrySTN.getToSupplyPoint());
            contentValues.put("ToSupplyPointDesc", ltTankLorrySTN.getToSupplyPointDesc());
            contentValues.put("FromSupplyPoint", ltTankLorrySTN.getFromSupplyPoint());
            contentValues.put("FromSupplyPointDesc", ltTankLorrySTN.getFromSupplyPointDesc());
            contentValues.put("TankLorry", ltTankLorrySTN.getTankLorry());
            contentValues.put("Carriage", ltTankLorrySTN.getCarriage());
            contentValues.put("STNNo", ltTankLorrySTN.getSTNNo());
            contentValues.put("Driver", ltTankLorrySTN.getDriver());
            contentValues.put("Date", ltTankLorrySTN.getDate());


            idInsert = db.insert("LTTankLorrySTN", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public Long insertLabTestRDTankLorrySaleInv(String AutoDocNo, String requestId, LTTankLorrySaleInv ltTankLorrySaleInv) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;
        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("RequestId", requestId);
            contentValues.put("Customer", ltTankLorrySaleInv.getCustomer());
            contentValues.put("CustomerDesc", ltTankLorrySaleInv.getCustomerDesc());
            contentValues.put("SupplyPointDesc", ltTankLorrySaleInv.getSupplyPoint());
            contentValues.put("TankLorry", ltTankLorrySaleInv.getTankLorry());
            contentValues.put("Carriage", ltTankLorrySaleInv.getCarriage());
            contentValues.put("InvoiceNo", ltTankLorrySaleInv.getInvoiceNo());
            contentValues.put("Driver", ltTankLorrySaleInv.getDriver());
            contentValues.put("InvoiceDate", ltTankLorrySaleInv.getInvoiceDate());


            idInsert = db.insert("LTTankLorrySaleInv", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public Long insertLabTestRDTLOMC(String AutoDocNo, String requestId, LTTLOMC lttlomc) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;
        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("RequestId", requestId);
            contentValues.put("SupplySource", lttlomc.getSupplySource());
            contentValues.put("SupplySourceDesc", lttlomc.getSupplySourceDesc());
            contentValues.put("TankLorryNo", lttlomc.getTankLorryNo());
            contentValues.put("TankLorryCheck", lttlomc.getTankLorryCheck());


            idInsert = db.insert("LTTLOMC", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public Long insertLabTestRDCustomerSample(String AutoDocNo, String requestId, LTCustomerSample ltCustomerSample) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;
        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("RequestId", requestId);
            contentValues.put("Customer", ltCustomerSample.getCustomer());
            contentValues.put("CustomerDesc", ltCustomerSample.getCustomerDesc());


            idInsert = db.insert("LTCustomerSample", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public LTTank getLabTestRDTank(String autoDocNo) {
        LTTank ltTank = null;
        String selectQueryLTTank = "SELECT  * FROM  LTTank  WHERE AutoDocNo = '" + autoDocNo + "'";
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryLTTank, null);

        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {
                ltTank = new LTTank();
                ltTank.setTankCode(cursor.getString(cursor.getColumnIndex("TankCode")));
                ltTank.setTankDesc(cursor.getString(cursor.getColumnIndex("TankDesc")));
                ltTank.setSupplyPoint(cursor.getString(cursor.getColumnIndex("SupplyPoint")));
                ltTank.setSupplyPointDesc(cursor.getString(cursor.getColumnIndex("SupplyPointDesc")));
                cursor.moveToNext();

            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return ltTank;
    }

    public LTParcel getLabTestRDParcel(String autoDocNo) {

        String selectQueryLTParcel = "SELECT  * FROM  LTParcel  WHERE AutoDocNo = " + autoDocNo;
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryLTParcel, null);
        LTParcel ltParcel = new LTParcel();
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {

                ltParcel.setSupplySource(cursor.getString(cursor.getColumnIndex("SupplySource")));
                ltParcel.setSupplySourceDesc(cursor.getString(cursor.getColumnIndex("SupplySourceDesc")));
                ltParcel.setReferenceNo(cursor.getString(cursor.getColumnIndex("ReferenceNo")));
                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return ltParcel;
    }

    public LTSample getLabTestRDSample(String autoDocNo) {

        String selectQueryLTParcel = "SELECT  * FROM  LTSample  WHERE AutoDocNo = " + autoDocNo;
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryLTParcel, null);
        LTSample ltSample = new LTSample();
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {
                ltSample.setSupplyPoint(cursor.getString(cursor.getColumnIndex("SupplyPoint")));
                ltSample.setSupplyPointDesc(cursor.getString(cursor.getColumnIndex("SupplyPointDesc")));
                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return ltSample;
    }

    public LTTankLorrySTN getLabTestRDTankLorrySTN(String autoDocNo) {

        String selectQueryLTTankLorrySTN = "SELECT  * FROM  LTTankLorrySTN  WHERE AutoDocNo = " + autoDocNo;
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryLTTankLorrySTN, null);
        LTTankLorrySTN ltTankLorrySTN = new LTTankLorrySTN();
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {

                ltTankLorrySTN.setToSupplyPoint(cursor.getString(cursor.getColumnIndex("ToSupplyPoint")));
                ltTankLorrySTN.setToSupplyPointDesc(cursor.getString(cursor.getColumnIndex("ToSupplyPointDesc")));
                ltTankLorrySTN.setFromSupplyPoint(cursor.getString(cursor.getColumnIndex("FromSupplyPoint")));
                ltTankLorrySTN.setFromSupplyPointDesc(cursor.getString(cursor.getColumnIndex("FromSupplyPointDesc")));
                ltTankLorrySTN.setTankLorry(cursor.getString(cursor.getColumnIndex("TankLorry")));
                ltTankLorrySTN.setCarriage(cursor.getString(cursor.getColumnIndex("Carriage")));
                ltTankLorrySTN.setSTNNo(cursor.getString(cursor.getColumnIndex("STNNo")));
                ltTankLorrySTN.setDriver(cursor.getString(cursor.getColumnIndex("Driver")));
                ltTankLorrySTN.setDate(cursor.getString(cursor.getColumnIndex("Date")));
                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return ltTankLorrySTN;
    }

    public LTTankLorrySaleInv getLabTestRDTankLorrySaleInv(String autoDocNo) {

        String selectQueryLTParcel = "SELECT  * FROM  LTTankLorrySaleInv  WHERE AutoDocNo = " + autoDocNo;
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryLTParcel, null);
        LTTankLorrySaleInv ltTankLorrySaleInv = new LTTankLorrySaleInv();
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {
                ltTankLorrySaleInv.setCustomer(cursor.getString(cursor.getColumnIndex("Customer")));
                ltTankLorrySaleInv.setCustomerDesc(cursor.getString(cursor.getColumnIndex("CustomerDesc")));
                ltTankLorrySaleInv.setSupplyPoint(cursor.getString(cursor.getColumnIndex("SupplyPointDesc")));
                ltTankLorrySaleInv.setTankLorry(cursor.getString(cursor.getColumnIndex("TankLorry")));
                ltTankLorrySaleInv.setCarriage(cursor.getString(cursor.getColumnIndex("Carriage")));
                ltTankLorrySaleInv.setInvoiceNo(cursor.getString(cursor.getColumnIndex("InvoiceNo")));
                ltTankLorrySaleInv.setDriver(cursor.getString(cursor.getColumnIndex("Driver")));
                ltTankLorrySaleInv.setInvoiceDate(cursor.getString(cursor.getColumnIndex("InvoiceDate")));
                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return ltTankLorrySaleInv;
    }

    public LTTLOMC getLabTestRDTLOMC(String autoDocNo) {

        String selectQueryLTTLOMC = "SELECT  * FROM  LTTLOMC  WHERE AutoDocNo = " + autoDocNo;
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryLTTLOMC, null);
        LTTLOMC lttlomc = new LTTLOMC();
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {
                lttlomc.setSupplySource(cursor.getString(cursor.getColumnIndex("SupplySource")));
                lttlomc.setSupplySourceDesc(cursor.getString(cursor.getColumnIndex("SupplySourceDesc")));
                lttlomc.setTankLorryNo(cursor.getString(cursor.getColumnIndex("TankLorryNo")));
                lttlomc.setTankLorryCheck(cursor.getString(cursor.getColumnIndex("TankLorryCheck")));
                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return lttlomc;
    }

    public LTCustomerSample getLabTestRDCustomerSample(String autoDocNo) {

        String selectQueryLTCustomerSample = "SELECT  * FROM  LTCustomerSample  WHERE AutoDocNo = " + autoDocNo;
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryLTCustomerSample, null);
        LTCustomerSample ltCustomerSample = new LTCustomerSample();
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {
                ltCustomerSample.setCustomer(cursor.getString(cursor.getColumnIndex("Customer")));
                ltCustomerSample.setCustomerDesc(cursor.getString(cursor.getColumnIndex("CustomerDesc")));
                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return ltCustomerSample;
    }


    public long deleteLabTestRDTank(String autoDocNo) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor res = null;
        Long returnValue = 1L;
        try {

            String deleteQuery = "DELETE FROM LTTank WHERE AutoDocNo = " + autoDocNo;
            db.execSQL(deleteQuery);

        } catch (SQLException e) {
            e.printStackTrace();
            returnValue = -1L;
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return returnValue;
    }

    public long deleteLabTestRDParcel(String autoDocNo) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor res = null;
        Long returnValue = 1L;
        try {

            String deleteQuery = "DELETE FROM LTParcel WHERE AutoDocNo = " + autoDocNo;
            db.execSQL(deleteQuery);

        } catch (SQLException e) {
            e.printStackTrace();
            returnValue = -1L;
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return returnValue;
    }

    public long deleteLabTestRDSample(String autoDocNo) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor res = null;
        Long returnValue = 1L;
        try {

            String deleteQuery = "DELETE FROM LTSample WHERE AutoDocNo = " + autoDocNo;
            db.execSQL(deleteQuery);

        } catch (SQLException e) {
            e.printStackTrace();
            returnValue = -1L;
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return returnValue;
    }

    public long deleteLabTestRDTankLorrySTN(String autoDocNo) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor res = null;
        Long returnValue = 1L;
        try {

            String deleteQuery = "DELETE FROM LTTankLorrySTN WHERE AutoDocNo = " + autoDocNo;
            db.execSQL(deleteQuery);

        } catch (SQLException e) {
            e.printStackTrace();
            returnValue = -1L;
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return returnValue;
    }

    public long deleteLabTestRDTankLorrySaleInv(String autoDocNo) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor res = null;
        Long returnValue = 1L;
        try {

            String deleteQuery = "DELETE FROM LTTankLorrySaleInv WHERE AutoDocNo = " + autoDocNo;
            db.execSQL(deleteQuery);

        } catch (SQLException e) {
            e.printStackTrace();
            returnValue = -1L;
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return returnValue;
    }

    public long deleteLabTestRDTLOMC(String autoDocNo) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor res = null;
        Long returnValue = 1L;
        try {

            String deleteQuery = "DELETE FROM LTTLOMC WHERE AutoDocNo = " + autoDocNo;
            db.execSQL(deleteQuery);

        } catch (SQLException e) {
            e.printStackTrace();
            returnValue = -1L;
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return returnValue;
    }


    public long deleteLabTestRDCustomerSample(String autoDocNo) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor res = null;
        Long returnValue = 1L;
        try {

            String deleteQuery = "DELETE FROM LTCustomerSample WHERE AutoDocNo = " + autoDocNo;
            db.execSQL(deleteQuery);

        } catch (SQLException e) {
            e.printStackTrace();
            returnValue = -1L;
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return returnValue;
    }

    //================End Lab Test Insert Mansoor======================

    public Long insertFAMAin(FraudulentActivityModel model) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;

        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("AutoDocNo", model.getAutoDocNo());
            contentValues.put("FANumber", model.getFANumber());
            contentValues.put("FAAgreementFile", model.getFAAgreementFile());
            contentValues.put("TLNumber", model.getTLNumber());
            contentValues.put("Carriage", model.getCarriage());
            contentValues.put("STNInvoiceNo", model.getSTNInvoiceNo());
            contentValues.put("DocDate", model.getDocDate());
            contentValues.put("FromSupplyPointDesc", model.getFromSupplyPointDesc());
            contentValues.put("ToSupplyPointDesc", model.getToSupplyPointDesc());
            contentValues.put("DriverCodeDesc", model.getDriverCodeDesc());
            contentValues.put("DriverCode", model.getDriverCode());
            contentValues.put("CarriageCode", model.getCarriageCode());
            contentValues.put("Type", model.getType());
            contentValues.put("DebitNoteUrl", model.getDebitNoteUrl());
            contentValues.put("AgreementUrl", model.getAgreementUrl());
            contentValues.put("DipChartUrl", model.getDipChartUrl());
            contentValues.put("FakeDipChart", model.getFakeDipChart());


            idInsert = db.insert("FAMain", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public Long insertFAChambers(String AutoDocNo, Chamber model, int id, String fANumber) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;

        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("FAid", id);
            contentValues.put("FANumber", fANumber);
            contentValues.put("ChamberNo", model.getChamberNo());
            contentValues.put("ChamberDescription", model.getChamberDescription());
            contentValues.put("ProductDesc", model.getProductDesc());
            contentValues.put("Rate", model.getRate());
            contentValues.put("FillingRate", model.getFillingRate());

            idInsert = db.insert("FAChamber", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public Long insertFAUserInput(String AutoDocNo, FAUserInput model, int fACId, int fAId, String fANumber, String chamberNo) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;

        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("FACid", fACId);
            contentValues.put("FAid", fAId);
            contentValues.put("FANumber", fANumber);
            contentValues.put("ChamberNo", chamberNo);
            contentValues.put("InvolvementNo", model.getInvolvementNo());
            contentValues.put("Involvement", model.getInvolvement());
            contentValues.put("Quantity", model.getQuantity());
            contentValues.put("Remarks", model.getRemarks());

            idInsert = db.insert("FAUserInput", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public Long insertFAAttachments(String AutoDocNo, Attachment model, int id) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;

        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("FACUIid", id);
            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("FileName", model.getFileName());
            contentValues.put("AttachmentID", model.getAttachmentID());
            contentValues.put("FileLabel", model.getFileLabel());
            contentValues.put("FilePath", model.getFilePath());

            idInsert = db.insert("FAAttachments", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public Long insertReasonsMaster(String AutoDocNo, PreviousReason previousReason, CurrentReason currentReason,
                                    int faid, String fANumber, int fACid, String fACNumber) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;

        try {
            ContentValues contentValues = new ContentValues();
            if (previousReason != null) {
                contentValues.put("FAid", faid);
                contentValues.put("AutoDocNo", AutoDocNo);
                contentValues.put("FANumber", fANumber);
                contentValues.put("FACid", fACid);
                contentValues.put("FACNumber", fACNumber);
                contentValues.put("RMTitle", previousReason.getTitle());
                contentValues.put("RMUser", previousReason.getUser());
                contentValues.put("RMUserDesignation", previousReason.getUserDesignation());
                contentValues.put("isCurrent", 0);
            } else {
                contentValues.put("FAid", faid);
                contentValues.put("AutoDocNo", AutoDocNo);
                contentValues.put("FANumber", fANumber);
                contentValues.put("FACid", fACid);
                contentValues.put("FACNumber", fACNumber);
                contentValues.put("RMTitle", currentReason.getTitle());
                contentValues.put("RMUser", currentReason.getUser());
                contentValues.put("RMUserDesignation", currentReason.getUserDesignation());
                contentValues.put("isCurrent", 1);
            }

            idInsert = db.insert("ReasonsMaster", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    //TODO ============== MA_GI_Standard_Attachment Insert, Delete and Geting Table Start ====================

    public Long insertMAGIStandardAttachments(MAGIStandardAttachment magiStandardAttachment) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("MA_GI_Standard_ID", magiStandardAttachment.getMaGIStandardId());
            contentValues.put("FileLabel", magiStandardAttachment.getFileLabel());
            contentValues.put("FileName", magiStandardAttachment.getFileName());
            contentValues.put("FileServerPath", magiStandardAttachment.getFileServerPath());
            contentValues.put("FileLocalPath", magiStandardAttachment.getFileLocalPath());

            idInsert = db.insert("ma_gi_standard_attachment", null, contentValues);


        } catch (SQLException e) {
            e.printStackTrace();
        } finally {

        }

        return idInsert;
    }

    public Long insertMAGIStandardAttachmentsList(List<MAGIStandardAttachment> magiStandardAttachmentList) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;
        try {
            for (int i = 0; i < magiStandardAttachmentList.size(); i++) {
                MAGIStandardAttachment magiStandardAttachment = magiStandardAttachmentList.get(i);
                ContentValues contentValues = new ContentValues();
                contentValues.put("MA_GI_Standard_ID", magiStandardAttachment.getMaGIStandardId());
                contentValues.put("FileLabel", magiStandardAttachment.getFileLabel());
                contentValues.put("FileName", magiStandardAttachment.getFileName());
                contentValues.put("FileServerPath", magiStandardAttachment.getFileServerPath());
                contentValues.put("FileLocalPath", magiStandardAttachment.getFileLocalPath());

                idInsert = db.insert("ma_gi_standard_attachment", null, contentValues);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {

        }

        return idInsert;
    }

    public MAGIStandardAttachment getMAGIStandardAttachmentById(int Id) {
        MAGIStandardAttachment standardAttachments = new MAGIStandardAttachment();
        String selectQuery = "SELECT  * FROM  ma_gi_standard_attachment WHERE id = '" + Id + "'";
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQuery, null);
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {
                MAGIStandardAttachment standardAttachment = new MAGIStandardAttachment();
                standardAttachment.setId(cursor.getInt(cursor.getColumnIndex("id")));
                standardAttachment.setMaGIStandardId(cursor.getInt(cursor.getColumnIndex("MA_GI_Standard_ID")));
                standardAttachment.setFileLabel(cursor.getString(cursor.getColumnIndex("FileLabel")));
                standardAttachment.setFileName(cursor.getString(cursor.getColumnIndex("FileName")));
                standardAttachment.setFileServerPath(cursor.getString(cursor.getColumnIndex("FileServerPath")));
                standardAttachment.setFileLocalPath(cursor.getString(cursor.getColumnIndex("FileLocalPath")));
                standardAttachments = standardAttachment;
                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return standardAttachments;
    }

    public Long deleteGIStandardAttachment(int Id) {
        MAGIStandardAttachment standardAttachments = new MAGIStandardAttachment();
        String deleteQuery = "DELETE FROM  ma_gi_standard_attachment WHERE id = '" + Id + "'";
        SQLiteDatabase db = this.getReadableDatabase();
        Long delID = -1L;
        try {
            db.execSQL(deleteQuery);
            delID = Long.parseLong(Id + "");
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            db.close();
        }
        return delID;
    }

    public List<MAGIStandardAttachment> getMAGIStandardAttachmentByGIStandardId(int maGIStandardId) {
        List<MAGIStandardAttachment> standardAttachments = new ArrayList<>();
        String selectQuery = "SELECT  * FROM  ma_gi_standard_attachment WHERE MA_GI_Standard_ID = '" + maGIStandardId + "'";
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQuery, null);
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {
                MAGIStandardAttachment standardAttachment = new MAGIStandardAttachment();
                standardAttachment.setId(cursor.getInt(cursor.getColumnIndex("id")));
                standardAttachment.setMaGIStandardId(cursor.getInt(cursor.getColumnIndex("MA_GI_Standard_ID")));
                standardAttachment.setFileLabel(cursor.getString(cursor.getColumnIndex("FileLabel")));
                standardAttachment.setFileName(cursor.getString(cursor.getColumnIndex("FileName")));
                standardAttachment.setFileServerPath(cursor.getString(cursor.getColumnIndex("FileServerPath")));
                standardAttachment.setFileLocalPath(cursor.getString(cursor.getColumnIndex("FileLocalPath")));
                standardAttachments.add(standardAttachment);
                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return standardAttachments;
    }

    //TODO ============== MA_GI_Standard_Attachment Insert, Delete and Geting Table End ====================


    //TODO ============== MA_GI_Equipment_Attachment Insert, Delete and Geting Table Start ====================


    public Long insertMAGIEquipmentAttachments(MAGIStandardAttachment magiStandardAttachment) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("MA_GI_Standard_ID", magiStandardAttachment.getMaGIStandardId());
            contentValues.put("FileLabel", magiStandardAttachment.getFileLabel());
            contentValues.put("FileName", magiStandardAttachment.getFileName());
            contentValues.put("FilePath", magiStandardAttachment.getFileServerPath());
            contentValues.put("FileLocalPath", magiStandardAttachment.getFileLocalPath());

            idInsert = db.insert("ma_gi_equipment_attachment", null, contentValues);


        } catch (SQLException e) {
            e.printStackTrace();
        } finally {

        }

        return idInsert;
    }

    public Long insertMAGIEquipmentAttachmentsList(List<MAGIStandardAttachment> magiStandardAttachmentList) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;
        try {
            for (int i = 0; i < magiStandardAttachmentList.size(); i++) {
                MAGIStandardAttachment magiStandardAttachment = magiStandardAttachmentList.get(i);
                ContentValues contentValues = new ContentValues();
                contentValues.put("MA_GI_Standard_ID", magiStandardAttachment.getMaGIStandardId());
                contentValues.put("FileLabel", magiStandardAttachment.getFileLabel());
                contentValues.put("FileName", magiStandardAttachment.getFileName());
                contentValues.put("FilePath", magiStandardAttachment.getFileServerPath());
                contentValues.put("FileLocalPath", magiStandardAttachment.getFileLocalPath());

                idInsert = db.insert("ma_gi_equipment_attachment", null, contentValues);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {

        }

        return idInsert;
    }

    public MAGIStandardAttachment getMAGIEquipmentAttachmentById(int Id) {
        MAGIStandardAttachment standardAttachments = new MAGIStandardAttachment();
        String selectQuery = "SELECT  * FROM  ma_gi_equipment_attachment WHERE id = '" + Id + "'";
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQuery, null);
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {
                MAGIStandardAttachment standardAttachment = new MAGIStandardAttachment();
                standardAttachment.setId(cursor.getInt(cursor.getColumnIndex("id")));
                standardAttachment.setMaGIStandardId(cursor.getInt(cursor.getColumnIndex("MA_GI_Standard_ID")));
                standardAttachment.setFileLabel(cursor.getString(cursor.getColumnIndex("FileLabel")));
                standardAttachment.setFileName(cursor.getString(cursor.getColumnIndex("FileName")));
                standardAttachment.setFileServerPath(cursor.getString(cursor.getColumnIndex("FilePath")));
                standardAttachment.setFileLocalPath(cursor.getString(cursor.getColumnIndex("FileLocalPath")));
                standardAttachments = standardAttachment;
                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return standardAttachments;
    }

    public Long deleteGIEquipmentAttachment(int Id) {
        MAGIStandardAttachment standardAttachments = new MAGIStandardAttachment();
        String deleteQuery = "DELETE FROM  ma_gi_equipment_attachment WHERE id = '" + Id + "'";
        SQLiteDatabase db = this.getReadableDatabase();
        Long delID = -1L;
        try {
            db.execSQL(deleteQuery);
            delID = Long.parseLong(Id + "");
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            db.close();
        }
        return delID;
    }

    public List<MAGIStandardAttachment> getMAGIEquipmentAttachmentByGIEquipmentId(int maGIStandardId) {
        List<MAGIStandardAttachment> standardAttachments = new ArrayList<>();
        String selectQuery = "SELECT  * FROM  ma_gi_equipment_attachment WHERE MA_GI_Standard_ID = '" + maGIStandardId + "'";
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQuery, null);
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {
                MAGIStandardAttachment standardAttachment = new MAGIStandardAttachment();
                standardAttachment.setId(cursor.getInt(cursor.getColumnIndex("id")));
                standardAttachment.setMaGIStandardId(cursor.getInt(cursor.getColumnIndex("MA_GI_Standard_ID")));
                standardAttachment.setFileLabel(cursor.getString(cursor.getColumnIndex("FileLabel")));
                standardAttachment.setFileName(cursor.getString(cursor.getColumnIndex("FileName")));
                standardAttachment.setFileServerPath(cursor.getString(cursor.getColumnIndex("FilePath")));
                standardAttachment.setFileLocalPath(cursor.getString(cursor.getColumnIndex("FileLocalPath")));
                standardAttachments.add(standardAttachment);
                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return standardAttachments;
    }

    //TODO ============== MA_GI_Equipment_Attachment Insert, Delete and Geting Table End ====================

    public Long insertReasons(String AutoDocNo, Reason reason, int farmId) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;

        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("FARMid", farmId);
            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("RCode", reason.getCode());
            contentValues.put("RDescription", reason.getDescription());
            contentValues.put("RPenaltyClauseNo", reason.getPenaltyClauseNo());
            contentValues.put("RPenatyCaseNumber", reason.getPenatyCaseNumber());
            contentValues.put("RSurcharge", reason.getSurcharge());
            contentValues.put("RPenaltyPercentage", reason.getPenaltyPercentage());
            contentValues.put("RLumsum", reason.getLumsum());
            contentValues.put("RTotal", reason.getTotal());
            contentValues.put("RRemarks", reason.getRemarks());

            idInsert = db.insert("Reasons", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public Long insertFAAction(String AutoDocNo, PreviousAction previousAction, CurrentAction currentAction, int fAId, String fANumber) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;

        try {
            ContentValues contentValues = new ContentValues();
            if (previousAction != null) {
                contentValues.put("FAid", fAId);
                contentValues.put("AutoDocNo", AutoDocNo);
                contentValues.put("FANumber", fANumber);
                contentValues.put("Title", previousAction.getTitle());
                contentValues.put("isCurrent", 0);
            } else {
                contentValues.put("FAid", fAId);
                contentValues.put("AutoDocNo", AutoDocNo);
                contentValues.put("FANumber", fANumber);
                contentValues.put("Title", currentAction.getTitle());
                contentValues.put("isCurrent", 1);
            }

            idInsert = db.insert("FAAction", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public Long insertFAADriver(String AutoDocNo, Driver driver, int faactid) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;
        int isApply = 0;
        int isImmediate = 0;
        int isSpecified = 0;
        int isUnspecified = 0;
        if (driver.getApply()) {
            isApply = 1;
        }
        if (driver.getImmediate()) {
            isImmediate = 1;
        }
        if (driver.getSpecifiedtime()) {
            isSpecified = 1;
        }
        if (driver.getUnspecified()) {
            isUnspecified = 1;
        }

        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("FAActid", faactid);
            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("DTitle", driver.getTitle());
            contentValues.put("isApply", isApply);
            contentValues.put("isImmediate", isImmediate);
            contentValues.put("isSpecified", isSpecified);
            contentValues.put("isUnspecified", isUnspecified);
            contentValues.put("fromDate", driver.getFromdate());
            contentValues.put("toDate", driver.getTodate());
            contentValues.put("remarks", driver.getRemarks());


            idInsert = db.insert("FAADriver", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public Long insertFAATankLorry(String AutoDocNo, TankLorry tankLorry, int faactid) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;
        int isApply = 0;
        int isImmediate = 0;
        int isSpecified = 0;
        int isUnspecified = 0;
        if (tankLorry.getApply()) {
            isApply = 1;
        }
        if (tankLorry.getImmediate()) {
            isImmediate = 1;
        }
        if (tankLorry.getSpecifiedtime()) {
            isSpecified = 1;
        }
        if (tankLorry.getUnspecified()) {
            isUnspecified = 1;
        }

        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("FAActid", faactid);
            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("TankTitle", tankLorry.getTitle());
            contentValues.put("isApply", isApply);
            contentValues.put("isImmediate", isImmediate);
            contentValues.put("isSpecified", isSpecified);
            contentValues.put("isUnspecified", isUnspecified);
            contentValues.put("fromDate", tankLorry.getFromdate());
            contentValues.put("toDate", tankLorry.getTodate());
            contentValues.put("remarks", tankLorry.getRemarks());


            idInsert = db.insert("FAATankLorry", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public Long insertFAATransport(String AutoDocNo, Transport transport, int faactid) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;
        int isApply = 0;
        int isImmediate = 0;
        int isSpecified = 0;
        int isUnspecified = 0;
        if (transport.getApply()) {
            isApply = 1;
        }
        if (transport.getImmediate()) {
            isImmediate = 1;
        }
        if (transport.getSpecifiedtime()) {
            isSpecified = 1;
        }
        if (transport.getUnspecified()) {
            isUnspecified = 1;
        }

        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("FAActid", faactid);
            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("TransTitle", transport.getTitle());
            contentValues.put("isApply", isApply);
            contentValues.put("isImmediate", isImmediate);
            contentValues.put("isSpecified", isSpecified);
            contentValues.put("isUnspecified", isUnspecified);
            contentValues.put("fromDate", transport.getFromdate());
            contentValues.put("toDate", transport.getTodate());
            contentValues.put("remarks", transport.getRemarks());


            idInsert = db.insert("FAATransport", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public Long updateCurrentAction(String AutoDocNo, CurrentAction currentAction, int fAId, String fANumber) {
        long idInsert = 0;
        SQLiteDatabase db = this.getReadableDatabase();

        try {
            String deleteQueryFACase_List = "DELETE FROM FAADriver WHERE FAActid='" + fAId + "'";
            db.execSQL(deleteQueryFACase_List);
            String deleteQueryFAPenalty_Clause_List = "DELETE FROM FAATankLorry WHERE FAActid='" + fAId + "'";
            db.execSQL(deleteQueryFAPenalty_Clause_List);
            String deleteQueryFAReasons_List = "DELETE FROM FAATransport WHERE FAActid='" + fAId + "'";
            db.execSQL(deleteQueryFAReasons_List);

            insertFAADriver(AutoDocNo, currentAction.getAction().getDriver(), fAId);
            insertFAATankLorry(AutoDocNo, currentAction.getAction().getTankLorry(), fAId);
            insertFAATransport(AutoDocNo, currentAction.getAction().getTransport(), fAId);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            idInsert = -1;
            if (db != null)
                db.close();
        }
        return idInsert;

    }

    public Long insertAPIReasonsList(String AutoDocNo, String carriageCode, String fANumber, FAGetReasonsDropdowns faGetReasonsDropdowns) {
        long idInsert = 0;
        SQLiteDatabase db = this.getReadableDatabase();


        try {


            String deleteQueryFACase_List = "DELETE FROM Case_List WHERE CarriageCode='" + carriageCode + "' AND FANumber='" + fANumber + "'";
            db.execSQL(deleteQueryFACase_List);
            String deleteQueryFAPenalty_Clause_List = "DELETE FROM Penalty_Clause_List WHERE CarriageCode='" + carriageCode + "' AND FANumber='" + fANumber + "'";
            db.execSQL(deleteQueryFAPenalty_Clause_List);
            String deleteQueryFAReasons_List = "DELETE FROM Reasons_List WHERE CarriageCode='" + carriageCode + "' AND FANumber='" + fANumber + "'";
            db.execSQL(deleteQueryFAReasons_List);

            insertCaseList(AutoDocNo, carriageCode, fANumber, faGetReasonsDropdowns.getCaseListModelList());
            insertPenaltyClauseList(AutoDocNo, carriageCode, fANumber, faGetReasonsDropdowns.getClauseListModelList());
            insertReasonsList(AutoDocNo, carriageCode, fANumber, faGetReasonsDropdowns.getReasonsListModelList());


        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            idInsert = -1;
            if (db != null)
                db.close();
        }
        return idInsert;

    }

    public Long insertCaseList(String AutoDocNo, String carriageCode, String fANumber, List<CaseListModel> caseListModelList) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;

        try {
            for (int i = 0; i < caseListModelList.size(); i++) {
                CaseListModel caseListModel = new CaseListModel();
                caseListModel = caseListModelList.get(i);
                ContentValues contentValues = new ContentValues();
                contentValues.put("Description", caseListModel.getDescription());
                contentValues.put("Code", caseListModel.getCode());
                contentValues.put("AutoDocNo", AutoDocNo);
                contentValues.put("FANumber", fANumber);
                contentValues.put("CarriageCode", carriageCode);

                idInsert = db.insert("Case_List", null, contentValues);

            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public Long insertPenaltyClauseList(String AutoDocNo, String carriageCode, String fANumber, List<PenaltyClauseListModel> penaltyClauseListModelList) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;

        try {
            for (int i = 0; i < penaltyClauseListModelList.size(); i++) {
                PenaltyClauseListModel penaltyClauseListModel = new PenaltyClauseListModel();
                penaltyClauseListModel = penaltyClauseListModelList.get(i);
                ContentValues contentValues = new ContentValues();
                contentValues.put("CaseNo", penaltyClauseListModel.getCaseNo());
                contentValues.put("FANumber", fANumber);
                contentValues.put("AutoDocNo", AutoDocNo);
                contentValues.put("CarriageCode", carriageCode);

                idInsert = db.insert("Penalty_Clause_List", null, contentValues);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public Long insertReasonsList(String AutoDocNo, String carriageCode, String fANumber, List<ReasonsListModel> reasonsListModelList) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;

        try {
            for (int i = 0; i < reasonsListModelList.size(); i++) {
                ReasonsListModel reasonsListModel = new ReasonsListModel();
                reasonsListModel = reasonsListModelList.get(i);
                ContentValues contentValues = new ContentValues();
                contentValues.put("Description", reasonsListModel.getDescription());
                contentValues.put("Code", reasonsListModel.getCode());
                contentValues.put("FANumber", fANumber);
                contentValues.put("AutoDocNo", AutoDocNo);
                contentValues.put("CarriageCode", carriageCode);

                idInsert = db.insert("Reasons_List", null, contentValues);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public FAGetReasonsDropdowns getFAGetReasonsDropdowns(String carriageCode, String fANumber) {
        FAGetReasonsDropdowns faGetReasonsDropdowns = new FAGetReasonsDropdowns();

        List<CaseListModel> caseListModelList = new ArrayList<>();
        List<PenaltyClauseListModel> penaltyClauseListModelList = new ArrayList<>();
        List<ReasonsListModel> reasonsListModelList = new ArrayList<>();

        caseListModelList = getCaseList(carriageCode, fANumber);
        penaltyClauseListModelList = getPenaltyClauseList(carriageCode, fANumber);
        reasonsListModelList = getReasonsList(carriageCode, fANumber);

        faGetReasonsDropdowns.setCaseListModelList(caseListModelList);
        faGetReasonsDropdowns.setClauseListModelList(penaltyClauseListModelList);
        faGetReasonsDropdowns.setReasonsListModelList(reasonsListModelList);

        return faGetReasonsDropdowns;
    }

    public List<CaseListModel> getCaseList(String carriageCode, String fANumber) {
        List<CaseListModel> caseListModelList = new ArrayList<>();
        String selectQueryCaseList = "SELECT  * FROM  Case_List WHERE CarriageCode = '" + carriageCode + "' AND FANumber='" + fANumber + "'";
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryCaseList, null);
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {
                CaseListModel caseListModel = new CaseListModel();
                caseListModel.setCLid(cursor.getInt(cursor.getColumnIndex("CLId")));
                caseListModel.setDescription(cursor.getString(cursor.getColumnIndex("Description")));
                caseListModel.setCode(cursor.getString(cursor.getColumnIndex("Code")));
                caseListModel.setfANumber(cursor.getString(cursor.getColumnIndex("FANumber")));
                caseListModel.setCarriageCode(cursor.getString(cursor.getColumnIndex("CarriageCode")));
                caseListModelList.add(caseListModel);

                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return caseListModelList;
    }

    public List<PenaltyClauseListModel> getPenaltyClauseList(String carriageCode, String fANumber) {
        List<PenaltyClauseListModel> penaltyClauseListModelList = new ArrayList<>();
        String selectQueryPenaltyClause = "SELECT  * FROM  Penalty_Clause_List WHERE CarriageCode = '" + carriageCode + "' AND FANumber='" + fANumber + "'";
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryPenaltyClause, null);
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {
                PenaltyClauseListModel penaltyClauseListModel = new PenaltyClauseListModel();
                penaltyClauseListModel.setPCLid(cursor.getInt(cursor.getColumnIndex("PCLId")));
                penaltyClauseListModel.setCaseNo(cursor.getString(cursor.getColumnIndex("CaseNo")));
                penaltyClauseListModel.setfANumber(cursor.getString(cursor.getColumnIndex("FANumber")));
                penaltyClauseListModel.setCarriageCode(cursor.getString(cursor.getColumnIndex("CarriageCode")));
                penaltyClauseListModelList.add(penaltyClauseListModel);

                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return penaltyClauseListModelList;
    }

    public List<ReasonsListModel> getReasonsList(String carriageCode, String fANumber) {
        List<ReasonsListModel> reasonsListModelList = new ArrayList<>();
        String selectQueryReasonsList = "SELECT  * FROM  Reasons_List WHERE CarriageCode = '" + carriageCode + "' AND FANumber='" + fANumber + "'";
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryReasonsList, null);
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {
                ReasonsListModel reasonsListModel = new ReasonsListModel();
                reasonsListModel.setRLid(cursor.getInt(cursor.getColumnIndex("RLId")));
                reasonsListModel.setDescription(cursor.getString(cursor.getColumnIndex("Description")));
                reasonsListModel.setCode(cursor.getString(cursor.getColumnIndex("Code")));
                reasonsListModel.setfANumber(cursor.getString(cursor.getColumnIndex("FANumber")));
                reasonsListModel.setCarriageCode(cursor.getString(cursor.getColumnIndex("CarriageCode")));
                reasonsListModelList.add(reasonsListModel);

                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return reasonsListModelList;
    }

    //=================== Start ViewRITour=================//

    public Long insertWFApproveStage(Inbox_FetchData inboxSelectedData, WFApproveStageInfo wfApproveStageInfo) {

        long idInsert = -1L;

        try {
            idInsert = insertWFApprovalRemarks(inboxSelectedData, wfApproveStageInfo.getRemarks(), wfApproveStageInfo.getStatus());
            insertWFApprovalCCList((int) idInsert, wfApproveStageInfo.getCcList());
            insertWFApprovalAttachment((int) idInsert, wfApproveStageInfo.getCaptureImagesModelList());

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {

        }

        return idInsert;
    }

    public Long insertWFApprovalRemarks(Inbox_FetchData inboxSelectedData, String remarks, String status) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;

        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("ProceeType", inboxSelectedData.getProcessType());
            contentValues.put("Process", inboxSelectedData.getProcess());
            contentValues.put("SubProcess", inboxSelectedData.getSubProcess());
            contentValues.put("DocumentNo", inboxSelectedData.getDocumentNo());
            contentValues.put("DocDate", inboxSelectedData.getDocDate());
            contentValues.put("CurrentVNo", inboxSelectedData.getCurrentVersionNo());
            contentValues.put("StepNo", inboxSelectedData.getNextStepNO());
            contentValues.put("Status", status);
            contentValues.put("Remarks", remarks);

            idInsert = db.insert("WF_Remarks", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public Long insertWFApprovalCCList(int rid, String ccListVal) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;

        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("Rid", rid);
            contentValues.put("CCList", ccListVal);

            idInsert = db.insert("WF_CCList", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public Long insertWFApprovalAttachment(int rid, List<CaptureImagesModel> imagesModelList) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;

        try {
            for (int i = 0; i < imagesModelList.size(); i++) {
                ContentValues contentValues = new ContentValues();

                contentValues.put("Rid", rid);
                contentValues.put("AALabel", imagesModelList.get(i).getLabel());
                contentValues.put("AAFileName", imagesModelList.get(i).getFileImage());
                contentValues.put("AAUrl", imagesModelList.get(i).getUrl());

                idInsert = db.insert("WF_Approval_Attachment", null, contentValues);

            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    //=================== Start ViewRITour=================//

    public FraudulentActivityModel getFAMAinData(String fAN) {
        // String fAN = "ABC123";
        ArrayList<FraudulentActivityModel> fAMList = new ArrayList<>();
        ArrayList<Chamber> chambersList = new ArrayList<>();
        List<PreviousAction> previousActions = new ArrayList<>();
        String selectQueryFAMain = "SELECT * FROM  FAMain  WHERE FANumber = '" + fAN + "'";
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryFAMain, null);
        FraudulentActivityModel fAModel = null;
        CurrentAction currentAction = new CurrentAction();

        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {
                fAModel = new FraudulentActivityModel();
                int fAId = cursor.getInt(cursor.getColumnIndex("FAid"));
                fAModel.setFANumber(cursor.getString(cursor.getColumnIndex("FANumber")));
                fAModel.setFAAgreementFile(cursor.getString(cursor.getColumnIndex("FAAgreementFile")));
                fAModel.setTLNumber(cursor.getString(cursor.getColumnIndex("TLNumber")));
                fAModel.setCarriage(cursor.getString(cursor.getColumnIndex("Carriage")));
                fAModel.setSTNInvoiceNo(cursor.getString(cursor.getColumnIndex("STNInvoiceNo")));
                fAModel.setDocDate(cursor.getString(cursor.getColumnIndex("DocDate")));
                fAModel.setFromSupplyPointDesc(cursor.getString(cursor.getColumnIndex("FromSupplyPointDesc")));
                fAModel.setToSupplyPointDesc(cursor.getString(cursor.getColumnIndex("ToSupplyPointDesc")));
                fAModel.setDriverCodeDesc(cursor.getString(cursor.getColumnIndex("DriverCodeDesc")));
                fAModel.setDriverCode(cursor.getString(cursor.getColumnIndex("DriverCode")));
                fAModel.setCarriageCode(cursor.getString(cursor.getColumnIndex("CarriageCode")));
                fAModel.setType(cursor.getString(cursor.getColumnIndex("Type")));
                fAModel.setDebitNoteUrl(cursor.getString(cursor.getColumnIndex("DebitNoteUrl")));
                fAModel.setAgreementUrl(cursor.getString(cursor.getColumnIndex("AgreementUrl")));
                fAModel.setDipChartUrl(cursor.getString(cursor.getColumnIndex("DipChartUrl")));
                fAModel.setFakeDipChart(cursor.getString(cursor.getColumnIndex("FakeDipChart")));

                chambersList = getFAChamberData(fAId);
                if (chambersList != null) {
                    fAModel.setChambers(chambersList);
                }

                previousActions = getPreviousActionData(fAId);
                if (previousActions != null) {
                    fAModel.setPreviousActions(previousActions);
                }

                currentAction = getCurrentActionData(fAId);
                if (currentAction != null) {
                    fAModel.setCurrentAction(currentAction);
                }

                fAMList.add(fAModel);
                cursor.moveToNext();

            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return fAModel;
    }

    public ArrayList<PreviousAction> getPreviousActionData(int fAId) {

        ArrayList<PreviousAction> previousActionList = new ArrayList<>();
        Action action = new Action();
        Driver driver = new Driver();

        String selectQueryPReason = "SELECT  * FROM  FAAction WHERE FAid = " + fAId + " AND isCurrent = 0 ";
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryPReason, null);
        PreviousAction previousAction;
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {

                previousAction = new PreviousAction();
                int fAActid = cursor.getInt(cursor.getColumnIndex("FAActid"));
                previousAction.setTitle(cursor.getString(cursor.getColumnIndex("Title")));
                action = getActionData(fAActid);
                if (action != null) {
                    previousAction.setAction(action);
                    previousActionList.add(previousAction);
                }
                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return previousActionList;
    }

    public CurrentAction getCurrentActionData(int fAId) {

        Action action = new Action();
        Driver driver = new Driver();

        String selectQueryCReason = "SELECT  * FROM  FAAction  WHERE FAid = " + fAId + " AND isCurrent = 1 ";
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryCReason, null);
        CurrentAction currentAction = new CurrentAction();
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {

                int fAActid = cursor.getInt(cursor.getColumnIndex("FAActid"));
                currentAction.setTitle(cursor.getString(cursor.getColumnIndex("Title")));
                action = getActionData(fAActid);
                if (action != null) {
                    currentAction.setAction(action);
                }
                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return currentAction;
    }

    public Action getActionData(int fAActid) {

        ArrayList<PreviousAction> previousActionList = new ArrayList<>();
        Action action = new Action();
        Driver driver = new Driver();

        String selectQueryDriver = "SELECT  * FROM  FAADriver WHERE FAActid  = " + fAActid;
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryDriver, null);
        PreviousAction previousAction = new PreviousAction();
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {

                int fAADid = cursor.getInt(cursor.getColumnIndex("FAADid"));
                driver.setTitle(cursor.getString(cursor.getColumnIndex("DTitle")));
                int isApply = cursor.getInt(cursor.getColumnIndex("isApply"));
                driver.setApply(((isApply == 1) ? true : false));
                int isImmediate = cursor.getInt(cursor.getColumnIndex("isImmediate"));
                driver.setImmediate(((isImmediate == 1) ? true : false));
                int isSpecified = cursor.getInt(cursor.getColumnIndex("isSpecified"));
                driver.setSpecifiedtime(((isSpecified == 1) ? true : false));
                int isUnspecified = cursor.getInt(cursor.getColumnIndex("isUnspecified"));
                driver.setUnspecified(((isUnspecified == 1) ? true : false));
                driver.setFromdate(cursor.getString(cursor.getColumnIndex("fromDate")));
                driver.setTodate(cursor.getString(cursor.getColumnIndex("toDate")));
                driver.setRemarks(cursor.getString(cursor.getColumnIndex("remarks")));
                action.setDriver(driver);
                cursor.moveToNext();
            }

            TankLorry tankLorry = new TankLorry();

            String selectQueryTankLorry = "SELECT  * FROM  FAATankLorry WHERE  FAActid  = " + fAActid;
            cursor = db.rawQuery(selectQueryTankLorry, null);
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {

                int fAATid = cursor.getInt(cursor.getColumnIndex("FAATid"));
                tankLorry.setTitle(cursor.getString(cursor.getColumnIndex("TankTitle")));
                int isApply = cursor.getInt(cursor.getColumnIndex("isApply"));
                tankLorry.setApply(((isApply == 1) ? true : false));
                int isImmediate = cursor.getInt(cursor.getColumnIndex("isImmediate"));
                tankLorry.setImmediate(((isImmediate == 1) ? true : false));
                int isSpecified = cursor.getInt(cursor.getColumnIndex("isSpecified"));
                tankLorry.setSpecifiedtime(((isSpecified == 1) ? true : false));
                int isUnspecified = cursor.getInt(cursor.getColumnIndex("isUnspecified"));
                tankLorry.setUnspecified(((isUnspecified == 1) ? true : false));
                tankLorry.setFromdate(cursor.getString(cursor.getColumnIndex("fromDate")));
                tankLorry.setTodate(cursor.getString(cursor.getColumnIndex("toDate")));
                tankLorry.setRemarks(cursor.getString(cursor.getColumnIndex("remarks")));
                action.setTankLorry(tankLorry);
                cursor.moveToNext();
            }

            Transport transport = new Transport();

            String selectQueryTransport = "SELECT  * FROM FAATransport WHERE FAActid  = " + fAActid;
            cursor = db.rawQuery(selectQueryTransport, null);
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {

                int fAATid = cursor.getInt(cursor.getColumnIndex("FAATransid"));
                transport.setTitle(cursor.getString(cursor.getColumnIndex("TransTitle")));
                int isApply = cursor.getInt(cursor.getColumnIndex("isApply"));
                transport.setApply(((isApply == 1) ? true : false));
                int isImmediate = cursor.getInt(cursor.getColumnIndex("isImmediate"));
                transport.setImmediate(((isImmediate == 1) ? true : false));
                int isSpecified = cursor.getInt(cursor.getColumnIndex("isSpecified"));
                transport.setSpecifiedtime(((isSpecified == 1) ? true : false));
                int isUnspecified = cursor.getInt(cursor.getColumnIndex("isUnspecified"));
                transport.setUnspecified(((isUnspecified == 1) ? true : false));
                transport.setFromdate(cursor.getString(cursor.getColumnIndex("fromDate")));
                transport.setTodate(cursor.getString(cursor.getColumnIndex("toDate")));
                transport.setRemarks(cursor.getString(cursor.getColumnIndex("remarks")));
                action.setTransport(transport);
                cursor.moveToNext();
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return action;
    }

    public ArrayList<Chamber> getFAChamberData(int fAId) {

        ArrayList<Chamber> chamberArrayList = new ArrayList<>();
        List<FAUserInput> faUserInput = new ArrayList<>();
        List<PreviousReason> previousReasons = new ArrayList<>();

        String selectQueryFAChamber = "SELECT  * FROM " + "FAChamber" + " WHERE " + "FAid" + " = " + fAId + " ORDER BY ChamberNo ";
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryFAChamber, null);
        Chamber chamber;
        CurrentReason currentReasons = new CurrentReason();
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {
                chamber = new Chamber();
                int fACId = cursor.getInt(cursor.getColumnIndex("FACid"));
                chamber.setChamberNo(cursor.getString(cursor.getColumnIndex("ChamberNo")));
                chamber.setChamberDescription(cursor.getString(cursor.getColumnIndex("ChamberDescription")));
                chamber.setProductDesc(cursor.getString(cursor.getColumnIndex("ProductDesc")));
                chamber.setRate(cursor.getString(cursor.getColumnIndex("Rate")));
                chamber.setFillingRate(cursor.getString(cursor.getColumnIndex("FillingRate")));

                faUserInput = getFAUserInputData(fACId);
                if (faUserInput != null) {
                    chamber.setFAUserInput(faUserInput);

                    previousReasons = getPreviousReasonsData(fACId);
                    if (previousReasons != null) {
                        chamber.setPreviousReasons(previousReasons);

                        currentReasons = getCurrentReasonsData(fACId);
                        if (currentReasons != null) {
                            chamber.setCurrentReasons(currentReasons);

                            chamberArrayList.add(chamber);
                        }
                    }
                }

                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return chamberArrayList;
    }

    public ArrayList<PreviousReason> getPreviousReasonsData(int fACId) {

        ArrayList<PreviousReason> previousReasonsList = new ArrayList<>();
        ArrayList<Reason> reasons = new ArrayList<>();

        String selectQueryPReason = "SELECT  * FROM ReasonsMaster  WHERE isCurrent = 0 AND FACid = " + fACId;
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryPReason, null);
        PreviousReason previousReason;
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {
                previousReason = new PreviousReason();
                int fARMid = cursor.getInt(cursor.getColumnIndex("FARMid"));
                previousReason.setTitle(cursor.getString(cursor.getColumnIndex("RMTitle")));
                previousReason.setUser(cursor.getString(cursor.getColumnIndex("RMUser")));
                previousReason.setUserDesignation(cursor.getString(cursor.getColumnIndex("RMUserDesignation")));
                reasons = getReasonsData(fARMid);
                if (reasons != null) {
                    previousReason.setReasons(reasons);
                }

                previousReasonsList.add(previousReason);
                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return previousReasonsList;
    }

    public CurrentReason getCurrentReasonsData(int fACId) {

        ArrayList<CurrentReason> currentReasonsList = new ArrayList<>();
        ArrayList<Reason> reasons = new ArrayList<>();

        String selectQueryCReason = "SELECT  * FROM  ReasonsMaster  WHERE isCurrent = 1 AND FACid  = " + fACId;
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryCReason, null);
        CurrentReason currentReason = new CurrentReason();
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {

                int fARMid = cursor.getInt(cursor.getColumnIndex("FARMid"));
                currentReason.setfARMid(fARMid);
                currentReason.setTitle(cursor.getString(cursor.getColumnIndex("RMTitle")));
                currentReason.setUser(cursor.getString(cursor.getColumnIndex("RMUser")));
                currentReason.setUserDesignation(cursor.getString(cursor.getColumnIndex("RMUserDesignation")));
                reasons = getReasonsData(fARMid);
                if (reasons != null) {
                    currentReason.setReasons(reasons);
                }
                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return currentReason;
    }

    public ArrayList<Reason> getReasonsData(int fARMid) {

        ArrayList<Reason> reasonsList = new ArrayList<>();

        String selectQueryReasons = "SELECT  * FROM  Reasons  WHERE  FARMid  = " + fARMid;
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryReasons, null);
        Reason reason = new Reason();
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {
                reason = new Reason();
                int fARid = cursor.getInt(cursor.getColumnIndex("FARid"));
                reason.setfARid(cursor.getInt(cursor.getColumnIndex("FARid")));
                reason.setCode(cursor.getString(cursor.getColumnIndex("RCode")));
                reason.setDescription(cursor.getString(cursor.getColumnIndex("RDescription")));
                reason.setPenaltyClauseNo(cursor.getString(cursor.getColumnIndex("RPenaltyClauseNo")));
                reason.setPenatyCaseNumber(cursor.getString(cursor.getColumnIndex("RPenatyCaseNumber")));
                reason.setSurcharge(cursor.getString(cursor.getColumnIndex("RSurcharge")));
                reason.setPenaltyPercentage(cursor.getString(cursor.getColumnIndex("RPenaltyPercentage")));
                reason.setLumsum(cursor.getString(cursor.getColumnIndex("RLumsum")));
                reason.setTotal(cursor.getString(cursor.getColumnIndex("RTotal")));
                reason.setRemarks(cursor.getString(cursor.getColumnIndex("RRemarks")));
                reasonsList.add(reason);
                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return reasonsList;
    }

    public ArrayList<FAUserInput> getFAUserInputData(int fACId) {

        ArrayList<FAUserInput> list = new ArrayList<>();
        ArrayList<Attachment> attachments = new ArrayList<>();

        String selectQueryFAChamber = "SELECT  * FROM  FAUserInput  WHERE FACid  = " + fACId;
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryFAChamber, null);
        FAUserInput faUserInput = new FAUserInput();
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {
                faUserInput = new FAUserInput();
                int fACUIid = cursor.getInt(cursor.getColumnIndex("FACUIid"));
                faUserInput.setInvolvementNo(cursor.getString(cursor.getColumnIndex("InvolvementNo")));
                faUserInput.setInvolvement(cursor.getString(cursor.getColumnIndex("Involvement")));
                faUserInput.setQuantity(cursor.getString(cursor.getColumnIndex("Quantity")));
                faUserInput.setRemarks(cursor.getString(cursor.getColumnIndex("Remarks")));
                attachments = getFAAttachmentsData(fACUIid);
                if (attachments != null) {
                    faUserInput.setAttachements(attachments);
                }
                list.add(faUserInput);
                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return list;
    }

    public ArrayList<Attachment> getFAAttachmentsData(int fACUIid) {

//        ArrayList<FAUserInput> list = new ArrayList<>();
        ArrayList<Attachment> list = new ArrayList<>();

        String selectQueryFAChamber = "SELECT  * FROM  FAAttachments WHERE  FACUIid  = " + fACUIid;
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryFAChamber, null);
        Attachment attachment = new Attachment();
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {

                int fAAid = cursor.getInt(cursor.getColumnIndex("FAAid"));
                attachment.setFileName(cursor.getString(cursor.getColumnIndex("FileName")));
                attachment.setAttachmentID(cursor.getString(cursor.getColumnIndex("AttachmentID")));
                attachment.setFileLabel(cursor.getString(cursor.getColumnIndex("FileLabel")));
                attachment.setFilePath(cursor.getString(cursor.getColumnIndex("FilePath")));

                list.add(attachment);
                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return list;
    }

    public Long updateCurrentAction(String AutoDocNo, String fANumber, Action cAction) {

        String query = "SELECT * FROM  FAAction WHERE  FANumber  = '" + fANumber + "' AND isCurrent = 1";
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = null;
        Long idInsert = -1L;
        try {
            cursor = db.rawQuery(query, null);
        } catch (Exception e) {
            e.printStackTrace();
        }
        int fAActid;
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {

                fAActid = cursor.getInt(cursor.getColumnIndex("FAActid"));
                String deleteQueryFAADriver = "DELETE FROM FAADriver WHERE FAActid=" + fAActid;
                db.execSQL(deleteQueryFAADriver);
                String deleteQueryFAATankLorry = "DELETE FROM FAATankLorry WHERE FAActid=" + fAActid;
                db.execSQL(deleteQueryFAATankLorry);
                String deleteQueryFAATransport = "DELETE FROM FAATransport WHERE FAActid=" + fAActid;
                db.execSQL(deleteQueryFAATransport);

                insertFAADriver(AutoDocNo, cAction.getDriver(), fAActid);
                insertFAATankLorry(AutoDocNo, cAction.getTankLorry(), fAActid);
                idInsert = insertFAATransport(AutoDocNo, cAction.getTransport(), fAActid);

                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            if (db != null)
                db.close();
        }
        return idInsert;
    }

    public int updateReason(Reason reason) {

        SQLiteDatabase db = this.getReadableDatabase();
        int fARid = reason.getfARid();
        int idInsert = -1;

        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("RCode", reason.getCode());
            contentValues.put("RDescription", reason.getDescription());
            contentValues.put("RPenaltyClauseNo", reason.getPenaltyClauseNo());
            contentValues.put("RPenatyCaseNumber", reason.getPenatyCaseNumber());
            contentValues.put("RSurcharge", reason.getSurcharge());
            contentValues.put("RPenaltyPercentage", reason.getPenaltyPercentage());
            contentValues.put("RLumsum", reason.getLumsum());
            contentValues.put("RTotal", reason.getTotal());
            contentValues.put("RRemarks", reason.getRemarks());

            idInsert = db.update("Reasons", contentValues, "FARid =" + fARid, null);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return idInsert;
    }

    public void deleteCReason(int FARid, ApiInterfaces apiInterfaces, int channelId, int fAid) {
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            String deleteQueryCReason = "DELETE FROM Reasons WHERE FARid=" + FARid;
            db.execSQL(deleteQueryCReason);

            setIsSyncFA(NOT_SUBMITED_CHANGED, fAid);
            apiInterfaces.updateView(channelId);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }


    public void mDeleteFATablesByAutoDocNo(String AutoDocNo) {
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            String deleteQueryFAMain = "DELETE FROM FAMain WHERE AutoDocNo = '" + AutoDocNo + "'";
            db.execSQL(deleteQueryFAMain);
            String deleteQueryFAChamber = "DELETE FROM FAChamber WHERE AutoDocNo = '" + AutoDocNo + "'";
            db.execSQL(deleteQueryFAChamber);
            String deleteQueryFAUserInput = "DELETE FROM FAUserInput WHERE AutoDocNo = '" + AutoDocNo + "'";
            db.execSQL(deleteQueryFAUserInput);
            String deleteQueryFAAttachments = "DELETE FROM FAAttachments WHERE AutoDocNo = '" + AutoDocNo + "'";
            db.execSQL(deleteQueryFAAttachments);
            String deleteQueryFAAction = "DELETE FROM FAAction WHERE AutoDocNo = '" + AutoDocNo + "'";
            db.execSQL(deleteQueryFAAction);
            String deleteQueryFAADriver = "DELETE FROM FAADriver WHERE AutoDocNo = '" + AutoDocNo + "'";
            db.execSQL(deleteQueryFAADriver);
            String deleteQueryFAATankLorry = "DELETE FROM FAATankLorry WHERE AutoDocNo = '" + AutoDocNo + "'";
            db.execSQL(deleteQueryFAATankLorry);
            String deleteQueryFAATransport = "DELETE FROM FAATransport WHERE AutoDocNo = '" + AutoDocNo + "'";
            db.execSQL(deleteQueryFAATransport);
            String deleteQueryReasonsMaster = "DELETE FROM ReasonsMaster WHERE AutoDocNo = '" + AutoDocNo + "'";
            db.execSQL(deleteQueryReasonsMaster);
            String deleteQueryReasons = "DELETE FROM Reasons WHERE AutoDocNo = '" + AutoDocNo + "'";
            db.execSQL(deleteQueryReasons);
            String deleteQueryCaseList = "DELETE FROM Case_List WHERE AutoDocNo = '" + AutoDocNo + "'";
            db.execSQL(deleteQueryCaseList);
            String deleteQueryPenaltyClauseList = "DELETE FROM Penalty_Clause_List WHERE AutoDocNo = '" + AutoDocNo + "'";
            db.execSQL(deleteQueryPenaltyClauseList);
            String deleteQueryReasonsList = "DELETE FROM Reasons_List WHERE AutoDocNo = '" + AutoDocNo + "'";
            db.execSQL(deleteQueryReasonsList);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }

    //TODO: ===============================End Queries created by Mansoor================================

    //endregion

    public void openDatabase() {
        String dbPath = mContext.getDatabasePath(DATABASE_NAME).getPath();
        if (Database != null && Database.isOpen()) {
            return;
        }
        Database = SQLiteDatabase.openDatabase(dbPath, null, SQLiteDatabase.OPEN_READWRITE);
    }

    public void closeDatabase() {
        if (Database != null) {
            Database.close();
        }

    }

    public void deleteTablesOnLogout() {
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            String deleteQuery = "DELETE FROM ma_doctype";
            db.execSQL(deleteQuery);
            String deleteQueryMetterReading = "DELETE FROM ma_meterreadings";
            db.execSQL(deleteQueryMetterReading);
            String deleteQueryRetail = "DELETE FROM ma_retailsites";
            db.execSQL(deleteQueryRetail);
            String deleteQueryTankDips = "DELETE FROM ma_tankdips";
            db.execSQL(deleteQueryTankDips);
            String deleteQueryTCP = "DELETE FROM ma_tcp";
            db.execSQL(deleteQueryTCP);
            String deleteQueryTcpRetailsites = "DELETE FROM ma_tcp_retailsites";
            db.execSQL(deleteQueryTcpRetailsites);
            String deleteQuerySalesData = "DELETE FROM ma_salesdata";
            db.execSQL(deleteQuerySalesData);
            String deleteQueryStockReconsiliation = "DELETE FROM ma_stockreconciliation";
            db.execSQL(deleteQueryStockReconsiliation);
            String deleteQueryConditions = "DELETE FROM ma_conditions";
            db.execSQL(deleteQueryConditions);
            String deleteQueryactionplan = "DELETE FROM ma_actionplan";
            db.execSQL(deleteQueryactionplan);
            String deleteQuerypoints = "DELETE FROM ma_points";
            db.execSQL(deleteQuerypoints);
            String deleteQueryallpoints = "DELETE FROM all_points";
            db.execSQL(deleteQueryallpoints);
            String deleteQueryparticularcategory = "DELETE FROM ma_particularcategory";
            db.execSQL(deleteQueryparticularcategory);
            String deleteQuerynestedactionplan = "DELETE FROM ma_nestedactionplan";
            db.execSQL(deleteQuerynestedactionplan);
            /*String deleteQuerynestedconditions = "DELETE FROM ma_nestedcondtions";
            db.execSQL(deleteQuerynestedconditions);*/
            String deleteQueryTankCalibrations = "DELETE FROM ma_TankCalibrations";
            db.execSQL(deleteQueryTankCalibrations);
            //============================Qa Tour Plan===========================
            String deleteQueryQavan_TourPlanner = "DELETE FROM qavan_TourPlanner";
            db.execSQL(deleteQueryQavan_TourPlanner);
            String deleteQueryQavan_TourPlannerLocation = "DELETE FROM qavan_TourPlannerLocation";
            db.execSQL(deleteQueryQavan_TourPlannerLocation);

            String deleteQueryqavan_AdditionalSites = "DELETE FROM qavan_AdditionalSites";
            db.execSQL(deleteQueryqavan_AdditionalSites);

            String deleteQueryDropdowns_VisitReason = "DELETE FROM dropdowns_VisitReason";
            db.execSQL(deleteQueryDropdowns_VisitReason);

            String deleteQueryDropdowns_Territory = "DELETE FROM dropdowns_Territory";
            db.execSQL(deleteQueryDropdowns_Territory);
            String deleteQueryDropdowns_QAVan = "DELETE FROM dropdowns_QaVan";
            db.execSQL(deleteQueryDropdowns_QAVan);

            String deleteQueryDropdowns_Sequence = "DELETE FROM dropdowns_Sequence";
            db.execSQL(deleteQueryDropdowns_Sequence);

            String deleteQueryDropdowns_Nature = "DELETE FROM dropdowns_Nature";
            db.execSQL(deleteQueryDropdowns_Nature);

            String deleteQueryremarks = "DELETE FROM remarks";
            db.execSQL(deleteQueryremarks);
            String deleteQueryqa_inspection_checked = "DELETE FROM qa_inspection_checked";
            db.execSQL(deleteQueryqa_inspection_checked);
            String deleteQueryqa_nozzle = "DELETE FROM nozzle";
            db.execSQL(deleteQueryqa_nozzle);
            String deleteQueryqa_initiated_to = "DELETE FROM initiated_to";
            db.execSQL(deleteQueryqa_initiated_to);
            String deleteQueryqa_history = "DELETE FROM history";
            db.execSQL(deleteQueryqa_history);
            String deleteQueryqa_dispenser_measurment_plan = "DELETE FROM dispenser_measurment_plan";
            db.execSQL(deleteQueryqa_dispenser_measurment_plan);
            String deleteQueryqa_dispenser = "DELETE FROM dispenser";
            db.execSQL(deleteQueryqa_dispenser);
            String deleteDumy_qavan_TourPlanner = "DELETE FROM Dumy_qavan_TourPlanner";
            db.execSQL(deleteDumy_qavan_TourPlanner);
            String deleteqa_terrtory_list_from_server = "DELETE FROM qa_terrtory_list_from_server";
            db.execSQL(deleteqa_terrtory_list_from_server);
            String deleteDumy_qavan_TourPlannerLocation = "DELETE FROM Dumy_qavan_TourPlannerLocation";
            db.execSQL(deleteDumy_qavan_TourPlannerLocation);
            String deleteqa_inbox = "DELETE FROM qa_inbox";
            db.execSQL(deleteqa_inbox);
            String deleteRetail_sites_from_server = "DELETE FROM Retail_sites_from_server";
            db.execSQL(deleteRetail_sites_from_server);
            String deletedropdowns_RouteList = "DELETE FROM dropdowns_RouteList";
            db.execSQL(deletedropdowns_RouteList);
            String deletedropdowns_Sentitems = "DELETE FROM sentitems";
            db.execSQL(deletedropdowns_Sentitems);
            String deleteoutbox = "DELETE FROM outbox";
            db.execSQL(deleteoutbox);
            String deletemenulabel = "DELETE FROM menulabel";
            db.execSQL(deletemenulabel);
            String deletetanks_status = "DELETE FROM tanks_status";
            db.execSQL(deletetanks_status);
            String deletefueltype = "DELETE FROM fueltype";
            db.execSQL(deletefueltype);


            String deleteActionPlan = "DELETE FROM ActionPlan";
            db.execSQL(deleteActionPlan);


            //TODO:===================Fuel Type================================
            String deletedispenser_meaurment = "DELETE FROM dispenser_meaurment";
            db.execSQL(deletedispenser_meaurment);
            String deletetanks_description_dispenser = "DELETE FROM tanks_description_dispenser";
            db.execSQL(deletetanks_description_dispenser);
            String deletedispenser_meaurment_images = "DELETE FROM dispenser_meaurment_images";
            db.execSQL(deletedispenser_meaurment_images);
            String delete_nozzle_images = "DELETE FROM nozzle_images";
            db.execSQL(delete_nozzle_images);
            String deletedispenser_meaurment_certificate_retailer = "DELETE FROM dispenser_meaurment_certificate_retailer";
            db.execSQL(deletedispenser_meaurment_certificate_retailer);
            String delete_dispenser_meaurment_certificate_technician = "DELETE FROM dispenser_meaurment_certificate_technician";
            db.execSQL(delete_dispenser_meaurment_certificate_technician);
            String deletedispenser_meaurment_certificate = "DELETE FROM dispenser_meaurment_certificate";
            db.execSQL(deletedispenser_meaurment_certificate);

            //TODO:===================Product Quality================================
            String deleteproductquality_certificate = "DELETE FROM productqualityresult_certificate_signature";
            db.execSQL(deleteproductquality_certificate);
            String deleteproduct_quality_images = "DELETE FROM product_quality_images";
            db.execSQL(deleteproduct_quality_images);
            String deleteproduct_quality_retain_images = "DELETE FROM product_quality_retain_images";
            db.execSQL(deleteproduct_quality_retain_images);
            String deleteproduct_quality_signature_images = "DELETE FROM product_quality_signature_images";
            db.execSQL(deleteproduct_quality_signature_images);
            String deleteproduct_quality_tech_signature_images = "DELETE FROM product_quality_tech_signature_images";
            db.execSQL(deleteproduct_quality_tech_signature_images);
            String deletetanks_description_productqualitytest = "DELETE FROM tanks_description_productqualitytest";
            db.execSQL(deletetanks_description_productqualitytest);
            String deletesample_description_productqualitytest = "DELETE FROM sample_description_productqualitytest";
            db.execSQL(deletesample_description_productqualitytest);
            String deletesample_type_productqualitytest = "DELETE FROM sample_type_productqualitytest";
            db.execSQL(deletesample_type_productqualitytest);
            String deletefueltype_productquality = "DELETE FROM fueltype_productquality";
            db.execSQL(deletefueltype_productquality);


            // Delete Locator Tables

     /*       String deleteFillingStationFuelType = "DELETE FROM FillingStationFuelType";
            db.execSQL(deleteFillingStationFuelType);*/

//            String deleteFillingStationServices = "DELETE FROM FillingStationServices";
//            db.execSQL(deleteFillingStationServices);

            String deleteFillingStations = "DELETE FROM FillingStations";
            db.execSQL(deleteFillingStations);

            String deleteFuelTypes = "DELETE FROM FuelTypes";
            db.execSQL(deleteFuelTypes);

            String deleteServices = "DELETE FROM Services";
            db.execSQL(deleteServices);

            String deleteSearchedFillingStations = "DELETE FROM SearchedFillingStations";
            db.execSQL(deleteSearchedFillingStations);

            String deleteReasionsProductQuality = "DELETE FROM ReasionsProductQuality";
            db.execSQL(deleteReasionsProductQuality);

            String deleteSampleStatusProductQuality = "DELETE FROM SampleStatusProductQuality";
            db.execSQL(deleteSampleStatusProductQuality);

            String deleteMethodListProductQuality = "DELETE FROM MethodListProductQuality";
            db.execSQL(deleteMethodListProductQuality);


            String deleteQAVan_GI_Equipment = "DELETE FROM QAVan_GI_Equipment";
            db.execSQL(deleteQAVan_GI_Equipment);

            String deleteQAVan_GI_Standard = "DELETE FROM QAVan_GI_Standard";
            db.execSQL(deleteQAVan_GI_Standard);

            String deleteUserObservation = "DELETE FROM UserObservation";
            db.execSQL(deleteUserObservation);

            String deleteemployees = "DELETE FROM employees";
            db.execSQL(deleteemployees);
            String deleteQAVan_GI_signature = "DELETE FROM QAVan_GI_signature";
            db.execSQL(deleteQAVan_GI_signature);

            String deleteQAVan_GI_Standard_Images = "DELETE FROM QAVan_GI_Standard_Images";
            db.execSQL(deleteQAVan_GI_Standard_Images);


            //TODO: LAB TEST REQUEST


            String deletelabtest_SampleAttachmentsList = "DELETE FROM labtest_SampleAttachmentsList";
            db.execSQL(deletelabtest_SampleAttachmentsList);


            String deletelabtest_SampleList = "DELETE FROM labtest_SampleList";
            db.execSQL(deletelabtest_SampleList);

            String deletelabtest_LabInchargeSection = "DELETE FROM labtest_LabInchargeSection";
            db.execSQL(deletelabtest_LabInchargeSection);


            String deletelabtest_MethodList = "DELETE FROM labtest_MethodList";
            db.execSQL(deletelabtest_MethodList);

            String deletelabtest_MethodList_sample = "DELETE FROM labtest_MethodList_sample";
            db.execSQL(deletelabtest_MethodList_sample);

            String deletelabtest_TestList = "DELETE FROM labtest_TestList";
            db.execSQL(deletelabtest_TestList);

            String deletelabtest_TestList_sample = "DELETE FROM labtest_TestList_sample";
            db.execSQL(deletelabtest_TestList_sample);

            String deletelabtest_ProductList = "DELETE FROM labtest_ProductList";
            db.execSQL(deletelabtest_ProductList);

            String deletelabtest_AdvanceRequest = "DELETE FROM labtest_AdvanceRequest";
            db.execSQL(deletelabtest_AdvanceRequest);

            String deletelabtest_AdvanceConfirmation = "DELETE FROM labtest_AdvanceConfirmation";
            db.execSQL(deletelabtest_AdvanceConfirmation);

            String deletelabtest_ChargeTo = "DELETE FROM labtest_ChargeTo";
            db.execSQL(deletelabtest_ChargeTo);

            String deletelabtest_qainchargeSection = "DELETE FROM labtest_qainchargeSection";
            db.execSQL(deletelabtest_qainchargeSection);

            String deletelabtest_chemistlist = "DELETE FROM labtest_chemistlist";
            db.execSQL(deletelabtest_chemistlist);

            String deletelabtest_advanceaproval = "DELETE FROM labtest_advanceaproval";
            db.execSQL(deletelabtest_advanceaproval);

            String deletelabtest_request = "DELETE FROM labtest_request";
            db.execSQL(deletelabtest_request);

            String deletelabtest_LabInchargeAssignmentt = "DELETE FROM labtest_LabInchargeAssignment";
            db.execSQL(deletelabtest_LabInchargeAssignmentt);

            String deletelabtest_labtest_intimate = "DELETE FROM labtest_LabInchargeAssignment_intimate";
            db.execSQL(deletelabtest_labtest_intimate);

            String deletelabtest_AdvanceConfirmation_intimate = "DELETE FROM labtest_AdvanceConfirmation_intimate";
            db.execSQL(deletelabtest_AdvanceConfirmation_intimate);

            String deletelabtest_Advanceaproval_intimate = "DELETE FROM labtest_Advanceaproval_intimate";
            db.execSQL(deletelabtest_Advanceaproval_intimate);

            String deletelabtest_AdvanceRequest_intimate = "DELETE FROM labtest_AdvanceRequest_intimate";
            db.execSQL(deletelabtest_AdvanceRequest_intimate);

            String deletelabtest_Samplelist_PossibleReasons = "DELETE FROM labtest_Samplelist_PossibleReasons";
            db.execSQL(deletelabtest_Samplelist_PossibleReasons);

            String deletelabtest_Samplelist_DrainLocations = "DELETE FROM labtest_Samplelist_DrainLocations";
            db.execSQL(deletelabtest_Samplelist_DrainLocations);

            mDeleteFATables();

        } catch (SQLException e) {
            e.printStackTrace();
            Log.d("_mLogLogout= ", "1" + e.getMessage());
            CommonUtilities.toastShort(mContext, "error while logout " + e.getMessage());
        } finally {
            if (db != null)
                db.close();
        }
    }

    //region QA TOUR PLAN

    //TODO:=======================================QATour Plan==============================================
    public Long insertQAtourPlan(QA_Van_Tour_Plan_DB_Model qa_van_tour_plan_db_model) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("Creator_id", qa_van_tour_plan_db_model.getCreator_id());
            contentValues.put("Title", qa_van_tour_plan_db_model.getTitle());
            contentValues.put("QVTP_Server_id", qa_van_tour_plan_db_model.getQvtp_server_id());
            contentValues.put("Nature", qa_van_tour_plan_db_model.getNature());
            contentValues.put("Creation_date", qa_van_tour_plan_db_model.getCreation_date());
            contentValues.put("Tour_start_date", qa_van_tour_plan_db_model.getTour_start_date());
            contentValues.put("Tour_end_date", qa_van_tour_plan_db_model.getTour_end_date());
            contentValues.put("Terrority_id", qa_van_tour_plan_db_model.getTerrority_id());
            contentValues.put("Qavanid", qa_van_tour_plan_db_model.getQA_Van_id());
            contentValues.put("Status", qa_van_tour_plan_db_model.getS_status());
            contentValues.put("s_date", qa_van_tour_plan_db_model.getS_date());
            contentValues.put("s_is_sync", qa_van_tour_plan_db_model.getS_is_sync());
            contentValues.put("s_status", qa_van_tour_plan_db_model.getS_status());
            contentValues.put("s_long", qa_van_tour_plan_db_model.getS_long());
            contentValues.put("s_lat", qa_van_tour_plan_db_model.getS_lat());

            idInsert = db.insert("qavan_TourPlanner", null, contentValues);
            Log.d("", "");
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return idInsert;
    }
    //TODO:=============================================== Dependent Fields================================================
  /*  public Long insertQATerritoryDropDown(DropDownsModel dropDownsModel) {




        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;

        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("Territory_id", dropDownsModel.getId());
            contentValues.put("Territory_Des", dropDownsModel.getName());


            idInsert = db.insert("dropdowns_Territory", null, contentValues);

        }
        catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }
    public List<DropDownsModel> GetTerritoryDropDown() {

        Cursor res = null;
        List<DropDownsModel> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<DropDownsModel>();
            list.add(new DropDownsModel("-1","Select Territory"));
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from dropdowns_Territory", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                DropDownsModel maDoctype = new DropDownsModel();
                maDoctype.setId(res.getString(res.getColumnIndex("Territory_id")));
                maDoctype.setName(res.getString(res.getColumnIndex("Territory_Des")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }*/

    //TODO: ===============================TerritoryList================================
    public Long insertQATerritoryDropDown(TerritoryListModel model) {


        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;

        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("Territory_id", model.getTerritoryCode());
            contentValues.put("Territory_Des", model.getTerritoryDes());


            idInsert = db.insert("dropdowns_Territory", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public List<TerritoryListModel> GetTerritoryDropDown() {

        Cursor res = null;
        List<TerritoryListModel> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<TerritoryListModel>();
            list.add(new TerritoryListModel("Select Territory", "-1"));
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from dropdowns_Territory", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                TerritoryListModel maDoctype = new TerritoryListModel();
                maDoctype.setTerritoryCode(res.getString(res.getColumnIndex("Territory_id")));
                maDoctype.setTerritoryDes(res.getString(res.getColumnIndex("Territory_Des")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }
    //TODO: ============================================================================


    public Long insertQAtourTourPlanTerritoryRouteListDropDown(DropDownRouteList dropDownRouteLists) {


        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;

        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("Territory_id", dropDownRouteLists.getTerritoryid());
            contentValues.put("RT_ACTIVE", dropDownRouteLists.getRT_ACTIVE());
            contentValues.put("RouteDes", dropDownRouteLists.getRouteDes());
            contentValues.put("EffectiveFromDt", dropDownRouteLists.getEffectiveFromDt());
            contentValues.put("VanCode", dropDownRouteLists.getVanCode());
            contentValues.put("RouteCode", dropDownRouteLists.getRouteCode());

            idInsert = db.insert("dropdowns_RouteList", null, contentValues);


        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public List<DropDownRouteList> GetQAtourTourPlanTerritoryRouteList(String id, String territoryid) {

        Cursor res = null;
        List<DropDownRouteList> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<DropDownRouteList>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from dropdowns_RouteList WHERE VanCode='" + id + "'" + " AND Territory_id='" + territoryid + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                DropDownRouteList maDoctype = new DropDownRouteList();
                maDoctype.setId(res.getInt(res.getColumnIndex("Territory_id")));
                maDoctype.setRT_ACTIVE(res.getString(res.getColumnIndex("RT_ACTIVE")));
                maDoctype.setRouteDes(res.getString(res.getColumnIndex("RouteDes")));
                maDoctype.setEffectiveFromDt(res.getString(res.getColumnIndex("EffectiveFromDt")));
                maDoctype.setVanCode(res.getString(res.getColumnIndex("VanCode")));
                maDoctype.setRouteCode(res.getString(res.getColumnIndex("RouteCode")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<DropDownRouteList> GetQAtourTourPlanRouteListByTerritoryId(String territoryid) {

        Cursor res = null;
        List<DropDownRouteList> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<DropDownRouteList>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from dropdowns_RouteList WHERE Territory_id='" + territoryid + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                DropDownRouteList maDoctype = new DropDownRouteList();
                maDoctype.setId(res.getInt(res.getColumnIndex("Territory_id")));
                maDoctype.setRT_ACTIVE(res.getString(res.getColumnIndex("RT_ACTIVE")));
                maDoctype.setRouteDes(res.getString(res.getColumnIndex("RouteDes")));
                maDoctype.setEffectiveFromDt(res.getString(res.getColumnIndex("EffectiveFromDt")));
                maDoctype.setVanCode(res.getString(res.getColumnIndex("VanCode")));
                maDoctype.setRouteCode(res.getString(res.getColumnIndex("RouteCode")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    //TODO: ========================qa_VAN============================================
    public Long insertQAtourTourPlanQAVanListDropDown(VanListModel model) {


        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;

        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("VanActive", model.getVanActive());
            contentValues.put("VanCode", model.getVanCode());
            contentValues.put("VanDes", model.getVanDes());
            idInsert = db.insert("dropdowns_QaVan", null, contentValues);


        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public List<VanListModel> GetVanDropDown() {


        Cursor res = null;
        List<VanListModel> list = null;
        try {
            list = new ArrayList<VanListModel>();
            list.add(new VanListModel("-1", "0", "Select QA Van"));
            SQLiteDatabase db = this.getReadableDatabase();
            res = db.rawQuery("select * from dropdowns_QaVan ", null);
            //  Log.d("Query", String.valueOf(res));
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                VanListModel maDoctype = new VanListModel();

                maDoctype.setVanActive(res.getString(res.getColumnIndex("VanActive")));
                maDoctype.setVanCode(res.getString(res.getColumnIndex("VanCode")));
                maDoctype.setVanDes(res.getString(res.getColumnIndex("VanDes")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
        }
        return list;
    }
    //TODO: ==========================================================================

    public List<DropDownQAVanList> GetVanDropDownbyTerritoryid(String id) {
        Log.d("Search Value", id);

        Cursor res = null;
        List<DropDownQAVanList> list = null;
        try {
            list = new ArrayList<DropDownQAVanList>();
            list.add(new DropDownQAVanList("-1", "", "0", "0", "Select QA Van"));
            SQLiteDatabase db = this.getReadableDatabase();
            res = db.rawQuery("select * from dropdowns_QaVan WHERE Territory_id='" + id + "'", null);
            //  Log.d("Query", String.valueOf(res));
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                DropDownQAVanList maDoctype = new DropDownQAVanList();
                //  maDoctype.setId(res.getInt(res.getColumnIndex("id")));
                maDoctype.setTerritoryid(res.getString(res.getColumnIndex("Territory_id")));
                maDoctype.setEffectiveFromDt(res.getString(res.getColumnIndex("EffectiveFromDt")));
                maDoctype.setVanActive(res.getString(res.getColumnIndex("VanActive")));
                maDoctype.setVanCode(res.getString(res.getColumnIndex("VanCode")));
                maDoctype.setVanDes(res.getString(res.getColumnIndex("VanDes")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
        }
        return list;
    }


    public Long insertQAtourPlanRouteRecyclerList(MA_QA_Van_Tour qa_van_tour) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("Territory_id", qa_van_tour.getTerritory());
            contentValues.put("AreaExective", qa_van_tour.getAreaExective());
            contentValues.put("RetailSiteDes", qa_van_tour.getRetailSiteDes());
            contentValues.put("Lati", qa_van_tour.getLati());
            contentValues.put("Location", qa_van_tour.getLocation());
            contentValues.put("Sub_Region", qa_van_tour.getSub_Region());
            contentValues.put("LastInspDate", qa_van_tour.getLastInspDate());
            contentValues.put("Region", qa_van_tour.getRegion());
            contentValues.put("AreaIncharge", qa_van_tour.getAreaIncharge());
            contentValues.put("CostCenter", qa_van_tour.getCostCenter());
            contentValues.put("AreaInchargeContact", qa_van_tour.getAreaInchargeContact());
            contentValues.put("District", qa_van_tour.getDistrict());
            contentValues.put("RetailSiteCode", qa_van_tour.getRetailSiteCode());
            contentValues.put("Address", qa_van_tour.getAddress());
            contentValues.put("Longi", qa_van_tour.getLongi());
            contentValues.put("AreaExectiveContact", qa_van_tour.getAreaExectiveContact());
            contentValues.put("NoOfDaysPass", qa_van_tour.getNoOfDaysPass());
            contentValues.put("CostCentrDes", qa_van_tour.getCostCentrDes());
            contentValues.put("SequenceNo", qa_van_tour.getSequenceNo());

            idInsert = db.insert("Retail_sites_from_server", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return idInsert;
    }

    public List<MA_QA_Van_Tour> GetAllRouteSitesofTerritories(int id) {


        Cursor res = null;
        List<MA_QA_Van_Tour> list = null;
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            list = new ArrayList<MA_QA_Van_Tour>();

            res = db.rawQuery("select * from Retail_sites_from_server WHERE Territory_id='" + id + "'", null);

            res.moveToFirst();

            while (res.isAfterLast() == false) {
                MA_QA_Van_Tour maDoctype = new MA_QA_Van_Tour();
                maDoctype.setId(res.getInt(res.getColumnIndex("id")));
                maDoctype.setTerritory(res.getInt(res.getColumnIndex("Territory_id")));
                maDoctype.setAreaExective(res.getString(res.getColumnIndex("AreaExective")));
                maDoctype.setLastVistTourCode(res.getString(res.getColumnIndex("LastVistTourCode")));
                maDoctype.setRetailSiteDes(res.getString(res.getColumnIndex("RetailSiteDes")));
                maDoctype.setVisionType(res.getString(res.getColumnIndex("VisionType")));
                maDoctype.setLati(res.getString(res.getColumnIndex("Lati")));
                maDoctype.setLocation(res.getString(res.getColumnIndex("Location")));
                maDoctype.setSub_Region(res.getString(res.getColumnIndex("Sub_Region")));
                maDoctype.setPersonContacNumber(res.getString(res.getColumnIndex("PersonContacNumber")));
                maDoctype.setLastInspDate(res.getString(res.getColumnIndex("LastInspDate")));
                maDoctype.setContactPersonName(res.getString(res.getColumnIndex("ContactPersonName")));
                maDoctype.setRegion(res.getString(res.getColumnIndex("Region")));
                maDoctype.setAreaIncharge(res.getString(res.getColumnIndex("AreaIncharge")));
                maDoctype.setCostCenter(res.getString(res.getColumnIndex("CostCenter")));
                maDoctype.setAreaInchargeContact(res.getString(res.getColumnIndex("AreaInchargeContact")));
                maDoctype.setDistrict(res.getString(res.getColumnIndex("District")));
                maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("RetailSiteCode")));
                maDoctype.setAddress(res.getString(res.getColumnIndex("Address")));
                maDoctype.setLongi(res.getString(res.getColumnIndex("Longi")));
                maDoctype.setAreaExectiveContact(res.getString(res.getColumnIndex("AreaExectiveContact")));
                maDoctype.setNoOfDaysPass(res.getString(res.getColumnIndex("NoOfDaysPass")));
                maDoctype.setCostCentrDes(res.getString(res.getColumnIndex("CostCentrDes")));
                maDoctype.setLastVistStatus(res.getString(res.getColumnIndex("LastVistStatus")));
                maDoctype.setSequenceNo(res.getString(res.getColumnIndex("SequenceNo")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<MA_QA_Van_Tour> GetAllRouteSitesofTerritories_single(int id) {

        Log.d("ID", String.valueOf(id));
        Cursor res = null;
        List<MA_QA_Van_Tour> list = null;
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            list = new ArrayList<MA_QA_Van_Tour>();

            res = db.rawQuery("select * from Retail_sites_from_server WHERE id=" + id, null);
            Log.d("Query", String.valueOf(res));
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                MA_QA_Van_Tour maDoctype = new MA_QA_Van_Tour();
                maDoctype.setId(res.getInt(res.getColumnIndex("id")));
                maDoctype.setTerritory(res.getInt(res.getColumnIndex("Territory_id")));
                maDoctype.setAreaExective(res.getString(res.getColumnIndex("AreaExective")));
                maDoctype.setLastVistTourCode(res.getString(res.getColumnIndex("LastVistTourCode")));
                maDoctype.setRetailSiteDes(res.getString(res.getColumnIndex("RetailSiteDes")));
                maDoctype.setVisionType(res.getString(res.getColumnIndex("VisionType")));
                maDoctype.setLati(res.getString(res.getColumnIndex("Lati")));
                maDoctype.setLocation(res.getString(res.getColumnIndex("Location")));
                maDoctype.setSub_Region(res.getString(res.getColumnIndex("Sub_Region")));
                maDoctype.setPersonContacNumber(res.getString(res.getColumnIndex("PersonContacNumber")));
                maDoctype.setLastInspDate(res.getString(res.getColumnIndex("LastInspDate")));
                maDoctype.setContactPersonName(res.getString(res.getColumnIndex("ContactPersonName")));
                maDoctype.setRegion(res.getString(res.getColumnIndex("Region")));
                maDoctype.setAreaIncharge(res.getString(res.getColumnIndex("AreaIncharge")));
                maDoctype.setCostCenter(res.getString(res.getColumnIndex("CostCenter")));
                maDoctype.setAreaInchargeContact(res.getString(res.getColumnIndex("AreaInchargeContact")));
                maDoctype.setDistrict(res.getString(res.getColumnIndex("District")));
                maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("RetailSiteCode")));
                maDoctype.setAddress(res.getString(res.getColumnIndex("Address")));
                maDoctype.setLongi(res.getString(res.getColumnIndex("Longi")));
                maDoctype.setAreaExectiveContact(res.getString(res.getColumnIndex("AreaExectiveContact")));
                maDoctype.setNoOfDaysPass(res.getString(res.getColumnIndex("NoOfDaysPass")));
                maDoctype.setCostCentrDes(res.getString(res.getColumnIndex("CostCentrDes")));
                maDoctype.setLastVistStatus(res.getString(res.getColumnIndex("LastVistStatus")));
                maDoctype.setSequenceNo(res.getString(res.getColumnIndex("SequenceNo")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public Long insertQAtourPlanLocation(List<RetailSiteList> qa_van_tour_plan_location_db_model) {


        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;
        for (int i = 0; i < qa_van_tour_plan_location_db_model.size(); i++) {
            try {

                ContentValues contentValues = new ContentValues();
                contentValues.put("QVTP_id", "");
                contentValues.put("Creator_id", "");
                contentValues.put("Route_code", qa_van_tour_plan_location_db_model.get(i).getRouteCode());
                contentValues.put("Territory_id", "");
                contentValues.put("Place_id", "");

                contentValues.put("AreaExective", qa_van_tour_plan_location_db_model.get(i).getAreaExective());
                contentValues.put("RetailSiteDes", qa_van_tour_plan_location_db_model.get(i).getRetailSiteDes());
                contentValues.put("VisionType", qa_van_tour_plan_location_db_model.get(i).getVisionType());
                contentValues.put("Lati", qa_van_tour_plan_location_db_model.get(i).getLati());
                contentValues.put("Location", qa_van_tour_plan_location_db_model.get(i).getLocation());
                contentValues.put("Sub_Region", "");
                contentValues.put("LastInspDate", qa_van_tour_plan_location_db_model.get(i).getLastInspDate());
                contentValues.put("Region", qa_van_tour_plan_location_db_model.get(i).getRegion());
                contentValues.put("AreaIncharge", qa_van_tour_plan_location_db_model.get(i).getAreaIncharge());
                contentValues.put("CostCenter", qa_van_tour_plan_location_db_model.get(i).getCostCenter());
                contentValues.put("AreaInchargeContact", qa_van_tour_plan_location_db_model.get(i).getAreaInchargeContact());
                contentValues.put("District", qa_van_tour_plan_location_db_model.get(i).getDistrict());
                contentValues.put("RetailSiteCode", qa_van_tour_plan_location_db_model.get(i).getRetailSiteCode());
                contentValues.put("Address", qa_van_tour_plan_location_db_model.get(i).getAddress());
                contentValues.put("Longi", qa_van_tour_plan_location_db_model.get(i).getLongi());
                contentValues.put("AreaExectiveContact", qa_van_tour_plan_location_db_model.get(i).getAreaExectiveContact());
                contentValues.put("NoOfDaysPass", qa_van_tour_plan_location_db_model.get(i).getNoOfDaysPass());
                contentValues.put("CostCentrDes", qa_van_tour_plan_location_db_model.get(i).getCostCentrDes());
                contentValues.put("AreaInchargeRemarks", qa_van_tour_plan_location_db_model.get(i).getAIRemarks());
                contentValues.put("InspectionStatus", qa_van_tour_plan_location_db_model.get(i).getInspectionStatus());


                contentValues.put("tour_plan_status", qa_van_tour_plan_location_db_model.get(i).getPlanned_status());
                contentValues.put("dispenser_measurment_plan_id", qa_van_tour_plan_location_db_model.get(i).getDispenser_Measurment_plan());
                contentValues.put("product_quality_plan", qa_van_tour_plan_location_db_model.get(i).getProduct_Quality_plan());
                contentValues.put("tank_inspection_plan", qa_van_tour_plan_location_db_model.get(i).getTank_Inspection_plan());
                contentValues.put("sales_data_plan", qa_van_tour_plan_location_db_model.get(i).getSales_Data_plan());
                contentValues.put("stock_reconcelation_plan", qa_van_tour_plan_location_db_model.get(i).getStock_Recnocelation_plan());
                contentValues.put("general_inpection_plan", qa_van_tour_plan_location_db_model.get(i).getGeneral_Inspection_plan());

                contentValues.put("Plan_date", qa_van_tour_plan_location_db_model.get(i).getCreation_date());
                contentValues.put("Reason_id", qa_van_tour_plan_location_db_model.get(i).getReason());
                contentValues.put("Sequence_id", qa_van_tour_plan_location_db_model.get(i).getSequenceNo());
                contentValues.put("Remarks", qa_van_tour_plan_location_db_model.get(i).getRemarks());
                contentValues.put("Status", qa_van_tour_plan_location_db_model.get(i).getStatus());
                contentValues.put("s_date", qa_van_tour_plan_location_db_model.get(i).getS_date());
                contentValues.put("s_is_sync", qa_van_tour_plan_location_db_model.get(i).getS_is_sync());
                contentValues.put("s_status", qa_van_tour_plan_location_db_model.get(i).getS_status());
                contentValues.put("s_long", qa_van_tour_plan_location_db_model.get(i).getS_long());
                contentValues.put("s_lat", qa_van_tour_plan_location_db_model.get(i).getS_lat());

                idInsert = db.insert("qavan_TourPlannerLocation", null, contentValues);

            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                if (db != null)
                    db.close();
            }
        }
        return idInsert;
    }

    public Long insertQAtourPlanLocation_Single(RetailSiteList qa_van_tour_plan_location_db_model, int addition_check) {


        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;

        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("QVTP_id", "");
            contentValues.put("Creator_id", "");
            contentValues.put("Route_code", qa_van_tour_plan_location_db_model.getRouteCode());
            contentValues.put("Territory_id", "");
            contentValues.put("Place_id", "");

            contentValues.put("AreaExective", qa_van_tour_plan_location_db_model.getAreaExective());
            contentValues.put("RetailSiteDes", qa_van_tour_plan_location_db_model.getRetailSiteDes());
            contentValues.put("VisionType", qa_van_tour_plan_location_db_model.getVisionType());
            contentValues.put("Lati", qa_van_tour_plan_location_db_model.getLati());
            contentValues.put("Location", qa_van_tour_plan_location_db_model.getLocation());
            contentValues.put("Sub_Region", "");
            contentValues.put("LastInspDate", qa_van_tour_plan_location_db_model.getLastInspDate());
            contentValues.put("Region", qa_van_tour_plan_location_db_model.getRegion());
            contentValues.put("AreaIncharge", qa_van_tour_plan_location_db_model.getAreaIncharge());
            contentValues.put("CostCenter", qa_van_tour_plan_location_db_model.getCostCenter());
            contentValues.put("AreaInchargeContact", qa_van_tour_plan_location_db_model.getAreaInchargeContact());
            contentValues.put("District", qa_van_tour_plan_location_db_model.getDistrict());
            contentValues.put("RetailSiteCode", qa_van_tour_plan_location_db_model.getRetailSiteCode());
            contentValues.put("Address", qa_van_tour_plan_location_db_model.getAddress());
            contentValues.put("Longi", qa_van_tour_plan_location_db_model.getLongi());
            contentValues.put("AreaExectiveContact", qa_van_tour_plan_location_db_model.getAreaExectiveContact());
            contentValues.put("NoOfDaysPass", qa_van_tour_plan_location_db_model.getNoOfDaysPass());
            contentValues.put("CostCentrDes", qa_van_tour_plan_location_db_model.getCostCentrDes());
            contentValues.put("CostCentrDes", qa_van_tour_plan_location_db_model.getCostCentrDes());
            contentValues.put("LastVistStatus", qa_van_tour_plan_location_db_model.getLastVistStatus());
            contentValues.put("PersonContacNumber", qa_van_tour_plan_location_db_model.getPersonContacNumber());
            contentValues.put("LastVistTourCode", qa_van_tour_plan_location_db_model.getLastVistTourCode());
            contentValues.put("InspectionStatus", qa_van_tour_plan_location_db_model.getInspectionStatus());


            contentValues.put("tour_plan_status", 1); // To get from APi Pending
            contentValues.put("dispenser_measurment_plan_id", 0);
            contentValues.put("product_quality_plan", 0);
            contentValues.put("tank_inspection_plan", 0);
            contentValues.put("sales_data_plan", 0);
            contentValues.put("stock_reconcelation_plan", 0);
            contentValues.put("general_inpection_plan", 0);


            contentValues.put("AL_dispenser_measurment_plan_id", 0);
            contentValues.put("AL_product_quality_plan", 0);
            contentValues.put("AL_tank_inspection_plan", 0);
            contentValues.put("AL_sales_data_plan", 0);
            contentValues.put("AL_stock_reconcelation_plan", 0);
            contentValues.put("AL_general_inpection_plan", 0);


            if (qa_van_tour_plan_location_db_model.getNozzleMeasurementEnabled()) {
                contentValues.put("dispenser_measurment_plan_id_enable", 1);

                contentValues.put("dispenser_measurment_plan_id", 1);


            } else {
                contentValues.put("dispenser_measurment_plan_id_enable", 0);
            }

            if (qa_van_tour_plan_location_db_model.getProdQualityEnabled()) {
                contentValues.put("product_quality_plan_enable", 1);
                contentValues.put("product_quality_plan", 1);
            } else {
                contentValues.put("product_quality_plan_enable", 0);
            }

            if (qa_van_tour_plan_location_db_model.getAplProdStatusEnabled()) {

                contentValues.put("stock_reconcelation_plan_enable", Integer.parseInt(String.valueOf(1)));
                contentValues.put("stock_reconcelation_plan", 1);


            } else {
                contentValues.put("stock_reconcelation_plan_enable", 0);
            }

            contentValues.put("sales_data_plan_enable", Integer.parseInt(String.valueOf(0)));
            contentValues.put("tank_inspection_plan_enable", Integer.parseInt(String.valueOf(1)));

            if (qa_van_tour_plan_location_db_model.getGeneralInspEnabled()) {
                contentValues.put("general_inpection_plan_enable", 1);


                contentValues.put("general_inpection_plan", 1);

            } else {
                contentValues.put("general_inpection_plan_enable", 0);
            }


            if (addition_check == 1) {

                if (qa_van_tour_plan_location_db_model.getDispenser_Measurment_plan_default() == 1) {
                    contentValues.put("dispenser_measurment_plan_id_default", 1);

                    contentValues.put("dispenser_measurment_plan_id", 1);

                } else {
                    contentValues.put("dispenser_measurment_plan_id_default", 0);
                }

                if (qa_van_tour_plan_location_db_model.getProduct_Quality_plan_default() == 1) {
                    contentValues.put("product_quality_plan_default", 1);
                    contentValues.put("product_quality_plan", 1);


                } else {
                    contentValues.put("product_quality_plan_default", 0);
                }

                if (qa_van_tour_plan_location_db_model.getTank_Inspection_plan_default() == 1) {

                    contentValues.put("stock_reconcelation_plan_default", Integer.parseInt(String.valueOf(1)));
                    contentValues.put("stock_reconcelation_plan", 1);

                } else {
                    contentValues.put("stock_reconcelation_plan_default", 0);
                }

                contentValues.put("sales_data_plan_default", Integer.parseInt(String.valueOf(0)));
                contentValues.put("tank_inspection_plan_default", Integer.parseInt(String.valueOf(1)));

                if (qa_van_tour_plan_location_db_model.getGeneral_Inspection_plan_default() == 1) {
                    contentValues.put("general_inpection_plan_default", 1);


                    contentValues.put("general_inpection_plan", 1);

                } else {
                    contentValues.put("general_inpection_plan_default", 0);
                }


            } else {
                if (qa_van_tour_plan_location_db_model.getNozzleMeasurementDefault()) {
                    contentValues.put("dispenser_measurment_plan_id_default", 1);


                    contentValues.put("dispenser_measurment_plan_id", 1);


                } else {
                    contentValues.put("dispenser_measurment_plan_id_default", 0);
                }

                if (qa_van_tour_plan_location_db_model.getProdQualityEnabled()) {
                    contentValues.put("product_quality_plan_default", 1);


                    contentValues.put("product_quality_plan", 1);


                } else {
                    contentValues.put("product_quality_plan_default", 0);
                }

                if (qa_van_tour_plan_location_db_model.getAplProdStatusDefault()) {


                    contentValues.put("stock_reconcelation_plan_default", Integer.parseInt(String.valueOf(1)));
                    contentValues.put("stock_reconcelation_plan", 1);


                } else {
                    contentValues.put("stock_reconcelation_plan_default", 0);
                }
                contentValues.put("sales_data_plan_default", Integer.parseInt(String.valueOf(0)));
                contentValues.put("tank_inspection_plan_default", Integer.parseInt(String.valueOf(1)));

                if (qa_van_tour_plan_location_db_model.getGeneralInspDefault()) {
                    contentValues.put("general_inpection_plan_default", 1);


                    contentValues.put("general_inpection_plan", 1);

                } else {
                    contentValues.put("general_inpection_plan_default", 0);
                }

            }

            contentValues.put("InspectionStatus", qa_van_tour_plan_location_db_model.getInspectionStatus());

            contentValues.put("Plan_date", qa_van_tour_plan_location_db_model.getCreation_date());
            contentValues.put("Reason_id", "Site Inspection");
            contentValues.put("Sequence_id", qa_van_tour_plan_location_db_model.getSequenceNo());
            contentValues.put("Remarks", qa_van_tour_plan_location_db_model.getRemarks());
            contentValues.put("AreaInchargeRemarks", qa_van_tour_plan_location_db_model.getAIRemarks());
            contentValues.put("Status", qa_van_tour_plan_location_db_model.getStatus());
            contentValues.put("isAdditionSite", addition_check);
            contentValues.put("s_date", qa_van_tour_plan_location_db_model.getS_date());
            contentValues.put("s_is_sync", qa_van_tour_plan_location_db_model.getS_is_sync());
            contentValues.put("s_status", qa_van_tour_plan_location_db_model.getS_status());
            contentValues.put("s_long", qa_van_tour_plan_location_db_model.getS_long());
            contentValues.put("s_lat", qa_van_tour_plan_location_db_model.getS_lat());

            idInsert = db.insert("qavan_TourPlannerLocation", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }


    public List<RetailSiteList> GetAllRetailSites_AfterPlanned_For_Color_Change_of_Number_NotAdditional() {


        Cursor res = null;
        SQLiteDatabase db = null;
        List<RetailSiteList> list = null;
        try {
            list = new ArrayList<RetailSiteList>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from qavan_TourPlannerLocation WHERE isAdditionSite =" + 0, null);
            Log.d("Query", String.valueOf(res));
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                RetailSiteList maDoctype = new RetailSiteList();
                maDoctype.setId(res.getInt(res.getColumnIndex("id")));
                //   maDoctype.setQVan_plan_id_local(res.getString(res.getColumnIndex("QVTP_id")));
                //   maDoctype.setCreator_id(res.getString(res.getColumnIndex("Creator_id")));
                //   maDoctype.setTerritory_id(res.getString(res.getColumnIndex("Territory_id")));
                //   maDoctype.setPlace_id(res.getString(res.getColumnIndex("Place_id")));
                maDoctype.setAreaExective(res.getString(res.getColumnIndex("AreaExective")));
                maDoctype.setRetailSiteDes(res.getString(res.getColumnIndex("RetailSiteDes")));
                maDoctype.setVisionType(res.getString(res.getColumnIndex("VisionType")));
                maDoctype.setLati(res.getString(res.getColumnIndex("Lati")));
                maDoctype.setLocation(res.getString(res.getColumnIndex("Location")));
                //    maDoctype.setSub_Region(res.getString(res.getColumnIndex("Sub_Region")));
                maDoctype.setLastInspDate(res.getString(res.getColumnIndex("LastInspDate")));
                maDoctype.setRegion(res.getString(res.getColumnIndex("Region")));
                maDoctype.setAreaIncharge(res.getString(res.getColumnIndex("AreaIncharge")));
                maDoctype.setCostCenter(res.getString(res.getColumnIndex("CostCenter")));
                maDoctype.setAreaInchargeContact(res.getString(res.getColumnIndex("AreaInchargeContact")));
                maDoctype.setDistrict(res.getString(res.getColumnIndex("District")));
                maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("RetailSiteCode")));
                maDoctype.setAddress(res.getString(res.getColumnIndex("Address")));
                maDoctype.setLongi(res.getString(res.getColumnIndex("Longi")));
                maDoctype.setAreaExectiveContact(res.getString(res.getColumnIndex("AreaExectiveContact")));
                maDoctype.setNoOfDaysPass(res.getString(res.getColumnIndex("NoOfDaysPass")));
                maDoctype.setCostCentrDes(res.getString(res.getColumnIndex("CostCentrDes")));
                maDoctype.setPlanned_status(res.getInt(res.getColumnIndex("tour_plan_status")));
                maDoctype.setLastVistStatus(res.getString(res.getColumnIndex("LastVistStatus")));
                maDoctype.setPersonContacNumber(res.getString(res.getColumnIndex("PersonContacNumber")));
                //   maDoctype.setNoOfDaysPass(res.getString(res.getColumnIndex("Creation_date")));
                maDoctype.setLastVistTourCode(res.getString(res.getColumnIndex("LastVistTourCode")));
                maDoctype.setInspectionStatus(res.getString(res.getColumnIndex("InspectionStatus")));
                //   maDoctype.setAlRemarks(res.getString(res.getColumnIndex("AreaInchargeRemarks")));

                maDoctype.setDispenser_Measurment_plan(res.getInt(res.getColumnIndex("dispenser_measurment_plan_id")));
                maDoctype.setProduct_Quality_plan(res.getInt(res.getColumnIndex("product_quality_plan")));
                maDoctype.setTank_Inspection_plan(res.getInt(res.getColumnIndex("tank_inspection_plan")));
                maDoctype.setSales_Data_plan(res.getInt(res.getColumnIndex("sales_data_plan")));
                maDoctype.setStock_Recnocelation_plan(res.getInt(res.getColumnIndex("stock_reconcelation_plan")));
                maDoctype.setGeneral_Inspection_plan(res.getInt(res.getColumnIndex("general_inpection_plan")));

//                maDoctype.setAL_Dispenser_Measurment_plan(res.getInt(res.getColumnIndex("AL_dispenser_measurment_plan_id")));
//                maDoctype.setAL_Product_Quality_plan(res.getInt(res.getColumnIndex("AL_product_quality_plan")));
//                maDoctype.setAL_Tank_Inspection_plan(res.getInt(res.getColumnIndex("AL_tank_inspection_plan")));
//                maDoctype.setAL_Sales_Data_plan(res.getInt(res.getColumnIndex("AL_sales_data_plan")));
//                maDoctype.setAL_Stock_Recnocelation_plan(res.getInt(res.getColumnIndex("AL_stock_reconcelation_plan")));
//                maDoctype.setAL_General_Inspection_plan(res.getInt(res.getColumnIndex("AL_general_inpection_plan")));

                maDoctype.setDispenser_Measurment_plan_default(res.getInt(res.getColumnIndex("dispenser_measurment_plan_id_default")));
                maDoctype.setProduct_Quality_plan_default(res.getInt(res.getColumnIndex("product_quality_plan_default")));
                maDoctype.setTank_Inspection_plan_default(res.getInt(res.getColumnIndex("tank_inspection_plan_default")));
                maDoctype.setSales_Data_plan_default(res.getInt(res.getColumnIndex("sales_data_plan_default")));
                maDoctype.setStock_Recnocelation_plan_default(res.getInt(res.getColumnIndex("stock_reconcelation_plan_default")));
                maDoctype.setGeneral_Inspection_plan_default(res.getInt(res.getColumnIndex("general_inpection_plan_default")));

//                maDoctype.setDispenser_Measurment_plan_enable(res.getInt(res.getColumnIndex("dispenser_measurment_plan_id_enable")));
//                maDoctype.setProduct_Quality_plan_enable(res.getInt(res.getColumnIndex("product_quality_plan_enable")));
//                maDoctype.setTank_Inspection_plan_enable(res.getInt(res.getColumnIndex("tank_inspection_plan_enable")));
//                maDoctype.setSales_Data_plan_enable(res.getInt(res.getColumnIndex("sales_data_plan_enable")));
//                maDoctype.setStock_Recnocelation_plan_enable(res.getInt(res.getColumnIndex("stock_reconcelation_plan_enable")));
//                maDoctype.setGeneral_Inspection_plan_enable(res.getInt(res.getColumnIndex("general_inpection_plan_enable")));

                maDoctype.setCreation_date(res.getString(res.getColumnIndex("Plan_date")));
                maDoctype.setReason(res.getString(res.getColumnIndex("Reason_id")));
                //               maDoctype.setSequenceNo(res.getInt(res.getColumnIndex("Sequence_id")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setStatus(res.getString(res.getColumnIndex("Status")));
                maDoctype.setS_date(res.getString(res.getColumnIndex("s_date")));
                maDoctype.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                maDoctype.setS_status(res.getInt(res.getColumnIndex("s_status")));
                maDoctype.setS_long(res.getString(res.getColumnIndex("s_long")));
                maDoctype.setS_lat(res.getString(res.getColumnIndex("s_lat")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<RetailSiteList> GetAllRetailSites_AfterPlanned_For_Color_Change_of_Number_WithAdditional() {


        Cursor res = null;
        SQLiteDatabase db = null;
        List<RetailSiteList> list = null;
        try {
            list = new ArrayList<RetailSiteList>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from qavan_TourPlannerLocation WHERE isAdditionSite =" + 1, null);
            Log.d("Query", String.valueOf(res));
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                RetailSiteList maDoctype = new RetailSiteList();
                maDoctype.setId(res.getInt(res.getColumnIndex("id")));
                //   maDoctype.setQVan_plan_id_local(res.getString(res.getColumnIndex("QVTP_id")));
                //   maDoctype.setCreator_id(res.getString(res.getColumnIndex("Creator_id")));
                //   maDoctype.setTerritory_id(res.getString(res.getColumnIndex("Territory_id")));
                //   maDoctype.setPlace_id(res.getString(res.getColumnIndex("Place_id")));
                maDoctype.setAreaExective(res.getString(res.getColumnIndex("AreaExective")));
                maDoctype.setRetailSiteDes(res.getString(res.getColumnIndex("RetailSiteDes")));
                maDoctype.setVisionType(res.getString(res.getColumnIndex("VisionType")));
                maDoctype.setLati(res.getString(res.getColumnIndex("Lati")));
                maDoctype.setLocation(res.getString(res.getColumnIndex("Location")));
                //    maDoctype.setSub_Region(res.getString(res.getColumnIndex("Sub_Region")));
                maDoctype.setLastInspDate(res.getString(res.getColumnIndex("LastInspDate")));
                maDoctype.setRegion(res.getString(res.getColumnIndex("Region")));
                maDoctype.setAreaIncharge(res.getString(res.getColumnIndex("AreaIncharge")));
                maDoctype.setCostCenter(res.getString(res.getColumnIndex("CostCenter")));
                maDoctype.setAreaInchargeContact(res.getString(res.getColumnIndex("AreaInchargeContact")));
                maDoctype.setDistrict(res.getString(res.getColumnIndex("District")));
                maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("RetailSiteCode")));
                maDoctype.setAddress(res.getString(res.getColumnIndex("Address")));
                maDoctype.setLongi(res.getString(res.getColumnIndex("Longi")));
                maDoctype.setAreaExectiveContact(res.getString(res.getColumnIndex("AreaExectiveContact")));
                maDoctype.setNoOfDaysPass(res.getString(res.getColumnIndex("NoOfDaysPass")));
                maDoctype.setCostCentrDes(res.getString(res.getColumnIndex("CostCentrDes")));
                maDoctype.setPlanned_status(res.getInt(res.getColumnIndex("tour_plan_status")));
                maDoctype.setLastVistStatus(res.getString(res.getColumnIndex("LastVistStatus")));
                maDoctype.setPersonContacNumber(res.getString(res.getColumnIndex("PersonContacNumber")));
                //   maDoctype.setNoOfDaysPass(res.getString(res.getColumnIndex("Creation_date")));
                maDoctype.setLastVistTourCode(res.getString(res.getColumnIndex("LastVistTourCode")));
                maDoctype.setInspectionStatus(res.getString(res.getColumnIndex("InspectionStatus")));

                //   maDoctype.setAlRemarks(res.getString(res.getColumnIndex("AreaInchargeRemarks")));

                maDoctype.setDispenser_Measurment_plan(res.getInt(res.getColumnIndex("dispenser_measurment_plan_id")));
                maDoctype.setProduct_Quality_plan(res.getInt(res.getColumnIndex("product_quality_plan")));
                maDoctype.setTank_Inspection_plan(res.getInt(res.getColumnIndex("tank_inspection_plan")));
                maDoctype.setSales_Data_plan(res.getInt(res.getColumnIndex("sales_data_plan")));
                maDoctype.setStock_Recnocelation_plan(res.getInt(res.getColumnIndex("stock_reconcelation_plan")));
                maDoctype.setGeneral_Inspection_plan(res.getInt(res.getColumnIndex("general_inpection_plan")));

//                maDoctype.setAL_Dispenser_Measurment_plan(res.getInt(res.getColumnIndex("AL_dispenser_measurment_plan_id")));
//                maDoctype.setAL_Product_Quality_plan(res.getInt(res.getColumnIndex("AL_product_quality_plan")));
//                maDoctype.setAL_Tank_Inspection_plan(res.getInt(res.getColumnIndex("AL_tank_inspection_plan")));
//                maDoctype.setAL_Sales_Data_plan(res.getInt(res.getColumnIndex("AL_sales_data_plan")));
//                maDoctype.setAL_Stock_Recnocelation_plan(res.getInt(res.getColumnIndex("AL_stock_reconcelation_plan")));
//                maDoctype.setAL_General_Inspection_plan(res.getInt(res.getColumnIndex("AL_general_inpection_plan")));

                maDoctype.setDispenser_Measurment_plan_default(res.getInt(res.getColumnIndex("dispenser_measurment_plan_id_default")));
                maDoctype.setProduct_Quality_plan_default(res.getInt(res.getColumnIndex("product_quality_plan_default")));
                maDoctype.setTank_Inspection_plan_default(res.getInt(res.getColumnIndex("tank_inspection_plan_default")));
                maDoctype.setSales_Data_plan_default(res.getInt(res.getColumnIndex("sales_data_plan_default")));
                maDoctype.setStock_Recnocelation_plan_default(res.getInt(res.getColumnIndex("stock_reconcelation_plan_default")));
                maDoctype.setGeneral_Inspection_plan_default(res.getInt(res.getColumnIndex("general_inpection_plan_default")));

//                maDoctype.setDispenser_Measurment_plan_enable(res.getInt(res.getColumnIndex("dispenser_measurment_plan_id_enable")));
//                maDoctype.setProduct_Quality_plan_enable(res.getInt(res.getColumnIndex("product_quality_plan_enable")));
//                maDoctype.setTank_Inspection_plan_enable(res.getInt(res.getColumnIndex("tank_inspection_plan_enable")));
//                maDoctype.setSales_Data_plan_enable(res.getInt(res.getColumnIndex("sales_data_plan_enable")));
//                maDoctype.setStock_Recnocelation_plan_enable(res.getInt(res.getColumnIndex("stock_reconcelation_plan_enable")));
//                maDoctype.setGeneral_Inspection_plan_enable(res.getInt(res.getColumnIndex("general_inpection_plan_enable")));

                maDoctype.setCreation_date(res.getString(res.getColumnIndex("Plan_date")));
                maDoctype.setReason(res.getString(res.getColumnIndex("Reason_id")));
                //               maDoctype.setSequenceNo(res.getInt(res.getColumnIndex("Sequence_id")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setStatus(res.getString(res.getColumnIndex("Status")));
                maDoctype.setS_date(res.getString(res.getColumnIndex("s_date")));
                maDoctype.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                maDoctype.setS_status(res.getInt(res.getColumnIndex("s_status")));
                maDoctype.setS_long(res.getString(res.getColumnIndex("s_long")));
                maDoctype.setS_lat(res.getString(res.getColumnIndex("s_lat")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }


    public Long insertQAtourPlanInspectionLocation(List<RetailSitesforInspection> qa_van_tour_plan_location_db_model) {


        SQLiteDatabase db = null;
        Long idInsert = -1L;
        for (int i = 0; i < qa_van_tour_plan_location_db_model.size(); i++) {
            try {
                db = this.getReadableDatabase();
                ContentValues contentValues = new ContentValues();
                contentValues.put("QVTP_id", "");
                contentValues.put("Creator_id", "");
                contentValues.put("Route_code", qa_van_tour_plan_location_db_model.get(i).getRouteCode());
                contentValues.put("Territory_id", "");
                contentValues.put("Place_id", "");

                contentValues.put("AreaExective", qa_van_tour_plan_location_db_model.get(i).getAreaExective());
                contentValues.put("RetailSiteDes", qa_van_tour_plan_location_db_model.get(i).getRetailSiteDes());
                contentValues.put("VisionType", qa_van_tour_plan_location_db_model.get(i).getVisionType());
                contentValues.put("Lati", qa_van_tour_plan_location_db_model.get(i).getLati());
                contentValues.put("Location", qa_van_tour_plan_location_db_model.get(i).getLocation());
                contentValues.put("Sub_Region", "");
                contentValues.put("LastInspDate", qa_van_tour_plan_location_db_model.get(i).getLastInspDate());
                contentValues.put("Region", qa_van_tour_plan_location_db_model.get(i).getRegion());
                contentValues.put("AreaIncharge", qa_van_tour_plan_location_db_model.get(i).getAreaIncharge());
                contentValues.put("CostCenter", qa_van_tour_plan_location_db_model.get(i).getCostCenter());
                contentValues.put("AreaInchargeContact", qa_van_tour_plan_location_db_model.get(i).getAreaInchargeContact());
                contentValues.put("District", qa_van_tour_plan_location_db_model.get(i).getDistrict());
                contentValues.put("RetailSiteCode", qa_van_tour_plan_location_db_model.get(i).getRetailSiteCode());
                contentValues.put("Address", qa_van_tour_plan_location_db_model.get(i).getAddress());
                contentValues.put("Longi", qa_van_tour_plan_location_db_model.get(i).getLongi());
                contentValues.put("AreaExectiveContact", qa_van_tour_plan_location_db_model.get(i).getAreaExectiveContact());
                contentValues.put("NoOfDaysPass", qa_van_tour_plan_location_db_model.get(i).getNoOfDaysPass());
                contentValues.put("CostCentrDes", qa_van_tour_plan_location_db_model.get(i).getCostCentrDes());


                contentValues.put("tour_plan_status", qa_van_tour_plan_location_db_model.get(i).getPlanned_status());
                contentValues.put("dispenser_measurment_plan_id", qa_van_tour_plan_location_db_model.get(i).getDispenser_Measurment_plan());
                contentValues.put("product_quality_plan", qa_van_tour_plan_location_db_model.get(i).getProduct_Quality_plan());
                contentValues.put("tank_inspection_plan", qa_van_tour_plan_location_db_model.get(i).getTank_Inspection_plan());
                contentValues.put("sales_data_plan", qa_van_tour_plan_location_db_model.get(i).getSales_Data_plan());
                contentValues.put("stock_reconcelation_plan", qa_van_tour_plan_location_db_model.get(i).getStock_Recnocelation_plan());
                contentValues.put("general_inpection_plan", qa_van_tour_plan_location_db_model.get(i).getGeneral_Inspection_plan());
                contentValues.put("isAdditionSite", qa_van_tour_plan_location_db_model.get(i).getIsAdditionSite());
                contentValues.put("Plan_date", qa_van_tour_plan_location_db_model.get(i).getCreation_date());
                contentValues.put("Reason_id", qa_van_tour_plan_location_db_model.get(i).getReason());
                contentValues.put("Sequence_id", qa_van_tour_plan_location_db_model.get(i).getSequenceNo());
                contentValues.put("Remarks", qa_van_tour_plan_location_db_model.get(i).getRemarks());
                contentValues.put("AreaInchargeRemarks", qa_van_tour_plan_location_db_model.get(i).getAIRemarks());
                contentValues.put("Status", qa_van_tour_plan_location_db_model.get(i).getStatus());
                contentValues.put("s_date", qa_van_tour_plan_location_db_model.get(i).getS_date());
                contentValues.put("s_is_sync", qa_van_tour_plan_location_db_model.get(i).getS_is_sync());
                contentValues.put("s_status", qa_van_tour_plan_location_db_model.get(i).getS_status());
                contentValues.put("s_long", qa_van_tour_plan_location_db_model.get(i).getS_long());
                contentValues.put("s_lat", qa_van_tour_plan_location_db_model.get(i).getS_lat());

                idInsert = db.insert("qavan_TourPlannerLocation", null, contentValues);

            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                if (db != null)
                    db.close();
            }
        }
        return idInsert;
    }

    public Long insertQAtourPlanInspectionLocationApprovalStage(String planid, String createrid, String territoryid, List<RetailSitesforInspection> qa_van_tour_plan_location_db_model) {

        SQLiteDatabase db = null;
        Long idInsert = -1L;
        for (int i = 0; i < qa_van_tour_plan_location_db_model.size(); i++) {
            try {
                db = this.getReadableDatabase();
                ContentValues contentValues = new ContentValues();
                contentValues.put("QVTP_id", planid);
                contentValues.put("Creator_id", createrid);
                contentValues.put("Route_code", qa_van_tour_plan_location_db_model.get(i).getRouteCode());
                contentValues.put("Territory_id", territoryid);
                contentValues.put("Place_id", qa_van_tour_plan_location_db_model.get(i).getRetailSiteCode());

                contentValues.put("AreaExective", qa_van_tour_plan_location_db_model.get(i).getAreaExective());
                contentValues.put("RetailSiteDes", qa_van_tour_plan_location_db_model.get(i).getRetailSiteDes());
                contentValues.put("VisionType", qa_van_tour_plan_location_db_model.get(i).getVisionType());
                contentValues.put("Lati", qa_van_tour_plan_location_db_model.get(i).getLati());
                contentValues.put("Location", qa_van_tour_plan_location_db_model.get(i).getLocation());
                contentValues.put("Sub_Region", "");
                contentValues.put("LastInspDate", qa_van_tour_plan_location_db_model.get(i).getLastInspDate());
                contentValues.put("Region", qa_van_tour_plan_location_db_model.get(i).getRegion());
                contentValues.put("AreaIncharge", qa_van_tour_plan_location_db_model.get(i).getAreaIncharge());
                contentValues.put("CostCenter", qa_van_tour_plan_location_db_model.get(i).getCostCenter());
                contentValues.put("AreaInchargeContact", qa_van_tour_plan_location_db_model.get(i).getAreaInchargeContact());
                contentValues.put("District", qa_van_tour_plan_location_db_model.get(i).getDistrict());
                contentValues.put("RetailSiteCode", qa_van_tour_plan_location_db_model.get(i).getRetailSiteCode());
                contentValues.put("Address", qa_van_tour_plan_location_db_model.get(i).getAddress());
                contentValues.put("Longi", qa_van_tour_plan_location_db_model.get(i).getLongi());
                contentValues.put("AreaExectiveContact", qa_van_tour_plan_location_db_model.get(i).getAreaExectiveContact());
                contentValues.put("NoOfDaysPass", qa_van_tour_plan_location_db_model.get(i).getNoOfDaysPass());
                contentValues.put("CostCentrDes", qa_van_tour_plan_location_db_model.get(i).getCostCentrDes());
                contentValues.put("LastVistStatus", qa_van_tour_plan_location_db_model.get(i).getLastVistStatus());
                contentValues.put("InspectionStatus", qa_van_tour_plan_location_db_model.get(i).getInspectionStatus());
                contentValues.put("LastVistTourCode", qa_van_tour_plan_location_db_model.get(i).getLastVistTourCode());

                if (qa_van_tour_plan_location_db_model.get(i).getPlanned_status().equalsIgnoreCase("1")) {
                    contentValues.put("tour_plan_status", 1);
                } else {
                    contentValues.put("tour_plan_status", 0);
                }

                if (qa_van_tour_plan_location_db_model.get(i).getDispenser_Measurment_plan().equalsIgnoreCase("1")) {
                    contentValues.put("dispenser_measurment_plan_id", 1);
                } else {
                    contentValues.put("dispenser_measurment_plan_id", 0);
                }
                if (qa_van_tour_plan_location_db_model.get(i).getProduct_Quality_plan().equalsIgnoreCase("1")) {
                    contentValues.put("product_quality_plan", 1);
                } else {
                    contentValues.put("product_quality_plan", 0);
                }
                if (qa_van_tour_plan_location_db_model.get(i).getTank_Inspection_plan().equalsIgnoreCase("1")) {
                    contentValues.put("tank_inspection_plan", 1);
                } else {
                    contentValues.put("tank_inspection_plan", 0);
                }
                if (qa_van_tour_plan_location_db_model.get(i).getSales_Data_plan().equalsIgnoreCase("1")) {
                    contentValues.put("sales_data_plan", 1);
                } else {
                    contentValues.put("sales_data_plan", 0);
                }
                if (qa_van_tour_plan_location_db_model.get(i).getStock_Recnocelation_plan().equalsIgnoreCase("1")) {
                    contentValues.put("stock_reconcelation_plan", 1);
                } else {
                    contentValues.put("stock_reconcelation_plan", 0);
                }
                if (qa_van_tour_plan_location_db_model.get(i).getGeneral_Inspection_plan().equalsIgnoreCase("1")) {
                    contentValues.put("general_inpection_plan", 1);
                } else {
                    contentValues.put("general_inpection_plan", 0);
                }


                if (qa_van_tour_plan_location_db_model.get(i).getIsAINozzelMeasure().equalsIgnoreCase("1")) {
                    contentValues.put("AL_dispenser_measurment_plan_id", 1);
                } else {
                    contentValues.put("AL_dispenser_measurment_plan_id", 0);
                }
                if (qa_van_tour_plan_location_db_model.get(i).getIsAIProdQualityTest().equalsIgnoreCase("1")) {
                    contentValues.put("AL_product_quality_plan", 1);
                } else {
                    contentValues.put("AL_product_quality_plan", 0);
                }
                contentValues.put("AL_tank_inspection_plan", 1);
//                if(qa_van_tour_plan_location_db_model.get(i).getIsAIAPLProdStatus().equalsIgnoreCase("1"))
//                {
//                    contentValues.put("AL_tank_inspection_plan", 1);
//                }
//                else {
//                    contentValues.put("AL_tank_inspection_plan", 0);
//                }
                if (qa_van_tour_plan_location_db_model.get(i).getSales_Data_plan().equalsIgnoreCase("1")) {
                    contentValues.put("AL_sales_data_plan", 1);
                } else {
                    contentValues.put("AL_sales_data_plan", 0);
                }
                if (qa_van_tour_plan_location_db_model.get(i).getIsAIAPLProdStatus().equalsIgnoreCase("1")) {
                    contentValues.put("AL_stock_reconcelation_plan", 1);
                } else {
                    contentValues.put("AL_stock_reconcelation_plan", 0);
                }
                if (qa_van_tour_plan_location_db_model.get(i).getIsAIGenInsp().equalsIgnoreCase("1")) {
                    contentValues.put("AL_general_inpection_plan", 1);
                } else {
                    contentValues.put("AL_general_inpection_plan", 0);
                }


                if (qa_van_tour_plan_location_db_model.get(i).getNozzleMeasurementDefault()) {
                    contentValues.put("dispenser_measurment_plan_id_default", 1);
                } else {
                    contentValues.put("dispenser_measurment_plan_id_default", 0);
                }
                if (qa_van_tour_plan_location_db_model.get(i).getProdQualityDefault()) {
                    contentValues.put("product_quality_plan_default", 1);
                } else {
                    contentValues.put("product_quality_plan_default", 0);
                }
                if (qa_van_tour_plan_location_db_model.get(i).getAplProdStatusDefault()) {
                    contentValues.put("stock_reconcelation_plan_default", 1);
                } else {
                    contentValues.put("stock_reconcelation_plan_default", 0);
                }
                contentValues.put("sales_data_plan_default", 0);
                contentValues.put("tank_inspection_plan_default", 1);
                if (qa_van_tour_plan_location_db_model.get(i).getGeneralInspDefault()) {
                    contentValues.put("general_inpection_plan_default", 1);
                } else {
                    contentValues.put("general_inpection_plan_default", 0);
                }


                if (qa_van_tour_plan_location_db_model.get(i).getNozzleMeasurementEnabled()) {
                    contentValues.put("dispenser_measurment_plan_id_enable", 1);
                } else {
                    contentValues.put("dispenser_measurment_plan_id_enable", 0);
                }
                if (qa_van_tour_plan_location_db_model.get(i).getProdQualityEnabled()) {
                    contentValues.put("product_quality_plan_enable", 1);
                } else {
                    contentValues.put("product_quality_plan_enable", 0);
                }
                if (qa_van_tour_plan_location_db_model.get(i).getAplProdStatusEnabled()) {

                    contentValues.put("stock_reconcelation_plan_enable", 1);
                } else {
                    contentValues.put("stock_reconcelation_plan_enable", 0);
                }


                contentValues.put("sales_data_plan_enable", 0);
                contentValues.put("tank_inspection_plan_enable", 1);
                if (qa_van_tour_plan_location_db_model.get(i).getGeneralInspEnabled()) {
                    contentValues.put("general_inpection_plan_enable", 1);
                } else {
                    contentValues.put("general_inpection_plan_enable", 0);
                }


                contentValues.put("isAdditionSite", qa_van_tour_plan_location_db_model.get(i).getIsAdditionSite());
                contentValues.put("Plan_date", qa_van_tour_plan_location_db_model.get(i).getCreation_date());
                contentValues.put("Reason_id", qa_van_tour_plan_location_db_model.get(i).getReason());
                contentValues.put("Sequence_id", qa_van_tour_plan_location_db_model.get(i).getSequenceNo());
                contentValues.put("Remarks", qa_van_tour_plan_location_db_model.get(i).getRemarks());
                contentValues.put("AreaInchargeRemarks", qa_van_tour_plan_location_db_model.get(i).getAIRemarks());
                contentValues.put("Status", qa_van_tour_plan_location_db_model.get(i).getStatus());
                contentValues.put("s_date", qa_van_tour_plan_location_db_model.get(i).getS_date());
                contentValues.put("s_is_sync", qa_van_tour_plan_location_db_model.get(i).getS_is_sync());
                contentValues.put("s_status", qa_van_tour_plan_location_db_model.get(i).getS_status());
                contentValues.put("s_long", qa_van_tour_plan_location_db_model.get(i).getS_long());
                contentValues.put("s_lat", qa_van_tour_plan_location_db_model.get(i).getS_lat());

                idInsert = db.insert("qavan_TourPlannerLocation", null, contentValues);

            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                if (db != null)
                    db.close();
            }
        }
        return idInsert;
    }


    public List<QA_Van_Tour_Plan_Location_DB_Model> GetAllQAtourPlanLocation(List<String> id, String territory_id) {

        // Log.d("ID",String.valueOf(id));
        Cursor res = null;
        List<QA_Van_Tour_Plan_Location_DB_Model> list = new ArrayList<QA_Van_Tour_Plan_Location_DB_Model>();

        SQLiteDatabase db = this.getReadableDatabase();

        for (int i = 0; i < id.size(); i++) {
            try {

                res = db.rawQuery("select * from qavan_TourPlannerLocation WHERE Territory_id='" + territory_id + "'" + " AND Route_code='" + id.get(i) + "'", null);
                res.moveToFirst();

                while (res.isAfterLast() == false) {
                    QA_Van_Tour_Plan_Location_DB_Model maDoctype = new QA_Van_Tour_Plan_Location_DB_Model();
                    maDoctype.setId(res.getInt(res.getColumnIndex("id")));
                    maDoctype.setQVan_plan_id_local(res.getString(res.getColumnIndex("QVTP_id")));
                    maDoctype.setCreator_id(res.getString(res.getColumnIndex("Creator_id")));
                    maDoctype.setTerritory_id(res.getString(res.getColumnIndex("Territory_id")));
                    maDoctype.setQvan_RouteSite_id(res.getString(res.getColumnIndex("Route_code")));
                    maDoctype.setPlace_id(res.getString(res.getColumnIndex("Place_id")));
                    maDoctype.setAreaExective(res.getString(res.getColumnIndex("AreaExective")));
                    maDoctype.setRetailSiteDes(res.getString(res.getColumnIndex("RetailSiteDes")));
                    maDoctype.setVisionType(res.getString(res.getColumnIndex("VisionType")));
                    maDoctype.setLati(res.getString(res.getColumnIndex("Lati")));
                    maDoctype.setLocation(res.getString(res.getColumnIndex("Location")));
                    maDoctype.setSub_Region(res.getString(res.getColumnIndex("Sub_Region")));
                    maDoctype.setLastInspDate(res.getString(res.getColumnIndex("LastInspDate")));
                    maDoctype.setRegion(res.getString(res.getColumnIndex("Region")));
                    maDoctype.setAreaIncharge(res.getString(res.getColumnIndex("AreaIncharge")));
                    maDoctype.setCostCenter(res.getString(res.getColumnIndex("CostCenter")));
                    maDoctype.setAreaInchargeContact(res.getString(res.getColumnIndex("AreaInchargeContact")));
                    maDoctype.setDistrict(res.getString(res.getColumnIndex("District")));
                    maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("RetailSiteCode")));
                    maDoctype.setAddress(res.getString(res.getColumnIndex("Address")));
                    maDoctype.setLongi(res.getString(res.getColumnIndex("Longi")));
                    maDoctype.setInspection_status(res.getString(res.getColumnIndex("InspectionStatus")));

                    maDoctype.setAreaExectiveContact(res.getString(res.getColumnIndex("AreaExectiveContact")));
                    maDoctype.setNoOfDaysPass(res.getString(res.getColumnIndex("NoOfDaysPass")));
                    maDoctype.setCostCentrDes(res.getString(res.getColumnIndex("CostCentrDes")));
                    maDoctype.setPlanned_status(res.getInt(res.getColumnIndex("tour_plan_status")));
                    maDoctype.setDispenser_Measurment_plan(res.getInt(res.getColumnIndex("dispenser_measurment_plan_id")));
                    maDoctype.setProduct_Quality_plan(res.getInt(res.getColumnIndex("product_quality_plan")));
                    maDoctype.setTank_Inspection_plan(res.getInt(res.getColumnIndex("tank_inspection_plan")));
                    maDoctype.setSales_Data_plan(res.getInt(res.getColumnIndex("sales_data_plan")));
                    maDoctype.setStock_Recnocelation_plan(res.getInt(res.getColumnIndex("stock_reconcelation_plan")));
                    maDoctype.setGeneral_Inspection_plan(res.getInt(res.getColumnIndex("general_inpection_plan")));
                    maDoctype.setCreation_date(res.getString(res.getColumnIndex("Plan_date")));
                    maDoctype.setReason(res.getString(res.getColumnIndex("Reason_id")));
                    maDoctype.setSequenceNo(res.getInt(res.getColumnIndex("Sequence_id")));
                    maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                    maDoctype.setAlRemarks(res.getString(res.getColumnIndex("AreaInchargeRemarks")));
                    maDoctype.setStatus(res.getString(res.getColumnIndex("Status")));
                    maDoctype.setS_date(res.getString(res.getColumnIndex("s_date")));
                    maDoctype.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                    maDoctype.setS_status(res.getInt(res.getColumnIndex("s_status")));
                    maDoctype.setS_long(res.getString(res.getColumnIndex("s_long")));
                    maDoctype.setS_lat(res.getString(res.getColumnIndex("s_lat")));

                    list.add(maDoctype);
                    res.moveToNext();

                }

            } catch (Exception e) {
                Log.d("Error", e.toString());
            } finally {
                if (res != null)
                    res.close();
                db.close();
            }
        }


        return list;
    }

    public List<ApprovedObjList> GetAllRetailSItesforAreaInchargeSubmit() {
        Cursor res = null;
        List<ApprovedObjList> list = new ArrayList<ApprovedObjList>();

        SQLiteDatabase db = this.getReadableDatabase();


        try {

            res = db.rawQuery("select * from qavan_TourPlannerLocation ", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                ApprovedObjList maDoctype = new ApprovedObjList();

                maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("RetailSiteCode")));
                maDoctype.setIsAIPlan(res.getString(res.getColumnIndex("tour_plan_status")));
                maDoctype.setIsAINozzelMeasure(res.getString(res.getColumnIndex("AL_dispenser_measurment_plan_id")));
                maDoctype.setIsAIProdQualityTest(res.getString(res.getColumnIndex("AL_product_quality_plan")));
                maDoctype.setIsAIGenInsp(res.getString(res.getColumnIndex("AL_general_inpection_plan")));
                maDoctype.setIsAIAPLProdStatus(res.getString(res.getColumnIndex("AL_tank_inspection_plan")));
                if (res.getString(res.getColumnIndex("AreaInchargeRemarks")) == null || res.getString(res.getColumnIndex("AreaInchargeRemarks")).length() == 0) {
                    maDoctype.setAIRemarks(" ");
                } else {
                    maDoctype.setAIRemarks(res.getString(res.getColumnIndex("AreaInchargeRemarks")));
                }


                list.add(maDoctype);
                res.moveToNext();

            }

        } catch (Exception e) {
            Log.d("Error", e.toString());
        } finally {
            if (res != null)
                res.close();
            db.close();
        }


        return list;
    }

    public List<QA_Van_Tour_Plan_Location_DB_Model> GetAllRetailSites_ForAdditionalSites() {

        // Log.d("ID",String.valueOf(id));
        Cursor res = null;
        List<QA_Van_Tour_Plan_Location_DB_Model> list = new ArrayList<QA_Van_Tour_Plan_Location_DB_Model>();

        SQLiteDatabase db = this.getReadableDatabase();


        try {

            res = db.rawQuery("select * from qavan_TourPlannerLocation", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                QA_Van_Tour_Plan_Location_DB_Model maDoctype = new QA_Van_Tour_Plan_Location_DB_Model();
                maDoctype.setId(res.getInt(res.getColumnIndex("id")));
                maDoctype.setQVan_plan_id_local(res.getString(res.getColumnIndex("QVTP_id")));
                maDoctype.setCreator_id(res.getString(res.getColumnIndex("Creator_id")));
                maDoctype.setTerritory_id(res.getString(res.getColumnIndex("Territory_id")));
                maDoctype.setQvan_RouteSite_id(res.getString(res.getColumnIndex("Route_code")));
                maDoctype.setPlace_id(res.getString(res.getColumnIndex("Place_id")));
                maDoctype.setAreaExective(res.getString(res.getColumnIndex("AreaExective")));
                maDoctype.setRetailSiteDes(res.getString(res.getColumnIndex("RetailSiteDes")));
                maDoctype.setVisionType(res.getString(res.getColumnIndex("VisionType")));
                maDoctype.setLati(res.getString(res.getColumnIndex("Lati")));
                maDoctype.setLocation(res.getString(res.getColumnIndex("Location")));
                maDoctype.setSub_Region(res.getString(res.getColumnIndex("Sub_Region")));
                maDoctype.setLastInspDate(res.getString(res.getColumnIndex("LastInspDate")));
                maDoctype.setRegion(res.getString(res.getColumnIndex("Region")));
                maDoctype.setAreaIncharge(res.getString(res.getColumnIndex("AreaIncharge")));
                maDoctype.setCostCenter(res.getString(res.getColumnIndex("CostCenter")));
                maDoctype.setAreaInchargeContact(res.getString(res.getColumnIndex("AreaInchargeContact")));
                maDoctype.setDistrict(res.getString(res.getColumnIndex("District")));
                maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("RetailSiteCode")));
                maDoctype.setAddress(res.getString(res.getColumnIndex("Address")));
                maDoctype.setLongi(res.getString(res.getColumnIndex("Longi")));

                maDoctype.setAreaExectiveContact(res.getString(res.getColumnIndex("AreaExectiveContact")));
                maDoctype.setInspection_status(res.getString(res.getColumnIndex("InspectionStatus")));
                maDoctype.setNoOfDaysPass(res.getString(res.getColumnIndex("NoOfDaysPass")));
                maDoctype.setCostCentrDes(res.getString(res.getColumnIndex("CostCentrDes")));
                maDoctype.setPlanned_status(res.getInt(res.getColumnIndex("tour_plan_status")));
                maDoctype.setDispenser_Measurment_plan(res.getInt(res.getColumnIndex("dispenser_measurment_plan_id")));
                maDoctype.setProduct_Quality_plan(res.getInt(res.getColumnIndex("product_quality_plan")));
                maDoctype.setTank_Inspection_plan(res.getInt(res.getColumnIndex("tank_inspection_plan")));
                maDoctype.setSales_Data_plan(res.getInt(res.getColumnIndex("sales_data_plan")));
                maDoctype.setStock_Recnocelation_plan(res.getInt(res.getColumnIndex("stock_reconcelation_plan")));
                maDoctype.setGeneral_Inspection_plan(res.getInt(res.getColumnIndex("general_inpection_plan")));
                maDoctype.setCreation_date(res.getString(res.getColumnIndex("Plan_date")));
                maDoctype.setReason(res.getString(res.getColumnIndex("Reason_id")));
                maDoctype.setSequenceNo(res.getInt(res.getColumnIndex("Sequence_id")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setStatus(res.getString(res.getColumnIndex("Status")));
                maDoctype.setS_date(res.getString(res.getColumnIndex("s_date")));
                maDoctype.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                maDoctype.setS_status(res.getInt(res.getColumnIndex("s_status")));
                maDoctype.setS_long(res.getString(res.getColumnIndex("s_long")));
                maDoctype.setS_lat(res.getString(res.getColumnIndex("s_lat")));

                list.add(maDoctype);
                res.moveToNext();

            }

        } catch (Exception e) {
            Log.d("Error", e.toString());
        } finally {
            if (res != null)
                res.close();
            db.close();
        }


        return list;
    }

    public List<QA_Van_Tour_Plan_Location_DB_Model> GetAllRetailSites_ByRouteCode(String id) {

        // Log.d("ID",String.valueOf(id));
        Cursor res = null;
        List<QA_Van_Tour_Plan_Location_DB_Model> list = new ArrayList<QA_Van_Tour_Plan_Location_DB_Model>();

        SQLiteDatabase db = this.getReadableDatabase();


        try {

            res = db.rawQuery("select * from qavan_TourPlannerLocation WHERE Route_code='" + id + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                QA_Van_Tour_Plan_Location_DB_Model maDoctype = new QA_Van_Tour_Plan_Location_DB_Model();
                maDoctype.setId(res.getInt(res.getColumnIndex("id")));
                maDoctype.setQVan_plan_id_local(res.getString(res.getColumnIndex("QVTP_id")));
                maDoctype.setCreator_id(res.getString(res.getColumnIndex("Creator_id")));
                maDoctype.setTerritory_id(res.getString(res.getColumnIndex("Territory_id")));
                maDoctype.setQvan_RouteSite_id(res.getString(res.getColumnIndex("Route_code")));
                maDoctype.setPlace_id(res.getString(res.getColumnIndex("Place_id")));
                maDoctype.setAreaExective(res.getString(res.getColumnIndex("AreaExective")));
                maDoctype.setRetailSiteDes(res.getString(res.getColumnIndex("RetailSiteDes")));
                maDoctype.setVisionType(res.getString(res.getColumnIndex("VisionType")));
                maDoctype.setLati(res.getString(res.getColumnIndex("Lati")));
                maDoctype.setLocation(res.getString(res.getColumnIndex("Location")));
                maDoctype.setSub_Region(res.getString(res.getColumnIndex("Sub_Region")));
                maDoctype.setLastInspDate(res.getString(res.getColumnIndex("LastInspDate")));
                maDoctype.setRegion(res.getString(res.getColumnIndex("Region")));
                maDoctype.setAreaIncharge(res.getString(res.getColumnIndex("AreaIncharge")));
                maDoctype.setCostCenter(res.getString(res.getColumnIndex("CostCenter")));
                maDoctype.setAreaInchargeContact(res.getString(res.getColumnIndex("AreaInchargeContact")));
                maDoctype.setDistrict(res.getString(res.getColumnIndex("District")));
                maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("RetailSiteCode")));
                maDoctype.setAddress(res.getString(res.getColumnIndex("Address")));
                maDoctype.setLongi(res.getString(res.getColumnIndex("Longi")));
                maDoctype.setAreaExectiveContact(res.getString(res.getColumnIndex("AreaExectiveContact")));
                maDoctype.setNoOfDaysPass(res.getString(res.getColumnIndex("NoOfDaysPass")));
                maDoctype.setCostCentrDes(res.getString(res.getColumnIndex("CostCentrDes")));
                maDoctype.setPlanned_status(res.getInt(res.getColumnIndex("tour_plan_status")));
                maDoctype.setDispenser_Measurment_plan(res.getInt(res.getColumnIndex("dispenser_measurment_plan_id")));
                maDoctype.setProduct_Quality_plan(res.getInt(res.getColumnIndex("product_quality_plan")));
                maDoctype.setTank_Inspection_plan(res.getInt(res.getColumnIndex("tank_inspection_plan")));
                maDoctype.setSales_Data_plan(res.getInt(res.getColumnIndex("sales_data_plan")));
                maDoctype.setStock_Recnocelation_plan(res.getInt(res.getColumnIndex("stock_reconcelation_plan")));
                maDoctype.setGeneral_Inspection_plan(res.getInt(res.getColumnIndex("general_inpection_plan")));
                maDoctype.setCreation_date(res.getString(res.getColumnIndex("Plan_date")));
                maDoctype.setReason(res.getString(res.getColumnIndex("Reason_id")));
                maDoctype.setSequenceNo(res.getInt(res.getColumnIndex("Sequence_id")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setStatus(res.getString(res.getColumnIndex("Status")));
                maDoctype.setS_date(res.getString(res.getColumnIndex("s_date")));
                maDoctype.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                maDoctype.setS_status(res.getInt(res.getColumnIndex("s_status")));
                maDoctype.setS_long(res.getString(res.getColumnIndex("s_long")));
                maDoctype.setS_lat(res.getString(res.getColumnIndex("s_lat")));

                list.add(maDoctype);
                res.moveToNext();

            }

        } catch (Exception e) {
            Log.d("Error", e.toString());
        } finally {
            if (res != null)
                res.close();
            db.close();
        }


        return list;
    }

    public List<RetailSites> GetAllQAtourPlanLocationToServer(List<String> id, String territory_id) {

        // Log.d("ID",String.valueOf(id));
        Cursor res = null;
        List<RetailSites> list = new ArrayList<RetailSites>();

        SQLiteDatabase db = this.getReadableDatabase();

        for (int i = 0; i < id.size(); i++) {
            try {

                res = db.rawQuery("select * from qavan_TourPlannerLocation WHERE Territory_id='" + territory_id + "'" + " AND Route_code='" + id.get(i) + "'", null);
                res.moveToFirst();

                while (res.isAfterLast() == false) {
                    RetailSites maDoctype = new RetailSites();

                    maDoctype.setQVan_plan_id_local(res.getString(res.getColumnIndex("QVTP_id")));
                    maDoctype.setCreator_id(res.getString(res.getColumnIndex("Creator_id")));
                    maDoctype.setQvan_RouteSite_id(res.getString(res.getColumnIndex("Route_code")));
                    maDoctype.setCostCenter(res.getString(res.getColumnIndex("CostCenter")));
                    maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("RetailSiteCode")));
                    maDoctype.setPlanned_status(res.getString(res.getColumnIndex("tour_plan_status")));
                    maDoctype.setTour_status(res.getString(res.getColumnIndex("tour_plan_status")));
                    maDoctype.setDispenser_Measurment_plan(res.getString(res.getColumnIndex("dispenser_measurment_plan_id")));
                    maDoctype.setProduct_Quality_plan(res.getString(res.getColumnIndex("product_quality_plan")));
                    maDoctype.setTank_Inspection_plan(res.getString(res.getColumnIndex("tank_inspection_plan")));
                    maDoctype.setSales_Data_plan(res.getString(res.getColumnIndex("sales_data_plan")));
                    maDoctype.setStock_Recnocelation_plan(res.getString(res.getColumnIndex("stock_reconcelation_plan")));
                    maDoctype.setGeneral_Inspection_plan(res.getString(res.getColumnIndex("general_inpection_plan")));
                    maDoctype.setCreation_date(res.getString(res.getColumnIndex("Plan_date")));
                    maDoctype.setReason(res.getString(res.getColumnIndex("Reason_id")));
                    maDoctype.setSequenceNo(res.getString(res.getColumnIndex("Sequence_id")));
                    maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));

                    list.add(maDoctype);

                    res.moveToNext();
                }

            } catch (Exception e) {
                Log.d("Error", e.toString());
            } finally {
                if (res != null)
                    res.close();
                db.close();
            }
        }


        return list;
    }

    public List<RetailSites> GetAllQAtourPlanLocationForServerSubmit() {

        // Log.d("ID",String.valueOf(id));
        Cursor res = null;
        List<RetailSites> list = new ArrayList<RetailSites>();

        SQLiteDatabase db = this.getReadableDatabase();

        try {

            res = db.rawQuery("select * from qavan_TourPlannerLocation", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                RetailSites maDoctype = new RetailSites();

                if (res.getString(res.getColumnIndex("QVTP_id")).length() == 0) {
                    maDoctype.setQVan_plan_id_local("");
                } else {
                    maDoctype.setQVan_plan_id_local(res.getString(res.getColumnIndex("QVTP_id")));
                }

                if (res.getString(res.getColumnIndex("Creator_id")).length() == 0) {
                    maDoctype.setCreator_id("");
                } else {
                    maDoctype.setCreator_id(res.getString(res.getColumnIndex("Creator_id")));
                }


                maDoctype.setQvan_QVan_id("");
                if (res.getString(res.getColumnIndex("Route_code")) == null) {
                    maDoctype.setQvan_RouteSite_id("");

                } else {
                    maDoctype.setQvan_RouteSite_id(res.getString(res.getColumnIndex("Route_code")));
                }
                maDoctype.setCostCenter(res.getString(res.getColumnIndex("CostCenter")));
                maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("RetailSiteCode")));
                if (res.getString(res.getColumnIndex("Plan_date")) == null) {
                    maDoctype.setCreation_date("");
                } else {
                    maDoctype.setCreation_date(res.getString(res.getColumnIndex("Plan_date")));
                }

                if (res.getString(res.getColumnIndex("Reason_id")) == null) {
                    maDoctype.setReason("");
                } else {
                    maDoctype.setReason(res.getString(res.getColumnIndex("Reason_id")));
                }

                maDoctype.setSequenceNo(res.getString(res.getColumnIndex("Sequence_id")));

                if (res.getString(res.getColumnIndex("Remarks")) == null) {
                    maDoctype.setRemarks("");
                } else {
                    maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                }
                maDoctype.setDispenser_Measurment_plan(res.getString(res.getColumnIndex("dispenser_measurment_plan_id")));
                maDoctype.setProduct_Quality_plan(res.getString(res.getColumnIndex("product_quality_plan")));
                maDoctype.setTank_Inspection_plan(res.getString(res.getColumnIndex("tank_inspection_plan")));
                maDoctype.setSales_Data_plan(res.getString(res.getColumnIndex("sales_data_plan")));
                maDoctype.setStock_Recnocelation_plan(res.getString(res.getColumnIndex("stock_reconcelation_plan")));
                maDoctype.setGeneral_Inspection_plan(res.getString(res.getColumnIndex("general_inpection_plan")));
                maDoctype.setPlanned_status(res.getString(res.getColumnIndex("tour_plan_status")));
                maDoctype.setTour_status(res.getString(res.getColumnIndex("tour_plan_status")));
                maDoctype.setIsAdditionSite(res.getString(res.getColumnIndex("isAdditionSite")));


                list.add(maDoctype);

                res.moveToNext();
            }

        } catch (Exception e) {
            Log.d("Error", e.toString());
        } finally {
            if (res != null)
                res.close();
            db.close();
        }


        return list;
    }

    public List<RetailSites> GetAllQAtourPlanLocationForServerSubmit_AdditionalSite_Inspection(String rts_id) {

        // Log.d("ID",String.valueOf(id));
        Cursor res = null;
        List<RetailSites> list = new ArrayList<RetailSites>();

        SQLiteDatabase db = this.getReadableDatabase();

        try {

            res = db.rawQuery("select * from qavan_TourPlannerLocation WHERE QVTP_id=1 AND RetailSiteCode ='" + rts_id + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                RetailSites maDoctype = new RetailSites();

                if (res.getString(res.getColumnIndex("QVTP_id")).length() == 0) {
                    maDoctype.setQVan_plan_id_local("");
                } else {
                    maDoctype.setQVan_plan_id_local(res.getString(res.getColumnIndex("QVTP_id")));
                }

                if (res.getString(res.getColumnIndex("Creator_id")).length() == 0) {
                    maDoctype.setCreator_id("");
                } else {
                    maDoctype.setCreator_id(res.getString(res.getColumnIndex("Creator_id")));
                }


                maDoctype.setQvan_QVan_id("");
                if (res.getString(res.getColumnIndex("Route_code")) == null) {
                    maDoctype.setQvan_RouteSite_id("");

                } else {
                    maDoctype.setQvan_RouteSite_id(res.getString(res.getColumnIndex("Route_code")));
                }
                maDoctype.setCostCenter(res.getString(res.getColumnIndex("CostCenter")));
                maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("RetailSiteCode")));
                if (res.getString(res.getColumnIndex("Plan_date")) == null) {
                    maDoctype.setCreation_date("");
                } else {
                    maDoctype.setCreation_date(res.getString(res.getColumnIndex("Plan_date")));
                }

                if (res.getString(res.getColumnIndex("Reason_id")) == null) {
                    maDoctype.setReason("");
                } else {
                    maDoctype.setReason(res.getString(res.getColumnIndex("Reason_id")));
                }

                maDoctype.setSequenceNo(res.getString(res.getColumnIndex("Sequence_id")));

                if (res.getString(res.getColumnIndex("Remarks")) == null) {
                    maDoctype.setRemarks("");
                } else {
                    maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                }
                maDoctype.setDispenser_Measurment_plan(res.getString(res.getColumnIndex("dispenser_measurment_plan_id")));
                maDoctype.setProduct_Quality_plan(res.getString(res.getColumnIndex("product_quality_plan")));
                maDoctype.setTank_Inspection_plan(res.getString(res.getColumnIndex("tank_inspection_plan")));
                maDoctype.setSales_Data_plan(res.getString(res.getColumnIndex("sales_data_plan")));
                maDoctype.setStock_Recnocelation_plan(res.getString(res.getColumnIndex("stock_reconcelation_plan")));
                maDoctype.setGeneral_Inspection_plan(res.getString(res.getColumnIndex("general_inpection_plan")));
                maDoctype.setPlanned_status(res.getString(res.getColumnIndex("tour_plan_status")));
                maDoctype.setTour_status(res.getString(res.getColumnIndex("tour_plan_status")));
                maDoctype.setIsAdditionSite(res.getString(res.getColumnIndex("isAdditionSite")));


                list.add(maDoctype);

                res.moveToNext();
            }

        } catch (Exception e) {
            Log.d("Error", e.toString());
        } finally {
            if (res != null)
                res.close();
            db.close();
        }


        return list;
    }


    public List<RetailSites> GetAllQAtourPlanLocationbyTerritoryid(String id) {

        Log.d("ID", String.valueOf(id));
        Cursor res = null;
        List<RetailSites> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<RetailSites>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from qavan_TourPlannerLocation WHERE Territory_id='" + id + "'", null);
            Log.d("Query", String.valueOf(res));
            res.moveToFirst();
            //+" AND tour_plan_status="+1

            while (res.isAfterLast() == false) {
                RetailSites maDoctype = new RetailSites();

                maDoctype.setQVan_plan_id_local(res.getString(res.getColumnIndex("QVTP_id")));
                maDoctype.setCreator_id(res.getString(res.getColumnIndex("Creator_id")));
                maDoctype.setQvan_RouteSite_id(res.getString(res.getColumnIndex("Route_code")));
                maDoctype.setCostCenter(res.getString(res.getColumnIndex("CostCenter")));
                maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("RetailSiteCode")));
                maDoctype.setPlanned_status(res.getString(res.getColumnIndex("tour_plan_status")));
                maDoctype.setTour_status(res.getString(res.getColumnIndex("tour_plan_status")));
                maDoctype.setDispenser_Measurment_plan(res.getString(res.getColumnIndex("dispenser_measurment_plan_id")));
                maDoctype.setProduct_Quality_plan(res.getString(res.getColumnIndex("product_quality_plan")));
                maDoctype.setTank_Inspection_plan(res.getString(res.getColumnIndex("tank_inspection_plan")));
                maDoctype.setSales_Data_plan(res.getString(res.getColumnIndex("sales_data_plan")));
                maDoctype.setStock_Recnocelation_plan(res.getString(res.getColumnIndex("stock_reconcelation_plan")));
                maDoctype.setGeneral_Inspection_plan(res.getString(res.getColumnIndex("general_inpection_plan")));
                maDoctype.setCreation_date(res.getString(res.getColumnIndex("Plan_date")));
                maDoctype.setReason(res.getString(res.getColumnIndex("Reason_id")));
                maDoctype.setSequenceNo(res.getString(res.getColumnIndex("Sequence_id")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));

                list.add(maDoctype);

                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<QA_Van_Tour_Plan_Location_DB_Model> GetAllQAtourPlanLocationbyuniqueid(String id) {

        Log.d("ID", String.valueOf(id));
        Cursor res = null;
        SQLiteDatabase db = null;
        List<QA_Van_Tour_Plan_Location_DB_Model> list = null;
        try {
            list = new ArrayList<QA_Van_Tour_Plan_Location_DB_Model>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from qavan_TourPlannerLocation WHERE RetailSiteCode='" + id + "'", null);
            Log.d("Query", String.valueOf(res));
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                QA_Van_Tour_Plan_Location_DB_Model maDoctype = new QA_Van_Tour_Plan_Location_DB_Model();
                maDoctype.setId(res.getInt(res.getColumnIndex("id")));
                maDoctype.setQVan_plan_id_local(res.getString(res.getColumnIndex("QVTP_id")));
                maDoctype.setCreator_id(res.getString(res.getColumnIndex("Creator_id")));
                maDoctype.setTerritory_id(res.getString(res.getColumnIndex("Territory_id")));
                maDoctype.setPlace_id(res.getString(res.getColumnIndex("Place_id")));
                maDoctype.setAreaExective(res.getString(res.getColumnIndex("AreaExective")));
                maDoctype.setRetailSiteDes(res.getString(res.getColumnIndex("RetailSiteDes")));
                maDoctype.setLati(res.getString(res.getColumnIndex("Lati")));
                maDoctype.setLocation(res.getString(res.getColumnIndex("Location")));
                maDoctype.setSub_Region(res.getString(res.getColumnIndex("Sub_Region")));
                maDoctype.setLastInspDate(res.getString(res.getColumnIndex("LastInspDate")));
                maDoctype.setRegion(res.getString(res.getColumnIndex("Region")));
                maDoctype.setAreaIncharge(res.getString(res.getColumnIndex("AreaIncharge")));
                maDoctype.setCostCenter(res.getString(res.getColumnIndex("CostCenter")));
                maDoctype.setAreaInchargeContact(res.getString(res.getColumnIndex("AreaInchargeContact")));
                maDoctype.setDistrict(res.getString(res.getColumnIndex("District")));
                maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("RetailSiteCode")));
                maDoctype.setAddress(res.getString(res.getColumnIndex("Address")));
                maDoctype.setLongi(res.getString(res.getColumnIndex("Longi")));
                maDoctype.setAreaExectiveContact(res.getString(res.getColumnIndex("AreaExectiveContact")));
                maDoctype.setNoOfDaysPass(res.getString(res.getColumnIndex("NoOfDaysPass")));
                maDoctype.setCostCentrDes(res.getString(res.getColumnIndex("CostCentrDes")));
                maDoctype.setPlanned_status(res.getInt(res.getColumnIndex("tour_plan_status")));
                maDoctype.setLastVistStatus(res.getString(res.getColumnIndex("LastVistStatus")));
                maDoctype.setPersonContacNumber(res.getString(res.getColumnIndex("PersonContacNumber")));
                //   maDoctype.setNoOfDaysPass(res.getString(res.getColumnIndex("Creation_date")));
                maDoctype.setLastVistTourCode(res.getString(res.getColumnIndex("LastVistTourCode")));
                maDoctype.setInspection_status(res.getString(res.getColumnIndex("InspectionStatus")));
                maDoctype.setAlRemarks(res.getString(res.getColumnIndex("AreaInchargeRemarks")));

                maDoctype.setDispenser_Measurment_plan(res.getInt(res.getColumnIndex("dispenser_measurment_plan_id")));
                maDoctype.setProduct_Quality_plan(res.getInt(res.getColumnIndex("product_quality_plan")));
                maDoctype.setTank_Inspection_plan(res.getInt(res.getColumnIndex("tank_inspection_plan")));
                maDoctype.setSales_Data_plan(res.getInt(res.getColumnIndex("sales_data_plan")));
                maDoctype.setStock_Recnocelation_plan(res.getInt(res.getColumnIndex("stock_reconcelation_plan")));
                maDoctype.setGeneral_Inspection_plan(res.getInt(res.getColumnIndex("general_inpection_plan")));

                maDoctype.setAL_Dispenser_Measurment_plan(res.getInt(res.getColumnIndex("AL_dispenser_measurment_plan_id")));
                maDoctype.setAL_Product_Quality_plan(res.getInt(res.getColumnIndex("AL_product_quality_plan")));
                maDoctype.setAL_Tank_Inspection_plan(res.getInt(res.getColumnIndex("AL_tank_inspection_plan")));
                maDoctype.setAL_Sales_Data_plan(res.getInt(res.getColumnIndex("AL_sales_data_plan")));
                maDoctype.setAL_Stock_Recnocelation_plan(res.getInt(res.getColumnIndex("AL_stock_reconcelation_plan")));
                maDoctype.setAL_General_Inspection_plan(res.getInt(res.getColumnIndex("AL_general_inpection_plan")));

                maDoctype.setDispenser_Measurment_plan_default(res.getInt(res.getColumnIndex("dispenser_measurment_plan_id_default")));
                maDoctype.setProduct_Quality_plan_default(res.getInt(res.getColumnIndex("product_quality_plan_default")));
                maDoctype.setTank_Inspection_plan_default(res.getInt(res.getColumnIndex("tank_inspection_plan_default")));
                maDoctype.setSales_Data_plan_default(res.getInt(res.getColumnIndex("sales_data_plan_default")));
                maDoctype.setStock_Recnocelation_plan_default(res.getInt(res.getColumnIndex("stock_reconcelation_plan_default")));
                maDoctype.setGeneral_Inspection_plan_default(res.getInt(res.getColumnIndex("general_inpection_plan_default")));

                maDoctype.setDispenser_Measurment_plan_enable(res.getInt(res.getColumnIndex("dispenser_measurment_plan_id_enable")));
                maDoctype.setProduct_Quality_plan_enable(res.getInt(res.getColumnIndex("product_quality_plan_enable")));
                maDoctype.setTank_Inspection_plan_enable(res.getInt(res.getColumnIndex("tank_inspection_plan_enable")));
                maDoctype.setSales_Data_plan_enable(res.getInt(res.getColumnIndex("sales_data_plan_enable")));
                maDoctype.setStock_Recnocelation_plan_enable(res.getInt(res.getColumnIndex("stock_reconcelation_plan_enable")));
                maDoctype.setGeneral_Inspection_plan_enable(res.getInt(res.getColumnIndex("general_inpection_plan_enable")));

                maDoctype.setCreation_date(res.getString(res.getColumnIndex("Plan_date")));
                maDoctype.setReason(res.getString(res.getColumnIndex("Reason_id")));
                maDoctype.setSequenceNo(res.getInt(res.getColumnIndex("Sequence_id")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setStatus(res.getString(res.getColumnIndex("Status")));
                maDoctype.setS_date(res.getString(res.getColumnIndex("s_date")));
                maDoctype.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                maDoctype.setS_status(res.getInt(res.getColumnIndex("s_status")));
                maDoctype.setS_long(res.getString(res.getColumnIndex("s_long")));
                maDoctype.setS_lat(res.getString(res.getColumnIndex("s_lat")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public boolean UpdateQAtourPlanLocation(String id, int qavan_id, String creator_id, int tour_plan_status, int dispenser_measurment_plan_id, int product_quality_plan, int tank_inspection_plan, int sales_data_plan, int stock_reconcelation_plan, int general_inpection_plan, String Plan_date, String Reason_id, String Sequence_id, String status, String area_remarks) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;
        try {
            data = new ContentValues();
            data.put("QVTP_id", qavan_id);
            data.put("Creator_id", creator_id);
            data.put("tour_plan_status", tour_plan_status);
            data.put("dispenser_measurment_plan_id", dispenser_measurment_plan_id);
            data.put("stock_reconcelation_plan", tank_inspection_plan);
            data.put("sales_data_plan", sales_data_plan);
            data.put("product_quality_plan", product_quality_plan);
            data.put("tank_inspection_plan", stock_reconcelation_plan);
            data.put("general_inpection_plan", general_inpection_plan);
            data.put("Plan_date", Plan_date);
            data.put("Reason_id", Reason_id);
            data.put("Sequence_id", Sequence_id);
            data.put("Remarks", status);
            data.put("AreaInchargeRemarks", area_remarks);


            res = db.update("qavan_TourPlannerLocation", data, "RetailSiteCode='" + id + "'", null) > 0;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }

        return res;
    }

    public boolean UpdateQAtourPlanLocationbyAreaManager(String id, int qavan_id, String creator_id, int tour_plan_status, int dispenser_measurment_plan_id, int product_quality_plan, int tank_inspection_plan, int sales_data_plan, int stock_reconcelation_plan, int general_inpection_plan, String Plan_date, String Reason_id, String Sequence_id, String status, String area_remarks) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;
        try {
            data = new ContentValues();
            data.put("QVTP_id", qavan_id);
            data.put("Creator_id", creator_id);
            data.put("tour_plan_status", tour_plan_status);
            data.put("AL_dispenser_measurment_plan_id", dispenser_measurment_plan_id);
            data.put("AL_stock_reconcelation_plan", tank_inspection_plan);
            data.put("AL_sales_data_plan", sales_data_plan);
            data.put("AL_product_quality_plan", product_quality_plan);
            data.put("AL_tank_inspection_plan", stock_reconcelation_plan);
            data.put("AL_general_inpection_plan", general_inpection_plan);
            data.put("Plan_date", Plan_date);
            data.put("Reason_id", Reason_id);
            data.put("Sequence_id", Sequence_id);
            data.put("Remarks", status);
            data.put("AreaInchargeRemarks", area_remarks);


            res = db.update("qavan_TourPlannerLocation", data, "RetailSiteCode='" + id + "'", null) > 0;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }

        return res;
    }

    public boolean UpdateQAtourPlanLocationTourStatus() {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;
        try {

            db.execSQL("UPDATE qavan_TourPlannerLocation SET tour_plan_status='0'");

        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        //   UPDATE qavan_TourPlannerLocation SET Qavanid="",Creator_id="",tour_plan_status="",dispenser_measurment_plan_id="",product_quality_plan=",tank_inspection_plan="",sales_data_plan="",stock_reconcelation_plan="",general_inpection_plan="",Plan_date="",Reason_id="",Sequence_id="",Remarks="",Status="" WHERE id=0;
        return res;
    }

    public Long InsertDumyQaPlan(List<DataObject> dataObjects) {

        Log.d("vales in Model", dataObjects.get(0).getQvan_plan_title());
        Long idInsert = -1L;

        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("Qvan_End_date", dataObjects.get(0).getQvan_End_date());
            contentValues.put("Qvan_Start_date", dataObjects.get(0).getQvan_Start_date());
            contentValues.put("QVanTCPNo", dataObjects.get(0).getQVanTCPNo());
            contentValues.put("QVanCompCode", dataObjects.get(0).getQVanCompCode());
            contentValues.put("Qvan_plan_title", dataObjects.get(0).getQvan_plan_title());
            contentValues.put("QVanPeriod", dataObjects.get(0).getQVanPeriod());
            contentValues.put("Qvan_Creation_date", dataObjects.get(0).getQvan_Creation_date());
            contentValues.put("Qvan_QVan_id", dataObjects.get(0).getQvan_QVan_id());
            contentValues.put("QVanSiteCode", dataObjects.get(0).getQVanSiteCode());
            contentValues.put("QVan_plan_id_local", dataObjects.get(0).getQVan_plan_id_local());
            contentValues.put("Creator_id", dataObjects.get(0).getCreator_id());
            contentValues.put("Qvan_nature", dataObjects.get(0).getQvan_nature());
            contentValues.put("QVanYear", dataObjects.get(0).getQVanYear());
            contentValues.put("Qvan_Territory_id", dataObjects.get(0).getQvan_Territory_id());
            idInsert = db.insert("Dumy_qavan_TourPlanner", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();

        }
        return idInsert;
    }


    //endregion

    //region DropDowns
    public Long InsertQAtourNature(DropDownsModel dropDownsModel) {


        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;


        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("Nature_id", dropDownsModel.getId());
            contentValues.put("name", dropDownsModel.getName());


            idInsert = db.insert("dropdowns_Nature", null, contentValues);


        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public List<DropDownsModel> GetQAVanVisitTourNature() {

        Cursor res = null;
        List<DropDownsModel> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<DropDownsModel>();
            list.add(new DropDownsModel("-1", "Select Nature"));
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from dropdowns_Nature", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                DropDownsModel maDoctype = new DropDownsModel();
                maDoctype.setId(res.getString(res.getColumnIndex("Nature_id")));
                maDoctype.setName(res.getString(res.getColumnIndex("Name")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<DropDownsModel> GetQAVanVisitTourReason() {

        Cursor res = null;
        List<DropDownsModel> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<DropDownsModel>();
            list.add(new DropDownsModel("-1", "Select Reason"));
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from dropdowns_VisitReason", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                DropDownsModel maDoctype = new DropDownsModel();
                maDoctype.setId(res.getString(res.getColumnIndex("Reason_id")));
                maDoctype.setName(res.getString(res.getColumnIndex("Name")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public Long InsertQAtourReason(DropDownsModel dropDownsModel) {


        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;


        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("Reason_id", dropDownsModel.getId());
            contentValues.put("Name", dropDownsModel.getName());


            idInsert = db.insert("dropdowns_VisitReason", null, contentValues);


        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public void deletefromQa_Locations() {
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            String deleteqa_inbox = "DELETE FROM qavan_TourPlannerLocation";
            db.execSQL(deleteqa_inbox);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }

    public void deletefromQa_LocationsById(String rts_code) {
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            db = this.getReadableDatabase();
            String deleteqa_inbox = "DELETE FROM qavan_TourPlannerLocation where RetailSiteCode='" + rts_code.trim() + "'";
            db.execSQL(deleteqa_inbox);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }


    //TODO:Additional Retail Sites=========================
    public List<QA_Van_Tour_Plan_Location_DB_Model> GetAllAdditionalretailSites(List<String> id, String territory_id) {

        // Log.d("ID",String.valueOf(id));
        Cursor res = null;
        List<QA_Van_Tour_Plan_Location_DB_Model> list = new ArrayList<QA_Van_Tour_Plan_Location_DB_Model>();

        SQLiteDatabase db = this.getReadableDatabase();

        for (int i = 0; i < id.size(); i++) {
            try {

                res = db.rawQuery("select * from qavan_AdditionalSites WHERE Territory_id='" + territory_id + "'" + " AND Route_code='" + id.get(i) + "'", null);
                res.moveToFirst();

                while (res.isAfterLast() == false) {
                    QA_Van_Tour_Plan_Location_DB_Model maDoctype = new QA_Van_Tour_Plan_Location_DB_Model();
                    maDoctype.setId(res.getInt(res.getColumnIndex("id")));
                    maDoctype.setQVan_plan_id_local(res.getString(res.getColumnIndex("QVTP_id")));
                    maDoctype.setLastVistTourCode(res.getString(res.getColumnIndex("LastVistTourCode")));
                    maDoctype.setCreator_id(res.getString(res.getColumnIndex("Creator_id")));
                    maDoctype.setTerritory_id(res.getString(res.getColumnIndex("Territory_id")));
                    maDoctype.setQvan_RouteSite_id(res.getString(res.getColumnIndex("Route_code")));
                    maDoctype.setPlace_id(res.getString(res.getColumnIndex("Place_id")));
                    maDoctype.setAreaExective(res.getString(res.getColumnIndex("AreaExective")));
                    maDoctype.setRetailSiteDes(res.getString(res.getColumnIndex("RetailSiteDes")));
                    maDoctype.setVisionType(res.getString(res.getColumnIndex("VisionType")));
                    maDoctype.setLati(res.getString(res.getColumnIndex("Lati")));
                    maDoctype.setLocation(res.getString(res.getColumnIndex("Location")));
                    maDoctype.setSub_Region(res.getString(res.getColumnIndex("Sub_Region")));
                    maDoctype.setLastInspDate(res.getString(res.getColumnIndex("LastInspDate")));
                    maDoctype.setRegion(res.getString(res.getColumnIndex("Region")));
                    maDoctype.setAreaIncharge(res.getString(res.getColumnIndex("AreaIncharge")));
                    maDoctype.setCostCenter(res.getString(res.getColumnIndex("CostCenter")));
                    maDoctype.setAreaInchargeContact(res.getString(res.getColumnIndex("AreaInchargeContact")));
                    maDoctype.setDistrict(res.getString(res.getColumnIndex("District")));
                    maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("RetailSiteCode")));
                    maDoctype.setAddress(res.getString(res.getColumnIndex("Address")));
                    maDoctype.setLongi(res.getString(res.getColumnIndex("Longi")));
                    maDoctype.setAreaExectiveContact(res.getString(res.getColumnIndex("AreaExectiveContact")));
                    maDoctype.setNoOfDaysPass(res.getString(res.getColumnIndex("NoOfDaysPass")));
                    maDoctype.setCostCentrDes(res.getString(res.getColumnIndex("CostCentrDes")));
                    maDoctype.setPlanned_status(res.getInt(res.getColumnIndex("tour_plan_status")));
                    maDoctype.setDispenser_Measurment_plan(res.getInt(res.getColumnIndex("dispenser_measurment_plan_id")));
                    maDoctype.setProduct_Quality_plan(res.getInt(res.getColumnIndex("product_quality_plan")));
                    maDoctype.setTank_Inspection_plan(res.getInt(res.getColumnIndex("tank_inspection_plan")));
                    maDoctype.setSales_Data_plan(res.getInt(res.getColumnIndex("sales_data_plan")));
                    maDoctype.setStock_Recnocelation_plan(res.getInt(res.getColumnIndex("stock_reconcelation_plan")));
                    maDoctype.setGeneral_Inspection_plan(res.getInt(res.getColumnIndex("general_inpection_plan")));
                    maDoctype.setCreation_date(res.getString(res.getColumnIndex("Plan_date")));
                    maDoctype.setReason(res.getString(res.getColumnIndex("Reason_id")));
                    maDoctype.setSequenceNo(res.getInt(res.getColumnIndex("Sequence_id")));
                    maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                    maDoctype.setStatus(res.getString(res.getColumnIndex("Status")));
                    maDoctype.setS_date(res.getString(res.getColumnIndex("s_date")));
                    maDoctype.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                    maDoctype.setS_status(res.getInt(res.getColumnIndex("s_status")));
                    maDoctype.setS_long(res.getString(res.getColumnIndex("s_long")));
                    maDoctype.setS_lat(res.getString(res.getColumnIndex("s_lat")));

                    list.add(maDoctype);
                    res.moveToNext();

                }

            } catch (Exception e) {
                Log.d("Error", e.toString());
            } finally {
                if (res != null)
                    res.close();
                db.close();
            }
        }


        return list;
    }

    public Long insertqavan_AdditionalSites(RetailSiteList qa_van_tour_plan_location_db_model) {


        SQLiteDatabase db = null;

        Long idInsert = -1L;

        try {
            db = this.getReadableDatabase();

            ContentValues contentValues = new ContentValues();
            contentValues.put("QVTP_id", "");
            contentValues.put("Creator_id", "");
            contentValues.put("Route_code", qa_van_tour_plan_location_db_model.getRouteCode());
            contentValues.put("Territory_id", "");
            contentValues.put("Place_id", "");

            contentValues.put("AreaExective", qa_van_tour_plan_location_db_model.getAreaExective());
            contentValues.put("RetailSiteDes", qa_van_tour_plan_location_db_model.getRetailSiteDes());
            contentValues.put("VisionType", qa_van_tour_plan_location_db_model.getVisionType());
            contentValues.put("Lati", qa_van_tour_plan_location_db_model.getLati());
            contentValues.put("Location", qa_van_tour_plan_location_db_model.getLocation());
            contentValues.put("Sub_Region", "");
            contentValues.put("LastInspDate", qa_van_tour_plan_location_db_model.getLastInspDate());
            contentValues.put("Region", qa_van_tour_plan_location_db_model.getRegion());
            contentValues.put("AreaIncharge", qa_van_tour_plan_location_db_model.getAreaIncharge());
            contentValues.put("CostCenter", qa_van_tour_plan_location_db_model.getCostCenter());
            contentValues.put("AreaInchargeContact", qa_van_tour_plan_location_db_model.getAreaInchargeContact());
            contentValues.put("District", qa_van_tour_plan_location_db_model.getDistrict());
            contentValues.put("RetailSiteCode", qa_van_tour_plan_location_db_model.getRetailSiteCode());
            contentValues.put("Address", qa_van_tour_plan_location_db_model.getAddress());
            contentValues.put("Longi", qa_van_tour_plan_location_db_model.getLongi());

            contentValues.put("AreaExectiveContact", qa_van_tour_plan_location_db_model.getAreaExectiveContact());
            contentValues.put("NoOfDaysPass", qa_van_tour_plan_location_db_model.getNoOfDaysPass());
            contentValues.put("CostCentrDes", qa_van_tour_plan_location_db_model.getCostCentrDes());

            contentValues.put("LastVistStatus", qa_van_tour_plan_location_db_model.getLastVistStatus());
            contentValues.put("PersonContacNumber", qa_van_tour_plan_location_db_model.getPersonContacNumber());
            contentValues.put("LastVistTourCode", qa_van_tour_plan_location_db_model.getLastVistTourCode());
            contentValues.put("tour_plan_status", qa_van_tour_plan_location_db_model.getPlanned_status());


            contentValues.put("dispenser_measurment_plan_id", 0);
            contentValues.put("product_quality_plan", 0);
            contentValues.put("tank_inspection_plan", 0);
            contentValues.put("general_inpection_plan", 0);
            contentValues.put("sales_data_plan", 0);
            contentValues.put("stock_reconcelation_plan", 0);


            if (qa_van_tour_plan_location_db_model.getNozzleMeasurementEnabled()) {
                contentValues.put("dispenser_measurment_plan_id_enable", 1);

            } else {
                contentValues.put("dispenser_measurment_plan_id_enable", 0);
            }
            if (qa_van_tour_plan_location_db_model.getProdQualityEnabled()) {
                contentValues.put("product_quality_plan_enable", 1);

            } else {
                contentValues.put("product_quality_plan_enable", 0);
            }
            if (qa_van_tour_plan_location_db_model.getAplProdStatusEnabled()) {
                contentValues.put("tank_inspection_plan_enable", 1);

            } else {
                contentValues.put("tank_inspection_plan_enable", 0);
            }
            contentValues.put("sales_data_plan_enable", Integer.parseInt(String.valueOf(0)));
            contentValues.put("stock_reconcelation_plan_enable", Integer.parseInt(String.valueOf(0)));
            if (qa_van_tour_plan_location_db_model.getGeneralInspEnabled()) {
                contentValues.put("general_inpection_plan_enable", 1);

            } else {
                contentValues.put("general_inpection_plan_enable", 0);
            }


            if (qa_van_tour_plan_location_db_model.getNozzleMeasurementDefault()) {
                contentValues.put("dispenser_measurment_plan_id_default", 1);

            } else {
                contentValues.put("dispenser_measurment_plan_id_default", 0);
            }
            if (qa_van_tour_plan_location_db_model.getProdQualityDefault()) {
                contentValues.put("product_quality_plan_default", 1);

            } else {
                contentValues.put("product_quality_plan_default", 0);
            }
            if (qa_van_tour_plan_location_db_model.getAplProdStatusDefault()) {
                contentValues.put("tank_inspection_plan_default", 1);

            } else {
                contentValues.put("tank_inspection_plan_default", 0);
            }
            contentValues.put("sales_data_plan_default", Integer.parseInt(String.valueOf(0)));
            contentValues.put("stock_reconcelation_plan_default", Integer.parseInt(String.valueOf(0)));
            if (qa_van_tour_plan_location_db_model.getGeneralInspDefault()) {
                contentValues.put("general_inpection_plan_default", 1);

            } else {
                contentValues.put("general_inpection_plan", 0);
            }


            contentValues.put("Plan_date", qa_van_tour_plan_location_db_model.getCreation_date());
            contentValues.put("Reason_id", qa_van_tour_plan_location_db_model.getReason());
            contentValues.put("Sequence_id", qa_van_tour_plan_location_db_model.getSequenceNo());
            contentValues.put("Remarks", qa_van_tour_plan_location_db_model.getRemarks());
            contentValues.put("Status", qa_van_tour_plan_location_db_model.getStatus());
            contentValues.put("s_date", qa_van_tour_plan_location_db_model.getS_date());
            contentValues.put("s_is_sync", qa_van_tour_plan_location_db_model.getS_is_sync());
            contentValues.put("s_status", qa_van_tour_plan_location_db_model.getS_status());
            contentValues.put("s_long", qa_van_tour_plan_location_db_model.getS_long());
            contentValues.put("s_lat", qa_van_tour_plan_location_db_model.getS_lat());

            idInsert = db.insert("qavan_AdditionalSites", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
            Log.d("String", String.valueOf(e));

        } finally {

            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public List<QA_Van_Tour_AdditionalSites> GetAllRetailSites_ForAdditionalSites_OnlyNames() {

        // Log.d("ID",String.valueOf(id));
        Cursor res = null;
        List<QA_Van_Tour_AdditionalSites> list = new ArrayList<QA_Van_Tour_AdditionalSites>();

        SQLiteDatabase db = this.getReadableDatabase();


        try {

            res = db.rawQuery("select * from qavan_AdditionalSites", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                QA_Van_Tour_AdditionalSites maDoctype = new QA_Van_Tour_AdditionalSites();
                maDoctype.setName_retailsite(res.getString(res.getColumnIndex("RetailSiteDes")));
                maDoctype.setId_retailsite(res.getString(res.getColumnIndex("RetailSiteCode")));
                maDoctype.setStatus(0);


                list.add(maDoctype);
                res.moveToNext();

            }

        } catch (Exception e) {
            Log.d("Error", e.toString());
        } finally {
            if (res != null)
                res.close();
            db.close();
        }


        return list;
    }

    public List<RetailSiteList> GetAllRetailSitesByRetailcode(List<String> id) {

        Log.d("ID", String.valueOf(id));
        Cursor res = null;
        List<RetailSiteList> list = new ArrayList<RetailSiteList>();

        SQLiteDatabase db = this.getReadableDatabase();

        for (int i = 0; i < id.size(); i++) {
            try {
                db = this.getReadableDatabase();
                res = db.rawQuery("select * from qavan_AdditionalSites WHERE RetailSiteCode='" + id.get(i) + "'", null);
                res.moveToFirst();

                while (res.isAfterLast() == false) {
                    RetailSiteList maDoctype = new RetailSiteList();
                    maDoctype.setId(res.getInt(res.getColumnIndex("id")));

                    maDoctype.setAreaExective(res.getString(res.getColumnIndex("AreaExective")));
                    maDoctype.setRetailSiteDes(res.getString(res.getColumnIndex("RetailSiteDes")));
                    maDoctype.setVisionType(res.getString(res.getColumnIndex("VisionType")));
                    maDoctype.setLati(res.getString(res.getColumnIndex("Lati")));
                    maDoctype.setLocation(res.getString(res.getColumnIndex("Location")));


                    maDoctype.setLastVistStatus(res.getString(res.getColumnIndex("LastVistStatus")));
                    maDoctype.setPersonContacNumber(res.getString(res.getColumnIndex("PersonContacNumber")));
                    maDoctype.setLastVistTourCode(res.getString(res.getColumnIndex("LastVistTourCode")));


                    maDoctype.setLastInspDate(res.getString(res.getColumnIndex("LastInspDate")));
                    maDoctype.setRegion(res.getString(res.getColumnIndex("Region")));
                    maDoctype.setAreaIncharge(res.getString(res.getColumnIndex("AreaIncharge")));
                    maDoctype.setCostCenter(res.getString(res.getColumnIndex("CostCenter")));
                    maDoctype.setAreaInchargeContact(res.getString(res.getColumnIndex("AreaInchargeContact")));
                    maDoctype.setDistrict(res.getString(res.getColumnIndex("District")));
                    maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("RetailSiteCode")));
                    maDoctype.setAddress(res.getString(res.getColumnIndex("Address")));
                    maDoctype.setLongi(res.getString(res.getColumnIndex("Longi")));
                    maDoctype.setAreaExectiveContact(res.getString(res.getColumnIndex("AreaExectiveContact")));
                    maDoctype.setNoOfDaysPass(res.getString(res.getColumnIndex("NoOfDaysPass")));
                    maDoctype.setCostCentrDes(res.getString(res.getColumnIndex("CostCentrDes")));
                    maDoctype.setPlanned_status(res.getInt(res.getColumnIndex("tour_plan_status")));

                    maDoctype.setDispenser_Measurment_plan(res.getInt(res.getColumnIndex("dispenser_measurment_plan_id")));
                    maDoctype.setProduct_Quality_plan(res.getInt(res.getColumnIndex("product_quality_plan")));
                    maDoctype.setTank_Inspection_plan(res.getInt(res.getColumnIndex("tank_inspection_plan")));
                    maDoctype.setSales_Data_plan(res.getInt(res.getColumnIndex("sales_data_plan")));
                    maDoctype.setStock_Recnocelation_plan(res.getInt(res.getColumnIndex("stock_reconcelation_plan")));
                    maDoctype.setGeneral_Inspection_plan(res.getInt(res.getColumnIndex("general_inpection_plan")));


                    if (res.getInt(res.getColumnIndex("dispenser_measurment_plan_id_default")) == 1) {
                        maDoctype.setDispenser_Measurment_plan_default(1);
                    } else {
                        maDoctype.setDispenser_Measurment_plan_default(0);
                    }

                    if (res.getInt(res.getColumnIndex("product_quality_plan_default")) == 1) {
                        maDoctype.setProduct_Quality_plan_default(1);
                    } else {
                        maDoctype.setProduct_Quality_plan_default(0);
                    }
                    if (res.getInt(res.getColumnIndex("tank_inspection_plan_default")) == 1) {
                        maDoctype.setTank_Inspection_plan_default(1);
                    } else {
                        maDoctype.setTank_Inspection_plan_default(0);
                    }
                    if (res.getInt(res.getColumnIndex("sales_data_plan_default")) == 1) {
                        maDoctype.setSales_Data_plan_default(1);
                    } else {
                        maDoctype.setSales_Data_plan_default(0);
                    }
                    if (res.getInt(res.getColumnIndex("stock_reconcelation_plan_default")) == 1) {
                        maDoctype.setStock_Recnocelation_plan_default(1);
                    } else {
                        maDoctype.setStock_Recnocelation_plan_default(0);
                    }
                    if (res.getInt(res.getColumnIndex("general_inpection_plan_default")) == 1) {
                        maDoctype.setGeneral_Inspection_plan_default(1);
                    } else {
                        maDoctype.setGeneral_Inspection_plan_default(0);
                    }


                    if (res.getInt(res.getColumnIndex("dispenser_measurment_plan_id_enable")) == 1) {
                        maDoctype.setNozzleMeasurementEnabled(true);
                    } else {
                        maDoctype.setNozzleMeasurementEnabled(false);
                    }
                    if (res.getInt(res.getColumnIndex("product_quality_plan_enable")) == 1) {
                        maDoctype.setProdQualityEnabled(true);
                    } else {
                        maDoctype.setProdQualityEnabled(false);
                    }
                    if (res.getInt(res.getColumnIndex("tank_inspection_plan_enable")) == 1) {
                        maDoctype.setAplProdStatusEnabled(true);
                    } else {
                        maDoctype.setAplProdStatusEnabled(false);
                    }
                    if (res.getInt(res.getColumnIndex("general_inpection_plan_enable")) == 1) {
                        maDoctype.setGeneralInspEnabled(true);
                    } else {
                        maDoctype.setGeneralInspEnabled(false);
                    }


                    maDoctype.setCreation_date(res.getString(res.getColumnIndex("Plan_date")));
                    maDoctype.setReason(res.getString(res.getColumnIndex("Reason_id")));
                    maDoctype.setSequenceNo(res.getString(res.getColumnIndex("Sequence_id")));
                    maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                    maDoctype.setStatus(res.getString(res.getColumnIndex("Status")));
                    maDoctype.setS_date(res.getString(res.getColumnIndex("s_date")));
                    maDoctype.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                    maDoctype.setS_status(res.getInt(res.getColumnIndex("s_status")));
                    maDoctype.setS_long(res.getString(res.getColumnIndex("s_long")));
                    maDoctype.setS_lat(res.getString(res.getColumnIndex("s_lat")));
                    maDoctype.setIsAdditionSite(1);

                    list.add(maDoctype);
                    res.moveToNext();

                }

            } catch (Exception e) {
                Log.d("Error", e.toString());
            } finally {
                if (res != null)
                    res.close();
                db.close();
            }
        }


        return list;
    }

    public List<RetailSiteList> GetAllRetailSitesByRetailcode_Adapter(String id) {

        Log.d("ID", String.valueOf(id));
        Cursor res = null;
        List<RetailSiteList> list = new ArrayList<RetailSiteList>();

        SQLiteDatabase db = this.getReadableDatabase();


        try {
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from qavan_AdditionalSites WHERE RetailSiteCode='" + id + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                RetailSiteList maDoctype = new RetailSiteList();
                maDoctype.setId(res.getInt(res.getColumnIndex("id")));

                maDoctype.setAreaExective(res.getString(res.getColumnIndex("AreaExective")));
                maDoctype.setRetailSiteDes(res.getString(res.getColumnIndex("RetailSiteDes")));
                maDoctype.setVisionType(res.getString(res.getColumnIndex("VisionType")));
                maDoctype.setLati(res.getString(res.getColumnIndex("Lati")));
                maDoctype.setLocation(res.getString(res.getColumnIndex("Location")));


                maDoctype.setLastVistStatus(res.getString(res.getColumnIndex("LastVistStatus")));
                maDoctype.setPersonContacNumber(res.getString(res.getColumnIndex("PersonContacNumber")));
                maDoctype.setLastVistTourCode(res.getString(res.getColumnIndex("LastVistTourCode")));


                maDoctype.setLastInspDate(res.getString(res.getColumnIndex("LastInspDate")));
                maDoctype.setRegion(res.getString(res.getColumnIndex("Region")));
                maDoctype.setAreaIncharge(res.getString(res.getColumnIndex("AreaIncharge")));
                maDoctype.setCostCenter(res.getString(res.getColumnIndex("CostCenter")));
                maDoctype.setAreaInchargeContact(res.getString(res.getColumnIndex("AreaInchargeContact")));
                maDoctype.setDistrict(res.getString(res.getColumnIndex("District")));
                maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("RetailSiteCode")));
                maDoctype.setAddress(res.getString(res.getColumnIndex("Address")));
                maDoctype.setLongi(res.getString(res.getColumnIndex("Longi")));
                maDoctype.setAreaExectiveContact(res.getString(res.getColumnIndex("AreaExectiveContact")));
                maDoctype.setNoOfDaysPass(res.getString(res.getColumnIndex("NoOfDaysPass")));
                maDoctype.setCostCentrDes(res.getString(res.getColumnIndex("CostCentrDes")));
                maDoctype.setPlanned_status(res.getInt(res.getColumnIndex("tour_plan_status")));

                maDoctype.setDispenser_Measurment_plan(res.getInt(res.getColumnIndex("dispenser_measurment_plan_id")));
                maDoctype.setProduct_Quality_plan(res.getInt(res.getColumnIndex("product_quality_plan")));
                maDoctype.setTank_Inspection_plan(res.getInt(res.getColumnIndex("tank_inspection_plan")));
                maDoctype.setSales_Data_plan(res.getInt(res.getColumnIndex("sales_data_plan")));
                maDoctype.setStock_Recnocelation_plan(res.getInt(res.getColumnIndex("stock_reconcelation_plan")));
                maDoctype.setGeneral_Inspection_plan(res.getInt(res.getColumnIndex("general_inpection_plan")));


                if (res.getInt(res.getColumnIndex("dispenser_measurment_plan_id_default")) == 1) {
                    maDoctype.setDispenser_Measurment_plan_default(1);
                } else {
                    maDoctype.setDispenser_Measurment_plan_default(0);
                }

                if (res.getInt(res.getColumnIndex("product_quality_plan_default")) == 1) {
                    maDoctype.setProduct_Quality_plan_default(1);
                } else {
                    maDoctype.setProduct_Quality_plan_default(0);
                }
                if (res.getInt(res.getColumnIndex("tank_inspection_plan_default")) == 1) {
                    maDoctype.setTank_Inspection_plan_default(1);
                } else {
                    maDoctype.setTank_Inspection_plan_default(0);
                }
                if (res.getInt(res.getColumnIndex("sales_data_plan_default")) == 1) {
                    maDoctype.setSales_Data_plan_default(1);
                } else {
                    maDoctype.setSales_Data_plan_default(0);
                }
                if (res.getInt(res.getColumnIndex("stock_reconcelation_plan_default")) == 1) {
                    maDoctype.setStock_Recnocelation_plan_default(1);
                } else {
                    maDoctype.setStock_Recnocelation_plan_default(0);
                }
                if (res.getInt(res.getColumnIndex("general_inpection_plan_default")) == 1) {
                    maDoctype.setGeneral_Inspection_plan_default(1);
                } else {
                    maDoctype.setGeneral_Inspection_plan_default(0);
                }


                if (res.getInt(res.getColumnIndex("dispenser_measurment_plan_id_enable")) == 1) {
                    maDoctype.setNozzleMeasurementEnabled(true);
                } else {
                    maDoctype.setNozzleMeasurementEnabled(false);
                }
                if (res.getInt(res.getColumnIndex("product_quality_plan_enable")) == 1) {
                    maDoctype.setProdQualityEnabled(true);
                } else {
                    maDoctype.setProdQualityEnabled(false);
                }
                if (res.getInt(res.getColumnIndex("tank_inspection_plan_enable")) == 1) {
                    maDoctype.setAplProdStatusEnabled(true);
                } else {
                    maDoctype.setAplProdStatusEnabled(false);
                }
                if (res.getInt(res.getColumnIndex("general_inpection_plan_enable")) == 1) {
                    maDoctype.setGeneralInspEnabled(true);
                } else {
                    maDoctype.setGeneralInspEnabled(false);
                }


                maDoctype.setCreation_date(res.getString(res.getColumnIndex("Plan_date")));
                maDoctype.setReason(res.getString(res.getColumnIndex("Reason_id")));
                maDoctype.setSequenceNo(res.getString(res.getColumnIndex("Sequence_id")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setStatus(res.getString(res.getColumnIndex("Status")));
                maDoctype.setS_date(res.getString(res.getColumnIndex("s_date")));
                maDoctype.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                maDoctype.setS_status(res.getInt(res.getColumnIndex("s_status")));
                maDoctype.setS_long(res.getString(res.getColumnIndex("s_long")));
                maDoctype.setS_lat(res.getString(res.getColumnIndex("s_lat")));
                maDoctype.setIsAdditionSite(1);

                list.add(maDoctype);
                res.moveToNext();

            }

        } catch (Exception e) {
            Log.d("Error", e.toString());
        } finally {
            if (res != null)
                res.close();
            db.close();
        }


        return list;
    }

    public List<RetailSiteList> GetAllAdditionalretailSitesForDialogue() {

        // Log.d("ID",String.valueOf(id));
        Cursor res = null;
        List<RetailSiteList> list = new ArrayList<RetailSiteList>();

        SQLiteDatabase db = this.getReadableDatabase();


        try {

            res = db.rawQuery("select * from qavan_AdditionalSites ", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                RetailSiteList maDoctype = new RetailSiteList();
                maDoctype.setId(res.getInt(res.getColumnIndex("id")));
//                    maDoctype.setQVan_plan_id_local(res.getString(res.getColumnIndex("QVTP_id")));
//                    maDoctype.setCreator_id(res.getString(res.getColumnIndex("Creator_id")));
//                    maDoctype.setTerritory_id(res.getString(res.getColumnIndex("Territory_id")));
//                    maDoctype.setQvan_RouteSite_id(res.getString(res.getColumnIndex("Route_code")));
                //          maDoctype.setPlace_id(res.getString(res.getColumnIndex("Place_id")));
                maDoctype.setAreaExective(res.getString(res.getColumnIndex("AreaExective")));
                maDoctype.setRetailSiteDes(res.getString(res.getColumnIndex("RetailSiteDes")));
                maDoctype.setVisionType(res.getString(res.getColumnIndex("VisionType")));
                maDoctype.setLati(res.getString(res.getColumnIndex("Lati")));
                maDoctype.setLocation(res.getString(res.getColumnIndex("Location")));
                //        maDoctype.setSub_Region(res.getString(res.getColumnIndex("Sub_Region")));
                maDoctype.setLastInspDate(res.getString(res.getColumnIndex("LastInspDate")));
                maDoctype.setRegion(res.getString(res.getColumnIndex("Region")));
                maDoctype.setAreaIncharge(res.getString(res.getColumnIndex("AreaIncharge")));
                maDoctype.setCostCenter(res.getString(res.getColumnIndex("CostCenter")));
                maDoctype.setAreaInchargeContact(res.getString(res.getColumnIndex("AreaInchargeContact")));
                maDoctype.setDistrict(res.getString(res.getColumnIndex("District")));
                maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("RetailSiteCode")));
                maDoctype.setAddress(res.getString(res.getColumnIndex("Address")));
                maDoctype.setLongi(res.getString(res.getColumnIndex("Longi")));
                maDoctype.setAreaExectiveContact(res.getString(res.getColumnIndex("AreaExectiveContact")));
                maDoctype.setNoOfDaysPass(res.getString(res.getColumnIndex("NoOfDaysPass")));
                maDoctype.setCostCentrDes(res.getString(res.getColumnIndex("CostCentrDes")));
                maDoctype.setPlanned_status(res.getInt(res.getColumnIndex("tour_plan_status")));
                maDoctype.setDispenser_Measurment_plan(res.getInt(res.getColumnIndex("dispenser_measurment_plan_id")));
                maDoctype.setProduct_Quality_plan(res.getInt(res.getColumnIndex("product_quality_plan")));
                maDoctype.setTank_Inspection_plan(res.getInt(res.getColumnIndex("tank_inspection_plan")));
                maDoctype.setSales_Data_plan(res.getInt(res.getColumnIndex("sales_data_plan")));
                maDoctype.setStock_Recnocelation_plan(res.getInt(res.getColumnIndex("stock_reconcelation_plan")));
                maDoctype.setGeneral_Inspection_plan(res.getInt(res.getColumnIndex("general_inpection_plan")));
                maDoctype.setCreation_date(res.getString(res.getColumnIndex("Plan_date")));
                maDoctype.setReason(res.getString(res.getColumnIndex("Reason_id")));
                maDoctype.setSequenceNo(res.getString(res.getColumnIndex("Sequence_id")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setStatus(res.getString(res.getColumnIndex("Status")));
                maDoctype.setS_date(res.getString(res.getColumnIndex("s_date")));
                maDoctype.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                maDoctype.setS_status(res.getInt(res.getColumnIndex("s_status")));
                maDoctype.setS_long(res.getString(res.getColumnIndex("s_long")));
                maDoctype.setS_lat(res.getString(res.getColumnIndex("s_lat")));
                maDoctype.setIsAdditionSite(1);
                list.add(maDoctype);
                res.moveToNext();

            }

        } catch (Exception e) {
            Log.d("Error", e.toString());
        } finally {
            if (res != null)
                res.close();
            db.close();
        }


        return list;
    }


    //endregion

    //region Inbox
    //TODO:======================== INBOX ================================

    public boolean updateSendStatus(String autoDocNo, String sendStatus) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;
        try {
            String updateReadStatus = "UPDATE  qa_inbox set SendStatus= '" + sendStatus + "' WHERE AutoDocNo= '" + autoDocNo + "'";
            db.execSQL(updateReadStatus);
            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public boolean updateReadStatus(String autoDocNo, String readStatus) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();
            data.put("ReadStatus", readStatus);
            String updateReadStatus = "UPDATE  qa_inbox set ReadStatus= '" + readStatus + "' WHERE AutoDocNo= '" + autoDocNo + "'";
            db.execSQL(updateReadStatus);
            //res = db.update("qa_inbox", data, "AutoDocNo= '" + autoDocNo+ "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public int checkAndInsertAutoDocNo(List<ListInboxData> inboxData) {
        int mCount = 0;
        Cursor res = null;
        SQLiteDatabase db = null;
        db = this.getReadableDatabase();
        try {
            for (int i = 0; i < inboxData.size(); i++) {

                List<ListInboxData> mInboxData = new ArrayList<>();
                res = db.rawQuery("select AutoDocNo from qa_inbox where AutoDocNo ='" + inboxData.get(i).getAutoDocNo() + "'", null);
                res.moveToFirst();
                if (res.getCount() > 0) {

                } else {
                    mInboxData.add(inboxData.get(i));
                    mInsertQaInox(mInboxData, db);
                    mCount++;
                    Log.d("Result", "No data was found in the db!" + inboxData.get(i).getAutoDocNo());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return mCount;
    }

    public Long mInsertQaInox(List<ListInboxData> inboxData, SQLiteDatabase db) {


        Long idInsert = -1L;

        for (int i = 0; i < inboxData.size(); i++) {
//            SQLiteDatabase db = this.getReadableDatabase();
            try {

                ContentValues contentValues = new ContentValues();
                contentValues.put("ProcessType", inboxData.get(i).getProcessType());
                contentValues.put("IsVanIncharge", inboxData.get(i).getIsVanIncharge());
                contentValues.put("SubProcess", inboxData.get(i).getSubProcess());
                contentValues.put("Remarks", inboxData.get(i).getRemarks());
                contentValues.put("UserID", inboxData.get(i).getUserID());
                contentValues.put("ReadStatus", inboxData.get(i).getReadStatus());
                contentValues.put("UserName", inboxData.get(i).getUserName());
                contentValues.put("PinStatus", inboxData.get(i).getPinStatus());
                contentValues.put("Priority", inboxData.get(i).getPriority());
                contentValues.put("CurrentVersionNo", inboxData.get(i).getCurrentVersionNo());
                contentValues.put("AutoDocNo", inboxData.get(i).getAutoDocNo());

                if (inboxData.get(i).getNextActions().size() != 0) {
                    contentValues.put("ReleaseOption", inboxData.get(i).getNextActions().get(0).getReleaseOption());
                    contentValues.put("RevisonOption", inboxData.get(i).getNextActions().get(0).getRevisonOption());
                    contentValues.put("ControlTypeID", inboxData.get(i).getNextActions().get(0).getControlTypeID());
                    contentValues.put("SubmitButtonID", inboxData.get(i).getNextActions().get(0).getSubmitButtonID());
                    contentValues.put("RoleDes", inboxData.get(i).getNextActions().get(0).getRoleDes());
                    contentValues.put("RoleCode", inboxData.get(i).getNextActions().get(0).getRoleCode());
                    contentValues.put("FeedBackOp", inboxData.get(i).getNextActions().get(0).getFeedBackOp());
                    contentValues.put("SubmitButtonType", inboxData.get(i).getNextActions().get(0).getSubmitButtonType());
                    contentValues.put("LeadTime", inboxData.get(i).getNextActions().get(0).getLeadTime());
                    contentValues.put("ReleaseRequestOp", inboxData.get(i).getNextActions().get(0).getReleaseRequestOp());
                    contentValues.put("ActivityName", inboxData.get(i).getNextActions().get(0).getActivityName());
                    contentValues.put("NextStepNO", inboxData.get(i).getNextActions().get(0).getNextStepNO());
                    contentValues.put("IsRejectable", inboxData.get(i).getNextActions().get(0).getIsRejectable());
                } else {
                    contentValues.put("ReleaseOption", "");
                    contentValues.put("RevisonOption", "");
                    contentValues.put("ControlTypeID", "");
                    contentValues.put("SubmitButtonID", "");
                    contentValues.put("RoleDes", "");
                    contentValues.put("RoleCode", "");
                    contentValues.put("FeedBackOp", "");
                    contentValues.put("SubmitButtonType", "");
                    contentValues.put("LeadTime", "");
                    contentValues.put("ReleaseRequestOp", "");
                    contentValues.put("ActivityName", "");
                    contentValues.put("NextStepNO", "");
                    contentValues.put("IsRejectable", "");

                }

                contentValues.put("OtherRemarks", inboxData.get(i).getOtherRemarks());
                contentValues.put("SubProcessVersion", inboxData.get(i).getSubProcessVersion());
                contentValues.put("MessageID", inboxData.get(i).getMessageID());
                contentValues.put("Process", inboxData.get(i).getProcess());
                contentValues.put("DocumentNo", inboxData.get(i).getDocumentNo());
                contentValues.put("RecievedDate", inboxData.get(i).getRecievedDate());
                contentValues.put("MessageType", inboxData.get(i).getMessageType());
                contentValues.put("Department", inboxData.get(i).getDepartment());
                contentValues.put("ProcessDescription", inboxData.get(i).getProcessDescription());
                contentValues.put("UserPicPath", inboxData.get(i).getUserPicPath());
                contentValues.put("Designation", inboxData.get(i).getDesignation());
                contentValues.put("MessageText", inboxData.get(i).getMessageText());
                contentValues.put("RetailSiteCode", inboxData.get(i).getRetailSiteCode());
                contentValues.put("DocType", inboxData.get(i).getDocType());
                contentValues.put("DocYear", inboxData.get(i).getDocYear());
                contentValues.put("DocDate", inboxData.get(i).getDocDate());

                contentValues.put("SendStatus", inboxData.get(i).getSendStatus());
                contentValues.put("Lat", inboxData.get(i).getLat());
                contentValues.put("Long", inboxData.get(i).getLong());
                contentValues.put("LastResponse", inboxData.get(i).getLastResponse());

                idInsert = db.insert("qa_inbox", null, contentValues);


            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                /*if (db != null)
                    db.close();*/
            }
        }
        return idInsert;
    }

    public Long InsertQaInox(List<ListInboxData> inboxData) {


        Long idInsert = -1L;

        for (int i = 0; i < inboxData.size(); i++) {
            SQLiteDatabase db = this.getReadableDatabase();
            try {

                ContentValues contentValues = new ContentValues();
                contentValues.put("ProcessType", inboxData.get(i).getProcessType());
                contentValues.put("IsVanIncharge", inboxData.get(i).getIsVanIncharge());
                contentValues.put("SubProcess", inboxData.get(i).getSubProcess());
                contentValues.put("Remarks", inboxData.get(i).getRemarks());
                contentValues.put("UserID", inboxData.get(i).getUserID());
                contentValues.put("ReadStatus", inboxData.get(i).getReadStatus());
                contentValues.put("UserName", inboxData.get(i).getUserName());
                contentValues.put("PinStatus", inboxData.get(i).getPinStatus());
                contentValues.put("Priority", inboxData.get(i).getPriority());
                contentValues.put("CurrentVersionNo", inboxData.get(i).getCurrentVersionNo());
                contentValues.put("AutoDocNo", inboxData.get(i).getAutoDocNo());

                if (inboxData.get(i).getNextActions().size() != 0) {
                    contentValues.put("ReleaseOption", inboxData.get(i).getNextActions().get(0).getReleaseOption());
                    contentValues.put("RevisonOption", inboxData.get(i).getNextActions().get(0).getRevisonOption());
                    contentValues.put("ControlTypeID", inboxData.get(i).getNextActions().get(0).getControlTypeID());
                    contentValues.put("SubmitButtonID", inboxData.get(i).getNextActions().get(0).getSubmitButtonID());
                    contentValues.put("RoleDes", inboxData.get(i).getNextActions().get(0).getRoleDes());
                    contentValues.put("RoleCode", inboxData.get(i).getNextActions().get(0).getRoleCode());
                    contentValues.put("FeedBackOp", inboxData.get(i).getNextActions().get(0).getFeedBackOp());
                    contentValues.put("SubmitButtonType", inboxData.get(i).getNextActions().get(0).getSubmitButtonType());
                    contentValues.put("LeadTime", inboxData.get(i).getNextActions().get(0).getLeadTime());
                    contentValues.put("ReleaseRequestOp", inboxData.get(i).getNextActions().get(0).getReleaseRequestOp());
                    contentValues.put("ActivityName", inboxData.get(i).getNextActions().get(0).getActivityName());
                    contentValues.put("NextStepNO", inboxData.get(i).getNextActions().get(0).getNextStepNO());
                    contentValues.put("IsRejectable", inboxData.get(i).getNextActions().get(0).getIsRejectable());
                } else {
                    contentValues.put("ReleaseOption", "");
                    contentValues.put("RevisonOption", "");
                    contentValues.put("ControlTypeID", "");
                    contentValues.put("SubmitButtonID", "");
                    contentValues.put("RoleDes", "");
                    contentValues.put("RoleCode", "");
                    contentValues.put("FeedBackOp", "");
                    contentValues.put("SubmitButtonType", "");
                    contentValues.put("LeadTime", "");
                    contentValues.put("ReleaseRequestOp", "");
                    contentValues.put("ActivityName", "");
                    contentValues.put("NextStepNO", "");
                    contentValues.put("IsRejectable", "");

                }

                contentValues.put("OtherRemarks", inboxData.get(i).getOtherRemarks());
                contentValues.put("SubProcessVersion", inboxData.get(i).getSubProcessVersion());
                contentValues.put("MessageID", inboxData.get(i).getMessageID());
                contentValues.put("Process", inboxData.get(i).getProcess());
                contentValues.put("DocumentNo", inboxData.get(i).getDocumentNo());
                contentValues.put("RecievedDate", inboxData.get(i).getRecievedDate());
                contentValues.put("MessageType", inboxData.get(i).getMessageType());
                contentValues.put("Department", inboxData.get(i).getDepartment());
                contentValues.put("ProcessDescription", inboxData.get(i).getProcessDescription());
                contentValues.put("UserPicPath", inboxData.get(i).getUserPicPath());
                contentValues.put("Designation", inboxData.get(i).getDesignation());
                contentValues.put("MessageText", inboxData.get(i).getMessageText());
                contentValues.put("RetailSiteCode", inboxData.get(i).getRetailSiteCode());
                contentValues.put("DocType", inboxData.get(i).getDocType());
                contentValues.put("DocYear", inboxData.get(i).getDocYear());

                contentValues.put("DocDate", inboxData.get(i).getDocDate());

                idInsert = db.insert("qa_inbox", null, contentValues);


            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                if (db != null)
                    db.close();
            }
        }
        return idInsert;
    }

    public List<Inbox_FetchData> GetInbox(String check) {

        Cursor res = null;
        List<Inbox_FetchData> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<Inbox_FetchData>();
            db = this.getReadableDatabase();
            String qryStr = "select * from qa_inbox WHERE SendStatus = " + SendStatusConstants.FRESH + " OR SendStatus = " + SendStatusConstants.EDITED + "";

            if (check.equalsIgnoreCase("0")) {
                qryStr = qryStr + " ORDER BY PinStatus DESC,DocumentNo DESC";
            } else if (check.equalsIgnoreCase("1")) {
                qryStr = qryStr + " ORDER BY RecievedDate ASC;";
            } else if (check.equalsIgnoreCase("2")) {
                qryStr = qryStr + " ORDER BY Department ASC;";
            } else if (check.equalsIgnoreCase("3")) {
                qryStr = qryStr + " ORDER BY Priority DESC;";
            } else if (check.equalsIgnoreCase("4")) {
                qryStr = qryStr + " ORDER BY UserName ASC;";
            } else if (check.equalsIgnoreCase("5")) {
                qryStr = qryStr + " ORDER BY Designation DESC;";
            } else if (check.equalsIgnoreCase("6")) {
                qryStr = qryStr + " ORDER BY NextStepNO DESC;";
            } else if (check.equalsIgnoreCase("7")) {
                qryStr = qryStr + " ORDER BY PinStatus DESC, RecievedDate ASC;";
            }
            res = db.rawQuery(qryStr, null);
            res.moveToFirst();


            while (!res.isAfterLast()) {
                Inbox_FetchData maDoctype = new Inbox_FetchData();
                maDoctype.setInboxId(res.getInt(res.getColumnIndex("id")));
                maDoctype.setProcessType(res.getString(res.getColumnIndex("ProcessType")));
                maDoctype.setIsVanIncharge(res.getString(res.getColumnIndex("IsVanIncharge")));
                maDoctype.setSubProcess(res.getString(res.getColumnIndex("SubProcess")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setUserID(res.getString(res.getColumnIndex("UserID")));
                maDoctype.setReadStatus(res.getString(res.getColumnIndex("ReadStatus")));
                maDoctype.setUserName(res.getString(res.getColumnIndex("UserName")));
                maDoctype.setPinStatus(res.getString(res.getColumnIndex("PinStatus")));
                maDoctype.setPriority(res.getString(res.getColumnIndex("Priority")));
                maDoctype.setCurrentVersionNo(res.getString(res.getColumnIndex("CurrentVersionNo")));
                maDoctype.setAutoDocNo(res.getString(res.getColumnIndex("AutoDocNo")));
                maDoctype.setReleaseOption(res.getString(res.getColumnIndex("ReleaseOption")));
                maDoctype.setRevisonOption(res.getString(res.getColumnIndex("RevisonOption")));
                maDoctype.setControlTypeID(res.getString(res.getColumnIndex("ControlTypeID")));
                maDoctype.setSubmitButtonID(res.getString(res.getColumnIndex("SubmitButtonID")));
                maDoctype.setRoleCode(res.getString(res.getColumnIndex("RoleCode")));
                maDoctype.setRoleDes(res.getString(res.getColumnIndex("RoleDes")));
                maDoctype.setFeedBackOp(res.getString(res.getColumnIndex("FeedBackOp")));
                maDoctype.setSubmitButtonType(res.getString(res.getColumnIndex("SubmitButtonType")));
                maDoctype.setLeadTime(res.getString(res.getColumnIndex("LeadTime")));
                maDoctype.setReleaseRequestOp(res.getString(res.getColumnIndex("ReleaseRequestOp")));
                maDoctype.setActivityName(res.getString(res.getColumnIndex("ActivityName")));
                maDoctype.setNextStepNO(res.getString(res.getColumnIndex("NextStepNO")));
                maDoctype.setOtherRemarks(res.getString(res.getColumnIndex("OtherRemarks")));
                maDoctype.setSubProcessVersion(res.getString(res.getColumnIndex("SubProcessVersion")));
                maDoctype.setProcess(res.getString(res.getColumnIndex("Process")));
                maDoctype.setDocumentNo(res.getString(res.getColumnIndex("DocumentNo")));
                maDoctype.setMessageType(res.getString(res.getColumnIndex("MessageType")));
                maDoctype.setDepartment(res.getString(res.getColumnIndex("Department")));
                maDoctype.setProcessDescription(res.getString(res.getColumnIndex("ProcessDescription")));
                maDoctype.setUserPicPath(res.getString(res.getColumnIndex("UserPicPath")));
                maDoctype.setRecievedDate(res.getString(res.getColumnIndex("RecievedDate")));
                maDoctype.setDesignation(res.getString(res.getColumnIndex("Designation")));
                maDoctype.setMessageText(res.getString(res.getColumnIndex("MessageText")));
                maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("RetailSiteCode")));
                maDoctype.setDocType(res.getString(res.getColumnIndex("DocType")));
                maDoctype.setDocYear(res.getString(res.getColumnIndex("DocYear")));
                maDoctype.setIsRejectable(res.getString(res.getColumnIndex("IsRejectable")));
                maDoctype.setDocDate(res.getString(res.getColumnIndex("DocDate")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<Inbox_FetchData> GetOutbox(String check) {

        Cursor res = null;
        List<Inbox_FetchData> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<Inbox_FetchData>();
            db = this.getReadableDatabase();
            String qryStr = "select * from qa_inbox WHERE SendStatus = " + SendStatusConstants.READY_TO_SEND + " OR SendStatus = " + SendStatusConstants.SEND_ERROR + "";

            if (check.equalsIgnoreCase("0")) {
                qryStr = qryStr + " ORDER BY PinStatus DESC,DocumentNo DESC";
            } else if (check.equalsIgnoreCase("1")) {
                qryStr = qryStr + " ORDER BY RecievedDate ASC;";
            } else if (check.equalsIgnoreCase("2")) {
                qryStr = qryStr + " ORDER BY Department ASC;";
            } else if (check.equalsIgnoreCase("3")) {
                qryStr = qryStr + " ORDER BY Priority DESC;";
            } else if (check.equalsIgnoreCase("4")) {
                qryStr = qryStr + "ORDER BY UserName ASC;";
            } else if (check.equalsIgnoreCase("5")) {
                qryStr = qryStr + " ORDER BY Designation DESC;";
            } else if (check.equalsIgnoreCase("6")) {
                qryStr = qryStr + " ORDER BY NextStepNO DESC;";
            } else if (check.equalsIgnoreCase("7")) {
                qryStr = qryStr + " ORDER BY RecievedDate ASC;";
            }
            res = db.rawQuery(qryStr, null);
            res.moveToFirst();


            while (!res.isAfterLast()) {
                Inbox_FetchData maDoctype = new Inbox_FetchData();
                maDoctype.setInboxId(res.getInt(res.getColumnIndex("id")));
                maDoctype.setProcessType(res.getString(res.getColumnIndex("ProcessType")));
                maDoctype.setIsVanIncharge(res.getString(res.getColumnIndex("IsVanIncharge")));
                maDoctype.setSubProcess(res.getString(res.getColumnIndex("SubProcess")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setUserID(res.getString(res.getColumnIndex("UserID")));
                maDoctype.setReadStatus(res.getString(res.getColumnIndex("ReadStatus")));
                maDoctype.setUserName(res.getString(res.getColumnIndex("UserName")));
                maDoctype.setPinStatus(res.getString(res.getColumnIndex("PinStatus")));
                maDoctype.setPriority(res.getString(res.getColumnIndex("Priority")));
                maDoctype.setCurrentVersionNo(res.getString(res.getColumnIndex("CurrentVersionNo")));
                maDoctype.setAutoDocNo(res.getString(res.getColumnIndex("AutoDocNo")));
                maDoctype.setReleaseOption(res.getString(res.getColumnIndex("ReleaseOption")));
                maDoctype.setRevisonOption(res.getString(res.getColumnIndex("RevisonOption")));
                maDoctype.setControlTypeID(res.getString(res.getColumnIndex("ControlTypeID")));
                maDoctype.setSubmitButtonID(res.getString(res.getColumnIndex("SubmitButtonID")));
                maDoctype.setRoleCode(res.getString(res.getColumnIndex("RoleCode")));
                maDoctype.setRoleDes(res.getString(res.getColumnIndex("RoleDes")));
                maDoctype.setFeedBackOp(res.getString(res.getColumnIndex("FeedBackOp")));
                maDoctype.setSubmitButtonType(res.getString(res.getColumnIndex("SubmitButtonType")));
                maDoctype.setLeadTime(res.getString(res.getColumnIndex("LeadTime")));
                maDoctype.setReleaseRequestOp(res.getString(res.getColumnIndex("ReleaseRequestOp")));
                maDoctype.setActivityName(res.getString(res.getColumnIndex("ActivityName")));
                maDoctype.setNextStepNO(res.getString(res.getColumnIndex("NextStepNO")));
                maDoctype.setOtherRemarks(res.getString(res.getColumnIndex("OtherRemarks")));
                maDoctype.setSubProcessVersion(res.getString(res.getColumnIndex("SubProcessVersion")));
                maDoctype.setProcess(res.getString(res.getColumnIndex("Process")));
                maDoctype.setDocumentNo(res.getString(res.getColumnIndex("DocumentNo")));
                maDoctype.setMessageType(res.getString(res.getColumnIndex("MessageType")));
                maDoctype.setDepartment(res.getString(res.getColumnIndex("Department")));
                maDoctype.setProcessDescription(res.getString(res.getColumnIndex("ProcessDescription")));
                maDoctype.setUserPicPath(res.getString(res.getColumnIndex("UserPicPath")));
                maDoctype.setRecievedDate(res.getString(res.getColumnIndex("RecievedDate")));
                maDoctype.setDesignation(res.getString(res.getColumnIndex("Designation")));
                maDoctype.setMessageText(res.getString(res.getColumnIndex("MessageText")));
                maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("RetailSiteCode")));
                maDoctype.setDocType(res.getString(res.getColumnIndex("DocType")));
                maDoctype.setDocYear(res.getString(res.getColumnIndex("DocYear")));
                maDoctype.setIsRejectable(res.getString(res.getColumnIndex("IsRejectable")));
                maDoctype.setDocDate(res.getString(res.getColumnIndex("DocDate")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }


    public void deletefrominbox(String autoDocNo) {
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            String deleteqa_inbox = "DELETE FROM qa_inbox WHERE AutoDocNo = '" + autoDocNo + "'";
            db.execSQL(deleteqa_inbox);
            //String deletelt_possible_reasons = "DELETE FROM ri_approve_side_attachment WHERE AutoDocNo='" + autoDocNo + "'";
            //db.execSQL(deletelt_possible_reasons);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }

    public int countofinboxmessages() {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor mCount = db.rawQuery("select count(*) from qa_inbox", null);
        mCount.moveToFirst();
        int count = mCount.getInt(0);
        mCount.close();
        Log.d("DbCount", String.valueOf(count));
        db.close();

        return count;
    }

    public List<Inbox_FetchData> searchfrominbox(String username, String dep, String category, String stage, String docu, String tank, String urgent, String status, String deadline) {

        Cursor res = null;
        List<Inbox_FetchData> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<Inbox_FetchData>();
            db = this.getReadableDatabase();


            res = db.rawQuery("SELECT * FROM qa_inbox" + " WHERE UserName LIKE '%" + username + "%' AND Department LIKE '% " + dep + "%' AND Process LIKE '%" + category + "%' AND NextStepNO LIKE '%" + stage + "%' AND DocumentNo LIKE '%" + docu + "%' AND Priority LIKE '%" + urgent + "%' AND ReadStatus LIKE '%" + status + "%' ", null);
            res.moveToFirst();
            if (res.getCount() > 0) {
                while (res.isAfterLast() == false) {
                    Inbox_FetchData maDoctype = new Inbox_FetchData();
                    maDoctype.setProcessType(res.getString(res.getColumnIndex("ProcessType")));
                    maDoctype.setIsVanIncharge(res.getString(res.getColumnIndex("IsVanIncharge")));
                    maDoctype.setSubProcess(res.getString(res.getColumnIndex("SubProcess")));
                    maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                    maDoctype.setUserID(res.getString(res.getColumnIndex("UserID")));
                    maDoctype.setReadStatus(res.getString(res.getColumnIndex("ReadStatus")));
                    maDoctype.setUserName(res.getString(res.getColumnIndex("UserName")));
                    maDoctype.setPinStatus(res.getString(res.getColumnIndex("PinStatus")));
                    maDoctype.setPriority(res.getString(res.getColumnIndex("Priority")));
                    maDoctype.setCurrentVersionNo(res.getString(res.getColumnIndex("CurrentVersionNo")));
                    maDoctype.setAutoDocNo(res.getString(res.getColumnIndex("AutoDocNo")));
                    maDoctype.setReleaseOption(res.getString(res.getColumnIndex("ReleaseOption")));
                    maDoctype.setRevisonOption(res.getString(res.getColumnIndex("RevisonOption")));
                    maDoctype.setControlTypeID(res.getString(res.getColumnIndex("ControlTypeID")));
                    maDoctype.setSubmitButtonID(res.getString(res.getColumnIndex("SubmitButtonID")));
                    maDoctype.setRoleDes(res.getString(res.getColumnIndex("RoleDes")));
                    maDoctype.setRoleCode(res.getString(res.getColumnIndex("RoleCode")));
                    maDoctype.setFeedBackOp(res.getString(res.getColumnIndex("FeedBackOp")));
                    maDoctype.setSubmitButtonType(res.getString(res.getColumnIndex("SubmitButtonType")));
                    maDoctype.setLeadTime(res.getString(res.getColumnIndex("LeadTime")));
                    maDoctype.setReleaseRequestOp(res.getString(res.getColumnIndex("ReleaseRequestOp")));
                    maDoctype.setActivityName(res.getString(res.getColumnIndex("ActivityName")));
                    maDoctype.setNextStepNO(res.getString(res.getColumnIndex("NextStepNO")));
                    maDoctype.setSubProcessVersion(res.getString(res.getColumnIndex("SubProcessVersion")));
                    maDoctype.setProcess(res.getString(res.getColumnIndex("Process")));
                    maDoctype.setDocumentNo(res.getString(res.getColumnIndex("DocumentNo")));
                    maDoctype.setRecievedDate(res.getString(res.getColumnIndex("RecievedDate")));
                    maDoctype.setDepartment(res.getString(res.getColumnIndex("Department")));
                    maDoctype.setProcessDescription(res.getString(res.getColumnIndex("ProcessDescription")));
                    maDoctype.setMessageType(res.getString(res.getColumnIndex("MessageType")));
                    maDoctype.setDesignation(res.getString(res.getColumnIndex("Designation")));
                    maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("RetailSiteCode")));
                    maDoctype.setMessageText(res.getString(res.getColumnIndex("MessageText")));
                    maDoctype.setDocDate(res.getString(res.getColumnIndex("DocDate")));
                    maDoctype.setIsRejectable(res.getString(res.getColumnIndex("IsRejectable")));
                    maDoctype.setDocYear(res.getString(res.getColumnIndex("DocYear")));
                    maDoctype.setDocType(res.getString(res.getColumnIndex("DocType")));
                    list.add(maDoctype);
                    res.moveToNext();
                }
            } else {
                Log.d("Result", "No data was found in the system!");

            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;

    }

    public Long InsertDumyQaLocation(List<DataObject> dataObjects) {

        Log.d("vales in Model", dataObjects.get(0).getQvan_plan_title());
        Long idInsert = -1L;

        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("Qvan_End_date", dataObjects.get(0).getQvan_End_date());
            contentValues.put("Qvan_Start_date", dataObjects.get(0).getQvan_Start_date());
            contentValues.put("QVanTCPNo", dataObjects.get(0).getQVanTCPNo());
            contentValues.put("QVanCompCode", dataObjects.get(0).getQVanCompCode());
            contentValues.put("Qvan_plan_title", dataObjects.get(0).getQvan_plan_title());
            contentValues.put("QVanPeriod", dataObjects.get(0).getQVanPeriod());
            contentValues.put("Qvan_Creation_date", dataObjects.get(0).getQvan_Creation_date());
            contentValues.put("Qvan_QVan_id", dataObjects.get(0).getQvan_QVan_id());
            contentValues.put("QVanSiteCode", dataObjects.get(0).getQVanSiteCode());
            contentValues.put("QVan_plan_id_local", dataObjects.get(0).getQVan_plan_id_local());
            contentValues.put("Creator_id", dataObjects.get(0).getCreator_id());
            contentValues.put("Qvan_nature", dataObjects.get(0).getQvan_nature());
            contentValues.put("QVanYear", dataObjects.get(0).getQVanYear());
            contentValues.put("Qvan_Territory_id", dataObjects.get(0).getQvan_Territory_id());
            idInsert = db.insert("Dumy_qavan_TourPlanner", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();

        }
        return idInsert;
    }


    public boolean UpdatePinStatus(String documentid, String status) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();
            data.put("PinStatus", status);

            res = db.update("qa_inbox", data, "DocumentNo= '" + documentid.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    //endregion

    //region sentitem

    public Long insertsentitems(ListSentItems listOutboxData) {
        Log.d("Data in object", listOutboxData.getDate() + "," + listOutboxData.getPlanname());
        SQLiteDatabase db = this.getReadableDatabase();

        Long idInsert = -1L;
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("user_id", listOutboxData.getUserid());
            contentValues.put("user_name", listOutboxData.getUsername());
            contentValues.put("postion", listOutboxData.getPosition());
            contentValues.put("documentid", listOutboxData.getDocumentid());
            contentValues.put("planname", listOutboxData.getPlanname());
            contentValues.put("readstatus", listOutboxData.getReadstatus());
            contentValues.put("date", listOutboxData.getDate());
            contentValues.put("nextaction", listOutboxData.getNextaction());

            idInsert = db.insert("sentitems", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return idInsert;
    }

    public List<ListSentItems> GetSentitems() {

        Cursor res = null;
        List<ListSentItems> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<ListSentItems>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from sentitems", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                ListSentItems maDoctype = new ListSentItems();
                maDoctype.setUserid(res.getString(res.getColumnIndex("user_id")));
                maDoctype.setUsername(res.getString(res.getColumnIndex("user_name")));
                maDoctype.setPosition(res.getString(res.getColumnIndex("postion")));
                maDoctype.setDocumentid(res.getString(res.getColumnIndex("documentid")));
                maDoctype.setPlanname(res.getString(res.getColumnIndex("planname")));
                maDoctype.setReadstatus(res.getString(res.getColumnIndex("readstatus")));
                maDoctype.setDate(res.getString(res.getColumnIndex("date")));
                maDoctype.setNextaction(res.getString(res.getColumnIndex("nextaction")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }
    //endregion

    //region outbox
    //TODO:======================== OutBox ================================
    public Long insertoutbox(ListOutboxData listOutboxData) {
        Long idInsert = -1L;

        SQLiteDatabase db = this.getReadableDatabase();

        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("id", listOutboxData.getCounter());
            contentValues.put("user_name", listOutboxData.getUsername());
            contentValues.put("postion", listOutboxData.getPosition());
            contentValues.put("date", listOutboxData.getDate());
            contentValues.put("planname", listOutboxData.getPlanname());
            contentValues.put("planmodel", listOutboxData.getPlanmodel());
            contentValues.put("id_territory", listOutboxData.getId_territory());
            contentValues.put("id_qavan", listOutboxData.getId_qavan());
            contentValues.put("id_nature", listOutboxData.getId_nature());


            idInsert = db.insert("outbox", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<ListOutboxData> GetOutbox() {

        Cursor res = null;
        List<ListOutboxData> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<ListOutboxData>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from outbox", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {
                ListOutboxData maDoctype = new ListOutboxData();
                maDoctype.setCounter(res.getString(res.getColumnIndex("id")));
                maDoctype.setUsername(res.getString(res.getColumnIndex("user_name")));
                maDoctype.setPosition(res.getString(res.getColumnIndex("postion")));
                maDoctype.setDate(res.getString(res.getColumnIndex("date")));
                maDoctype.setPlanname(res.getString(res.getColumnIndex("planname")));
                maDoctype.setPlanmodel(res.getString(res.getColumnIndex("planmodel")));
                maDoctype.setId_territory(res.getString(res.getColumnIndex("id_territory")));
                maDoctype.setId_qavan(res.getString(res.getColumnIndex("id_qavan")));
                maDoctype.setId_nature(res.getString(res.getColumnIndex("id_nature")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public boolean deletefromoutbox(int id) {
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deleteqa_inbox = "DELETE FROM outbox where id =" + id;
            db.execSQL(deleteqa_inbox);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }

    public boolean UpdateOutbox(int id, String username, String postion, String date, String planname, String planmodel, String id_territory, String id_qavan, String id_nature) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;
        try {
            data = new ContentValues();
            data.put("user_name", username);
            data.put("postion", postion);
            data.put("date", date);
            data.put("planname", planname);
            data.put("planmodel", planmodel);
            data.put("id_territory", id_territory);
            data.put("id_qavan", id_qavan);
            data.put("id_nature", id_nature);


            res = db.update("outbox", data, "id=" + id, null) > 0;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        //   UPDATE qavan_TourPlannerLocation SET Qavanid="",Creator_id="",tour_plan_status="",dispenser_measurment_plan_id="",product_quality_plan=",tank_inspection_plan="",sales_data_plan="",stock_reconcelation_plan="",general_inpection_plan="",Plan_date="",Reason_id="",Sequence_id="",Remarks="",Status="" WHERE id=0;
        return res;
    }

    //endregion

    //region menu

    public Long insertmenu(List<MenuLabel> menuLabel) {
        Long idInsert = -1L;

        for (int i = 0; i < menuLabel.size(); i++) {
            SQLiteDatabase db = this.getReadableDatabase();
            try {

                ContentValues contentValues = new ContentValues();
                contentValues.put("Enabled", menuLabel.get(i).getEnabled());
                contentValues.put("menu_id", menuLabel.get(i).getID());
                contentValues.put("label", menuLabel.get(i).getLabel());


                idInsert = db.insert("menulabel", null, contentValues);

            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                if (db != null)
                    db.close();
            }
        }

        return idInsert;
    }

    public List<MenuLabel> GetMenuLabel() {

        Cursor res = null;
        List<MenuLabel> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<MenuLabel>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from menulabel", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {
                MenuLabel maDoctype = new MenuLabel();
                maDoctype.setEnabled(res.getString(res.getColumnIndex("Enabled")));
                maDoctype.setID(res.getString(res.getColumnIndex("menu_id")));
                maDoctype.setLabel(res.getString(res.getColumnIndex("label")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    //endregion

    //region fuel status
    //TODO:======================== Fuel Status Detail================================

    public boolean deletetankstatusByRetailSiteCode(String planId, String retailSiteCode) {
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deleteqa_tankststus = "DELETE FROM tanks_status WHERE plan_id =  " + planId + " AND retailsite_code = " + retailSiteCode + "";
            db.execSQL(deleteqa_tankststus);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }

    public Long insertankstatus(TanksMappingOnRecyclerView tanksMappingOnRecyclerViews) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("fueltype", tanksMappingOnRecyclerViews.getFueltype());
            contentValues.put("plan_id", tanksMappingOnRecyclerViews.getPlan_id());
            contentValues.put("retailsite_code", tanksMappingOnRecyclerViews.getRetailsite_code());
            // contentValues.put("Standard", tanksMappingOnRecyclerViews.getStandard());
            contentValues.put("Standard", "1");
            contentValues.put("Active", tanksMappingOnRecyclerViews.getActive());
            contentValues.put("StockUnit", tanksMappingOnRecyclerViews.getStockUnit());
            contentValues.put("CostCenterCode", tanksMappingOnRecyclerViews.getCostCenterCode());
            contentValues.put("TankDes", tanksMappingOnRecyclerViews.getTankDes());
            contentValues.put("CostCenterDes", tanksMappingOnRecyclerViews.getCostCenterDes());
            contentValues.put("Image", tanksMappingOnRecyclerViews.getImage());
            contentValues.put("Dry", tanksMappingOnRecyclerViews.getDry());
            contentValues.put("Remarks", tanksMappingOnRecyclerViews.getRemarks());
            contentValues.put("TankCode", tanksMappingOnRecyclerViews.getTankCode());
            contentValues.put("Water", tanksMappingOnRecyclerViews.getWater());

            idInsert = db.insert("tanks_status", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<TanksMappingOnRecyclerView> Gettankstatus(String type) {


        Cursor res = null;
        List<TanksMappingOnRecyclerView> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<TanksMappingOnRecyclerView>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from tanks_status WHERE TRIM(fueltype)= '" + type.trim() + "'", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {
                TanksMappingOnRecyclerView maDoctype = new TanksMappingOnRecyclerView();
                maDoctype.setFueltype(res.getString(res.getColumnIndex("fueltype")));
                maDoctype.setPlan_id(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRetailsite_code(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setStandard(res.getString(res.getColumnIndex("Standard")));
                maDoctype.setActive(res.getString(res.getColumnIndex("Active")));
                maDoctype.setStockUnit(res.getString(res.getColumnIndex("StockUnit")));
                maDoctype.setCostCenterCode(res.getString(res.getColumnIndex("CostCenterCode")));
                maDoctype.setTankDes(res.getString(res.getColumnIndex("TankDes")));
                maDoctype.setCostCenterDes(res.getString(res.getColumnIndex("CostCenterDes")));
                maDoctype.setImage(res.getString(res.getColumnIndex("Image")));
                maDoctype.setDry(res.getString(res.getColumnIndex("Dry")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setTankCode(res.getString(res.getColumnIndex("TankCode")));
                maDoctype.setWater(res.getString(res.getColumnIndex("Water")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<TanksMappingOnRecyclerView> GettankDetailbytankcode(String id, String tankcode) {


        Cursor res = null;
        List<TanksMappingOnRecyclerView> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<TanksMappingOnRecyclerView>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from tanks_status WHERE TRIM(retailsite_code)= '" + id.trim() + "' AND TRIM(TankCode)= '" + tankcode.trim(), null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {
                TanksMappingOnRecyclerView maDoctype = new TanksMappingOnRecyclerView();
                maDoctype.setFueltype(res.getString(res.getColumnIndex("fueltype")));
                maDoctype.setRetailsite_code(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setStandard(res.getString(res.getColumnIndex("Standard")));
                maDoctype.setActive(res.getString(res.getColumnIndex("Active")));
                maDoctype.setStockUnit(res.getString(res.getColumnIndex("StockUnit")));
                maDoctype.setCostCenterCode(res.getString(res.getColumnIndex("CostCenterCode")));
                maDoctype.setTankDes(res.getString(res.getColumnIndex("TankDes")));
                maDoctype.setCostCenterDes(res.getString(res.getColumnIndex("CostCenterDes")));
                maDoctype.setImage(res.getString(res.getColumnIndex("Image")));
                maDoctype.setDry(res.getString(res.getColumnIndex("Dry")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setTankCode(res.getString(res.getColumnIndex("TankCode")));
                maDoctype.setWater(res.getString(res.getColumnIndex("Water")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<TanksMappingOnRecyclerView> GettankstatusbytankRetailSiteCode(String code) {

        Cursor res = null;
        List<TanksMappingOnRecyclerView> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<TanksMappingOnRecyclerView>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from tanks_status WHERE TRIM(plan_id)= '" + code.trim() + "'", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {
                TanksMappingOnRecyclerView maDoctype = new TanksMappingOnRecyclerView();
                maDoctype.setFueltype(res.getString(res.getColumnIndex("fueltype")));
                maDoctype.setPlan_id(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRetailsite_code(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setStandard(res.getString(res.getColumnIndex("Standard")));
                maDoctype.setActive(res.getString(res.getColumnIndex("Active")));
                maDoctype.setStockUnit(res.getString(res.getColumnIndex("StockUnit")));
                maDoctype.setCostCenterCode(res.getString(res.getColumnIndex("CostCenterCode")));
                maDoctype.setTankDes(res.getString(res.getColumnIndex("TankDes")));
                maDoctype.setCostCenterDes(res.getString(res.getColumnIndex("CostCenterDes")));
                maDoctype.setImage(res.getString(res.getColumnIndex("Image")));
                maDoctype.setDry(res.getString(res.getColumnIndex("Dry")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setTankCode(res.getString(res.getColumnIndex("TankCode")));
                maDoctype.setWater(res.getString(res.getColumnIndex("Water")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<TanksMappingOnRecyclerView> GettankstatusbytankRetailSiteCodeAndTankName(String code, String tank) {

        Log.d("code", code);
        Log.d("Tank", tank);


        Cursor res = null;
        List<TanksMappingOnRecyclerView> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<TanksMappingOnRecyclerView>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from tanks_status WHERE TRIM(plan_id)= '" + code.trim() + "' AND TRIM(fueltype)= '" + tank.trim() + "'", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {
                TanksMappingOnRecyclerView maDoctype = new TanksMappingOnRecyclerView();
                maDoctype.setFueltype(res.getString(res.getColumnIndex("fueltype")));
                maDoctype.setRetailsite_code(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRetailsite_code(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setStandard(res.getString(res.getColumnIndex("Standard")));
                maDoctype.setActive(res.getString(res.getColumnIndex("Active")));
                maDoctype.setStockUnit(res.getString(res.getColumnIndex("StockUnit")));
                maDoctype.setCostCenterCode(res.getString(res.getColumnIndex("CostCenterCode")));
                maDoctype.setTankDes(res.getString(res.getColumnIndex("TankDes")));
                maDoctype.setCostCenterDes(res.getString(res.getColumnIndex("CostCenterDes")));
                maDoctype.setImage(res.getString(res.getColumnIndex("Image")));
                maDoctype.setDry(res.getString(res.getColumnIndex("Dry")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setTankCode(res.getString(res.getColumnIndex("TankCode")));
                maDoctype.setWater(res.getString(res.getColumnIndex("Water")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<TanksMappingOnRecyclerView> GettankDetailbytankRetailSiteCodeAndTankCode(String code, String tankCode) {


        Cursor res = null;
        List<TanksMappingOnRecyclerView> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<TanksMappingOnRecyclerView>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from tanks_status WHERE TRIM(plan_id)= '" + code.trim() + "' AND TRIM(TankCode)= '" + tankCode.trim() + "'", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {
                TanksMappingOnRecyclerView maDoctype = new TanksMappingOnRecyclerView();
                maDoctype.setFueltype(res.getString(res.getColumnIndex("fueltype")));
                maDoctype.setPlan_id(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRetailsite_code(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setStandard(res.getString(res.getColumnIndex("Standard")));
                maDoctype.setActive(res.getString(res.getColumnIndex("Active")));
                maDoctype.setStockUnit(res.getString(res.getColumnIndex("StockUnit")));
                maDoctype.setCostCenterCode(res.getString(res.getColumnIndex("CostCenterCode")));
                maDoctype.setTankDes(res.getString(res.getColumnIndex("TankDes")));
                maDoctype.setCostCenterDes(res.getString(res.getColumnIndex("CostCenterDes")));
                maDoctype.setImage(res.getString(res.getColumnIndex("Image")));
                maDoctype.setDry(res.getString(res.getColumnIndex("Dry")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setTankCode(res.getString(res.getColumnIndex("TankCode")));
                maDoctype.setWater(res.getString(res.getColumnIndex("Water")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public boolean deletefromtankstatus() {
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deleteqa_tankststus = "DELETE FROM tanks_status";
            db.execSQL(deleteqa_tankststus);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }

    public List<TankStatus> GetallTanksDetailDataForServer() {
        Cursor res = null;
        List<TankStatus> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<TankStatus>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from tanks_status", null);
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                TankStatus maDoctype = new TankStatus();
                maDoctype.setStandard(res.getString(res.getColumnIndex("Standard")));
                maDoctype.setActive(res.getString(res.getColumnIndex("Active")));
                maDoctype.setStockUnit(res.getString(res.getColumnIndex("StockUnit")));
                maDoctype.setCostCenterCode(res.getString(res.getColumnIndex("CostCenterCode")));
                maDoctype.setTankDes(res.getString(res.getColumnIndex("TankDes")));
                maDoctype.setCostCenterDes(res.getString(res.getColumnIndex("CostCenterDes")));
                maDoctype.setImage(res.getString(res.getColumnIndex("Image")));
                maDoctype.setDry(res.getString(res.getColumnIndex("Dry")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setTankCode(res.getString(res.getColumnIndex("TankCode")));
                maDoctype.setWater(res.getString(res.getColumnIndex("Water")));
                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    //endregion

    //region fueltype
    //TODO:======================== Fuel Type ==================================
    public boolean deletefueltypeByRetailSiteCode(String planId, String retailSiteCode) {
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deleteqa_tankststus = "DELETE FROM fueltype WHERE plan_id = " + planId + " AND retailsite_code = " + retailSiteCode + "";
            db.execSQL(deleteqa_tankststus);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }

    public Long inserfueltype(String planid, String id, String name) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("plan_id", planid);
            contentValues.put("retailsite_code", id);
            contentValues.put("name", name);


            idInsert = db.insert("fueltype", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<FuelType> GetfueltypeByRetailSiteCode(String code, String rtsid) {

        Cursor res = null;
        List<FuelType> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<FuelType>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from fueltype where plan_id= '" + code.trim() + "' AND retailsite_code='" + rtsid + "'", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {
                FuelType maDoctype = new FuelType();
                maDoctype.setFueltype(res.getString(res.getColumnIndex("name")));
                maDoctype.setPlancode(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRoutesitecode(res.getString(res.getColumnIndex("retailsite_code")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public Boolean Getfueltypebname(String code, String rtscode, String name) {

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            res = db.rawQuery("select * from fueltype where TRIM(plan_id)= '" + code.trim() + "' AND TRIM(name)= '" + name.trim() + "' AND retailsite_code='" + rtscode + "'", null);
            res.moveToFirst();

            if (res.getCount() > 0) {
                flag = true;
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }

    public boolean deletefromfueltype() {
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deleteqa_tankststus = "DELETE FROM fueltype";
            db.execSQL(deleteqa_tankststus);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }

    public boolean UpdateTanks_Status(String tankcode, String drystatus, String water, String remarks) {
        Log.d("DRY VALUE", drystatus);

        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;
        try {
            data = new ContentValues();
            data.put("Dry", drystatus);
            data.put("Remarks", remarks);
            data.put("Water", water);
            res = db.update("tanks_status", data, "TankCode= '" + tankcode.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }
    //endregion

    //region Dispenser Measurment
    //TODO:==============================Dispenser Measurment====================

    public boolean deleteDispensorScreenData(String planId, String retailSiteCode) {
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deleteqa_ActionPlan = "DELETE FROM ActionPlan";
            db.execSQL(deleteqa_ActionPlan);
            String deleteqa_Reasion = "DELETE FROM Reasion";
            db.execSQL(deleteqa_ActionPlan);
            String deleteqa_fueltype = "DELETE FROM fueltype WHERE plan_id = " + planId + " AND retailsite_code = " + retailSiteCode + "";
            db.execSQL(deleteqa_fueltype);
            String deleteqa_tanks_description_dispenser = "DELETE FROM tanks_description_dispenser WHERE plan_id = " + planId + " AND retailsite_code = " + retailSiteCode + "";
            db.execSQL(deleteqa_tanks_description_dispenser);
            String deleteqa_dispenser_meaurment = "DELETE FROM dispenser_meaurment WHERE plan_id = " + planId + " AND retailsite_code = " + retailSiteCode + "";
            db.execSQL(deleteqa_dispenser_meaurment);
            String deleteqa_dispenser_meaurment_images = "DELETE FROM dispenser_meaurment_images WHERE plan_id = " + planId + " AND retailsite_code = " + retailSiteCode + "";
            db.execSQL(deleteqa_dispenser_meaurment_images);
            String deleteqa_nozzle = "DELETE FROM nozzle WHERE plan_id = " + planId + " AND retailsite_code = " + retailSiteCode + "";
            db.execSQL(deleteqa_nozzle);
            String deleteqa_SelectedReasionDispenserAndNozzleWise = "DELETE FROM SelectedReasionDispenserAndNozzleWise WHERE plan_id = " + planId + " AND retailsite_code = " + retailSiteCode + "";
            db.execSQL(deleteqa_SelectedReasionDispenserAndNozzleWise);
            String deleteqa_nozzle_images = "DELETE FROM nozzle_images WHERE plan_id = " + planId + " AND retailsite_code = " + retailSiteCode + "";
            db.execSQL(deleteqa_nozzle_images);

            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }

    public Long InsertActionPlan(List<Model_DispensorMeasurmentActionPlan> actionPlans) {

        Long idInsert = -1L;

        for (int i = 0; i < actionPlans.size(); i++) {
            SQLiteDatabase db = this.getReadableDatabase();
            try {

                ContentValues contentValues = new ContentValues();
                contentValues.put("Code", actionPlans.get(i).getCode());
                contentValues.put("Desc", actionPlans.get(i).getDesc());


                idInsert = db.insert("ActionPlan", null, contentValues);


            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                if (db != null)
                    db.close();
            }
        }
        return idInsert;
    }

    public Long InsertReaison(List<Model_DispensorMeasurment_Reaison> reaisons) {

        Long idInsert = -1L;
        for (int i = 0; i < reaisons.size(); i++) {
            SQLiteDatabase db = this.getReadableDatabase();


            try {

                ContentValues contentValues = new ContentValues();
                contentValues.put("Description", reaisons.get(i).getDescription());
                contentValues.put("Code", reaisons.get(i).getCode());
                idInsert = db.insert("Reasion", null, contentValues);


            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                if (db != null)
                    db.close();
            }
        }
        return idInsert;
    }

    public Long InsertSelectedReaisonNozzleWise(String planid, String rtsid, String tankcode, String dispenserid, String nozzleid, List<Model_DispensorMeasurment_SlectedReaison> reaisons) {

        Long idInsert = -1L;
        for (int i = 0; i < reaisons.size(); i++) {
            SQLiteDatabase db = this.getReadableDatabase();

            try {

                ContentValues contentValues = new ContentValues();
                contentValues.put("plan_id", planid);
                contentValues.put("retailsite_code", rtsid);
                contentValues.put("tankcode", tankcode);
                contentValues.put("dispensorid", dispenserid);
                contentValues.put("nozzleid", nozzleid);
                contentValues.put("Description", reaisons.get(i).getDescription());
                contentValues.put("Code", reaisons.get(i).getCode());
                idInsert = db.insert("SelectedReasionDispenserAndNozzleWise", null, contentValues);


            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                if (db != null)
                    db.close();
            }
        }
        return idInsert;
    }

    public Long InsertSelectedReaisonNozzleWise_Single(String planid, String rtsid, String tankcode, String dispenserid, String nozzleid, Model_DispensorMeasurment_SlectedReaison reaisons) {

        Long idInsert = -1L;

        SQLiteDatabase db = this.getReadableDatabase();

        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("plan_id", planid);
            contentValues.put("retailsite_code", rtsid);
            contentValues.put("tankcode", tankcode);
            contentValues.put("dispensorid", dispenserid);
            contentValues.put("nozzleid", nozzleid);
            contentValues.put("Description", reaisons.getDescription());
            contentValues.put("Code", reaisons.getCode());
            idInsert = db.insert("SelectedReasionDispenserAndNozzleWise", null, contentValues);


        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }


    public List<Model_DispensorMeasurmentActionPlan> GetActionPlan() {

        Cursor res = null;
        List<Model_DispensorMeasurmentActionPlan> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<Model_DispensorMeasurmentActionPlan>();
            list.add(new Model_DispensorMeasurmentActionPlan("-1", "Select Action Plan"));
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from ActionPlan", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                Model_DispensorMeasurmentActionPlan maDoctype = new Model_DispensorMeasurmentActionPlan();
                maDoctype.setCode(res.getString(res.getColumnIndex("Code")));
                maDoctype.setDesc(res.getString(res.getColumnIndex("Desc")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<Model_DispensorMeasurment_Reaison> GetReaison() {

        Cursor res = null;
        List<Model_DispensorMeasurment_Reaison> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<Model_DispensorMeasurment_Reaison>();
            list.add(new Model_DispensorMeasurment_Reaison("Select Reason", "-1"));
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from Reasion", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                Model_DispensorMeasurment_Reaison maDoctype = new Model_DispensorMeasurment_Reaison();
                maDoctype.setDescription(res.getString(res.getColumnIndex("Description")));
                maDoctype.setCode(res.getString(res.getColumnIndex("Code")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<Model_DispensorMeasurment_SlectedReaison> GetselectedReaisonNozzleWise(String planid, String rtsid, String tankcode, String dispenserid, String nozzleid) {

        Cursor res = null;
        List<Model_DispensorMeasurment_SlectedReaison> list = null;
        SQLiteDatabase db = null;
        try {

            list = new ArrayList<Model_DispensorMeasurment_SlectedReaison>();
            // list.add(new Model_DispensorMeasurment_SlectedReaison("Select Reason","-1"));
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from SelectedReasionDispenserAndNozzleWise WHERE plan_id='" + planid + "' AND retailsite_code ='" + rtsid + "' AND tankcode='" + tankcode + "' AND dispensorid='" + dispenserid + "' AND nozzleid='" + nozzleid + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                Model_DispensorMeasurment_SlectedReaison maDoctype = new Model_DispensorMeasurment_SlectedReaison();
                maDoctype.setPlanid(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRtsid(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setTankcode(res.getString(res.getColumnIndex("tankcode")));
                maDoctype.setDispensorid(res.getString(res.getColumnIndex("dispensorid")));
                maDoctype.setNozzleid(res.getString(res.getColumnIndex("nozzleid")));
                maDoctype.setDescription(res.getString(res.getColumnIndex("Description")));
                maDoctype.setCode(res.getString(res.getColumnIndex("Code")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<Model_DispensorMeasurment_SlectedReaison> GetselectedReaisonNozzleWiseServerSubmit(String planid, String rtsid, String tankcode, String dispenserid, String nozzleid) {

        Cursor res = null;
        List<Model_DispensorMeasurment_SlectedReaison> list = null;
        SQLiteDatabase db = null;
        try {

            list = new ArrayList<Model_DispensorMeasurment_SlectedReaison>();
            // list.add(new Model_DispensorMeasurment_SlectedReaison("Select Reason","-1"));
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from SelectedReasionDispenserAndNozzleWise WHERE plan_id='" + planid + "' AND retailsite_code ='" + rtsid + "' AND tankcode='" + tankcode + "' AND dispensorid='" + dispenserid + "' AND nozzleid='" + nozzleid + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                Model_DispensorMeasurment_SlectedReaison maDoctype = new Model_DispensorMeasurment_SlectedReaison();
                maDoctype.setDescription(res.getString(res.getColumnIndex("Description")));
                maDoctype.setCode(res.getString(res.getColumnIndex("Code")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }


    public boolean DeleteFromselectedReaisonNozzleWise(String planid, String rtsid, String tankcode, String dispenserid, String nozzleid, String code) {
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deleteqa_nozzleremarks = "DELETE FROM SelectedReasionDispenserAndNozzleWise WHERE plan_id='" + planid + "' AND retailsite_code ='" + rtsid + "' AND tankcode='" + tankcode + "' AND dispensorid='" + dispenserid + "' AND nozzleid='" + nozzleid + "' AND Code='" + code + "'";
            db.execSQL(deleteqa_nozzleremarks);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }

    public int checkselectedNozzleReasons(String planid, String rtsid, String tankcode, String dispenserid, String nozzleid, String code) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor mCount = db.rawQuery("select count(*) from SelectedReasionDispenserAndNozzleWise WHERE plan_id='" + planid + "' AND retailsite_code ='" + rtsid + "' AND tankcode ='" + tankcode + "' AND dispensorid ='" + dispenserid + "' AND nozzleid ='" + nozzleid + "' AND Code = '" + code + "'", null);
        int count = 0;
        if (mCount.moveToFirst()) count = mCount.getInt(0);

        mCount.close();
        db.close();

        return count;
    }


    public int checkcountactionplan() {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor mCount = db.rawQuery("select count(*) from ActionPlan", null);
        int count = 0;
        if (mCount.moveToFirst()) count = mCount.getInt(0);

        mCount.close();
        db.close();
        return count;
    }

    public int checkcountreasion() {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor mCount = db.rawQuery("select count(*) from Reasion", null);
        int count = 0;
        if (mCount.moveToFirst()) count = mCount.getInt(0);

        mCount.close();
        db.close();

        return count;
    }

    public Long insertankdetail_dispenser(Model_TankTypes_Dispenser model_tankTypes_dispenser) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("plan_id", model_tankTypes_dispenser.getPlan_id());
            contentValues.put("retailsite_code", model_tankTypes_dispenser.getRetailsitecode());
            contentValues.put("tankcode", model_tankTypes_dispenser.getTankcode());
            contentValues.put("tankdes", model_tankTypes_dispenser.getTankdetail());
            contentValues.put("fueltype", model_tankTypes_dispenser.getFuelname());


            idInsert = db.insert("tanks_description_dispenser", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }
    //TODO:Insert in tank Detail

    public Boolean checktankdetailbyroutecode_tankcode(String planid, String tankcode) {

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            res = db.rawQuery("select * from tanks_description_dispenser where TRIM(plan_id)= '" + planid.trim() + "' AND TRIM(tankcode)= '" + tankcode.trim() + "'", null);
            res.moveToFirst();

            if (res.getCount() > 0) {
                flag = true;
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }

    public List<Model_TankTypes_Dispenser> GettankstypeByRetailSiteCodeAndFuelname(String planid, String rtscode, String fuelname) {

        Cursor res = null;
        List<Model_TankTypes_Dispenser> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<Model_TankTypes_Dispenser>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from tanks_description_dispenser where plan_id= '" + planid.trim() + "' AND fueltype= '" + fuelname.trim() + "' AND retailsite_code= '" + rtscode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                Model_TankTypes_Dispenser maDoctype = new Model_TankTypes_Dispenser();
                maDoctype.setPlan_id(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRetailsitecode(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setTankcode(res.getString(res.getColumnIndex("tankcode")));
                maDoctype.setTankdetail(res.getString(res.getColumnIndex("tankdes")));
                maDoctype.setFuelname(res.getString(res.getColumnIndex("fueltype")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<Model_TankTypes_Dispenser> GettankstypeByRetailSiteCode_Dispenser(String planid) {

        Cursor res = null;
        List<Model_TankTypes_Dispenser> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<Model_TankTypes_Dispenser>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from tanks_description_dispenser where plan_id= '" + planid.trim() + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                Model_TankTypes_Dispenser maDoctype = new Model_TankTypes_Dispenser();
                maDoctype.setRetailsitecode(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRetailsitecode(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setTankcode(res.getString(res.getColumnIndex("tankcode")));
                maDoctype.setTankdetail(res.getString(res.getColumnIndex("tankdes")));
                maDoctype.setFuelname(res.getString(res.getColumnIndex("fueltype")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }


    public Long insert_dispenser_measurment(String planid,
                                            String retailsitecode,
                                            String fuelname,
                                            String tankcode,
                                            Model_DispensorMeasurmentDispenserDetail model_dispensorMeasurments) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("plan_id", planid);
            contentValues.put("retailsite_code", retailsitecode);
            contentValues.put("tankcode", model_dispensorMeasurments.getTankCode());
            contentValues.put("fueltype", fuelname);
            contentValues.put("dispensorid", model_dispensorMeasurments.getDispensorID());
            // contentValues.put("image", model_dispensorMeasurments.getImage());
            contentValues.put("remarks", model_dispensorMeasurments.getRemarks());


            idInsert = db.insert("dispenser_meaurment", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<Model_DispensorMeasurmentDispenserDetail> getDispenserDataFromDb(String planid, String rtscode, String tankcode) {
        Log.d("Site code", planid);
        Log.d("Tank Code", tankcode);
        Cursor res = null;
        List<Model_DispensorMeasurmentDispenserDetail> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<Model_DispensorMeasurmentDispenserDetail>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from dispenser_meaurment where plan_id= '" + planid.trim() + "' AND tankcode= '" + tankcode.trim() + "' AND retailsite_code= '" + rtscode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                Model_DispensorMeasurmentDispenserDetail maDoctype = new Model_DispensorMeasurmentDispenserDetail();
                maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setTankCode(res.getString(res.getColumnIndex("tankcode")));
                maDoctype.setTankDes(res.getString(res.getColumnIndex("fueltype")));
                maDoctype.setDispensorID(res.getString(res.getColumnIndex("dispensorid")));
                maDoctype.setImage(getDispenserImagesDataFromDb(planid,
                        res.getString(res.getColumnIndex("retailsite_code"))
                        , res.getString(res.getColumnIndex("tankcode"))
                        , res.getString(res.getColumnIndex("dispensorid"))));
                //     maDoctype.setImage(res.getString(res.getColumnIndex("image")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("remarks")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public Long insernozzle(String planid, String rtsid, String tankcode, String fuelname, String dispenserid, Model_DispensorMeasurmentNozzleDetail nozzles) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("plan_id", planid);
            contentValues.put("retailsite_code", rtsid);
            contentValues.put("tankcode", tankcode);
            contentValues.put("fueltype", fuelname);
            contentValues.put("dispensorid", dispenserid);
            contentValues.put("ActionPlan", nozzles.getActionPlanSingle());
            contentValues.put("SampleDrawn", nozzles.getSampleDrawn());
            contentValues.put("NozzelID", nozzles.getNozzelID());
            contentValues.put("FirstReading", nozzles.getFirstReading());
            contentValues.put("FinalReading", nozzles.getFinalReading());
            contentValues.put("PreviousRefNo", nozzles.getPreviousReading());
            contentValues.put("NozzelDes", nozzles.getNozzelDes());
            contentValues.put("NozzelNO", nozzles.getNozzelNO());
            contentValues.put("PreviousReading", nozzles.getPreviousReading());
            contentValues.put("TotalSampleDrawn", nozzles.getTotalSampleDrawn());
            contentValues.put("FirstMeterReading", nozzles.getFirstMeterReading());
            contentValues.put("ClosingMeterReading", nozzles.getClosingMeterReading());
            contentValues.put("Reasion", "Yes");
            contentValues.put("status", 1);

            contentValues.put("Remarks", nozzles.getNozzleRemarks());


            idInsert = db.insert("nozzle", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<NozzleData_Fetch_Db> getnozzlesfromDb(String planid, String rtscode, String tankcode, String dispenser_id) {
        Cursor res = null;
        List<NozzleData_Fetch_Db> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<NozzleData_Fetch_Db>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from nozzle where dispensorid= '" + dispenser_id.trim() + "' AND plan_id='" + planid + "' AND retailsite_code='" + rtscode + "' AND tankcode='" + tankcode + "'", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {
                NozzleData_Fetch_Db maDoctype = new NozzleData_Fetch_Db();
                maDoctype.setPlanid(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRtsid(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setTankcode(res.getString(res.getColumnIndex("tankcode")));
                maDoctype.setFuelname(res.getString(res.getColumnIndex("fueltype")));
                maDoctype.setDispenserid(res.getString(res.getColumnIndex("dispensorid")));
                maDoctype.setActionPlan(res.getString(res.getColumnIndex("ActionPlan")));
                maDoctype.setSampleDrawn(res.getString(res.getColumnIndex("SampleDrawn")));
                maDoctype.setNozzelID(res.getString(res.getColumnIndex("NozzelID")));
                maDoctype.setFirstReading(res.getString(res.getColumnIndex("FirstReading")));
                maDoctype.setFirstReadingPercentage(res.getString(res.getColumnIndex("FirstReadingPercentage")));
                maDoctype.setReadingDate(res.getString(res.getColumnIndex("ReadingDate")));
                maDoctype.setFinalReading(res.getString(res.getColumnIndex("FinalReading")));
                maDoctype.setFinalReadingPercentage(res.getString(res.getColumnIndex("FinalReadingPercentage")));
                maDoctype.setPreviousReading(res.getString(res.getColumnIndex("PreviousRefNo")));
                maDoctype.setNozzelDes(res.getString(res.getColumnIndex("NozzelDes")));
                maDoctype.setNozzelNO(res.getString(res.getColumnIndex("NozzelNO")));
                maDoctype.setPreviousReading(res.getString(res.getColumnIndex("PreviousReading")));
                maDoctype.setTotalSampleDrawn(res.getString(res.getColumnIndex("TotalSampleDrawn")));
                maDoctype.setFirstMeterReading(res.getString(res.getColumnIndex("FirstMeterReading")));
                maDoctype.setClosingMeterReading(res.getString(res.getColumnIndex("ClosingMeterReading")));


                maDoctype.setSelectedReasion(GetselectedReaisonNozzleWise(
                        res.getString(res.getColumnIndex("plan_id")),
                        res.getString(res.getColumnIndex("retailsite_code")),
                        res.getString(res.getColumnIndex("tankcode")),
                        res.getString(res.getColumnIndex("dispensorid")),
                        res.getString(res.getColumnIndex("NozzelID"))));
                maDoctype.setPossibleReasons(GetReaison());
                maDoctype.setStatus(res.getInt(res.getColumnIndex("status")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public boolean deletefromdispenser_measurment() {
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deleteqa_dispenser_meaurment = "DELETE FROM dispenser_meaurment";
            db.execSQL(deleteqa_dispenser_meaurment);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }

    public boolean deletefromnozzle() {
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deleteqa_nozzle = "DELETE FROM nozzle";
            db.execSQL(deleteqa_nozzle);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }

    public boolean UpdateDispenserNozzleData(String planid, String rtscode, String tankcode, String dispner_id, String nozzle_code,

                                             String first_reading, String first_reading_percentage, String final_reading, String final_reading_percentage, String sampledrwan,
                                             String reason, String actionplan, String date, String remarks, String TotalSampleDrawn, String FirstMeterReading,
                                             String ClosingMeterReading) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        Log.d("Dispenserid", dispner_id);
        Log.d("NozzleCode", nozzle_code);

        try {
            data = new ContentValues();

            data.put("FirstReading", first_reading);
            data.put("FirstReadingPercentage", first_reading_percentage);
            data.put("FinalReading", final_reading);
            data.put("FinalReadingPercentage", final_reading_percentage);
            data.put("SampleDrawn", sampledrwan);
            data.put("Reasion", reason);
            data.put("ActionPlan", actionplan);
            data.put("ReadingDate", date);
            data.put("Remarks", remarks);
            data.put("TotalSampleDrawn", TotalSampleDrawn);
            data.put("FirstMeterReading", FirstMeterReading);
            data.put("ClosingMeterReading", ClosingMeterReading);


            res = db.update("nozzle", data, "dispensorid= '" + dispner_id.trim() + "' AND NozzelID= '" + nozzle_code.trim() + "' AND plan_id='" + planid + "' AND retailsite_code='" + rtscode + "' AND tankcode='" + tankcode + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public boolean UpdateDispenserNozzleEnableDisableCheck(String dispner_id, String nozzle_code, int status) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;
        Log.d("Sttauis", String.valueOf(status));


        try {
            data = new ContentValues();

            data.put("status", status);
            res = db.update("nozzle", data, "dispensorid= '" + dispner_id.trim() + "' AND NozzelID= '" + nozzle_code.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public int getnozzlestatusFromDB(String dispenser_id, String nozzle_code) {
        Cursor res = null;
        int status = 0;
        SQLiteDatabase db = null;

        try {
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from nozzle where dispensorid= '" + dispenser_id.trim() + "' AND NozzelID= '" + nozzle_code.trim() + "'", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {

                status = (res.getInt(res.getColumnIndex("status")));

                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return status;
    }

    public boolean UpdateDispenserData(String dispner_id, String remarks) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();
            data.put("remarks", remarks);

            res = db.update("dispenser_meaurment", data, "dispensorid= '" + dispner_id.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    //TODO:========================= Dispener Images=============================
    public Long insert_dispenser_measurment_images(String planid, String retailsitecode, String tankcode, String dispenserid, CaptureImagesModel captureImagesModel) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("plan_id", planid);
            contentValues.put("retailsite_code", retailsitecode);
            contentValues.put("tankcode", tankcode);
            contentValues.put("dispensorid", dispenserid);
            contentValues.put("label", captureImagesModel.getLabel());
            contentValues.put("fileName", captureImagesModel.getFileName());
            contentValues.put("url", captureImagesModel.getUrl());


            idInsert = db.insert("dispenser_meaurment_images", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<Model_DispensorMeasurmentDispenerImages> getDispenserImagesDataFromDb(String planid, String retailcode,
                                                                                      String tankcode, String dispenserid) {
        Log.d("Site code", planid);
        Log.d("Tank Code", tankcode);
        Cursor res = null;
        List<Model_DispensorMeasurmentDispenerImages> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<Model_DispensorMeasurmentDispenerImages>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from dispenser_meaurment_images where plan_id= '" + planid.trim() + "' AND retailsite_code= '" + retailcode.trim() + "' AND tankcode= '" + tankcode + "' AND dispensorid='" + dispenserid + "'", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {
                Model_DispensorMeasurmentDispenerImages maDoctype = new Model_DispensorMeasurmentDispenerImages();
                maDoctype.setId(res.getInt(res.getColumnIndex("id")));
                maDoctype.setPlanid(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setTankCode(res.getString(res.getColumnIndex("tankcode")));
                maDoctype.setDispensorID(res.getString(res.getColumnIndex("dispensorid")));
                maDoctype.setLabel(res.getString(res.getColumnIndex("label")));
                maDoctype.setFileName(res.getString(res.getColumnIndex("fileName")));
                maDoctype.setUrl(res.getString(res.getColumnIndex("url")));
                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public boolean deletefromdispensorimages(String planid, String retailcode,
                                             String tankcode, String dispenserid, int id) {

        Log.d("planid", planid);
        Log.d("retailcode", retailcode);
        Log.d("tankcode", tankcode);
        Log.d("dispenserid", dispenserid);
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deleteqa_dispenser_meaurment_images = "DELETE FROM dispenser_meaurment_images where plan_id= '" + planid.trim() + "' AND retailsite_code= '" + retailcode.trim() + "' AND tankcode= '" + tankcode + "' AND dispensorid='" + dispenserid + "' AND id=" + id;
            db.execSQL(deleteqa_dispenser_meaurment_images);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }

    public List<DispenserImages> getDispenserImagesDataFromDbByPlanid(String planid, String retailcode, String dispenserid) {
        Log.d("Site code", planid);
        int count = 0;
        Cursor res = null;
        List<DispenserImages> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<DispenserImages>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select label , fileName, url from dispenser_meaurment_images where plan_id= '" + planid.trim() + "' AND retailsite_code= '" + retailcode.trim() + "' AND dispensorid='" + dispenserid + "'", null);

            res.moveToFirst();

            while (res.isAfterLast() == false) {
                DispenserImages maDoctype = new DispenserImages();


                maDoctype.setLabel(res.getString(res.getColumnIndex("label")));
                maDoctype.setFileName(res.getString(res.getColumnIndex("fileName")));
                maDoctype.setUrl(res.getString(res.getColumnIndex("url")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public boolean Updatedispensorimages(String planid, String retailcode,
                                         String tankcode, String dispenserid, String label, int id) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("label", label);
            res = db.update("dispenser_meaurment_images", data, "plan_id= '" + planid.trim() + "' AND retailsite_code= '" + retailcode.trim() + "' AND tankcode='" + tankcode + "' AND dispensorid='" + dispenserid + "' AND id=" + id, null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    //TODO:============================ Nozzle Images=============================

    public Long insert_dispenser_measurment_nozzle_images(String planid, String retailsitecode, String tankcode, String dispenserid, String nozzleid, CaptureImagesModel captureImagesModel) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("plan_id", planid);
            contentValues.put("retailsite_code", retailsitecode);
            contentValues.put("tankcode", tankcode);
            contentValues.put("dispensorid", dispenserid);
            contentValues.put("nozzleid", nozzleid);
            contentValues.put("label", captureImagesModel.getLabel());
            contentValues.put("fileName", captureImagesModel.getFileName());
            contentValues.put("url", captureImagesModel.getUrl());


            idInsert = db.insert("nozzle_images", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<Model_DispenserMearurmentDispenserNozzleImages> getDispenserNozzleImagesDataFromDb(String planid, String retailcode, String tankcode, String dispenserid, String nozzleid) {
        Log.d("Site code", planid);
        Log.d("Tank Code", tankcode);
        Cursor res = null;
        List<Model_DispenserMearurmentDispenserNozzleImages> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<Model_DispenserMearurmentDispenserNozzleImages>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from nozzle_images where plan_id= '" + planid.trim() + "' AND retailsite_code= '" + retailcode.trim() + "' AND tankcode= '" + tankcode + "' AND dispensorid='" + dispenserid + "' AND nozzleid='" + nozzleid + "'", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {
                Model_DispenserMearurmentDispenserNozzleImages maDoctype = new Model_DispenserMearurmentDispenserNozzleImages();
                maDoctype.setId(res.getInt(res.getColumnIndex("id")));
                maDoctype.setPlanid(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setTankCode(res.getString(res.getColumnIndex("tankcode")));
                maDoctype.setDispensorID(res.getString(res.getColumnIndex("dispensorid")));
                maDoctype.setNozzleID(res.getString(res.getColumnIndex("nozzleid")));
                maDoctype.setLabel(res.getString(res.getColumnIndex("label")));
                maDoctype.setFileName(res.getString(res.getColumnIndex("fileName")));
                maDoctype.setUrl(res.getString(res.getColumnIndex("url")));
                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public int countofDispenserNozzleImages(String planid, String retailcode, String tankcode, String dispenserid, String nozzleid) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor mCount = db.rawQuery("select * from nozzle_images where plan_id= '" + planid.trim() + "' AND retailsite_code= '" + retailcode.trim() + "' AND tankcode= '" + tankcode + "' AND dispensorid='" + dispenserid + "' AND nozzleid='" + nozzleid + "'", null);
        int count = 0;
        if (mCount.moveToFirst()) count = mCount.getInt(0);
        mCount.close();
        Log.d("DbCount", String.valueOf(count));
        db.close();

        return count;
    }

    public List<DispenserImages> getDispenserNozzleImagesDataFromDbForServerSubmit(String planid, String retailcode, String tankcode, String dispenserid, String nozzleid) {
        Log.d("Site code", planid);
        Log.d("Tank Code", tankcode);
        Cursor res = null;
        List<DispenserImages> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<DispenserImages>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from nozzle_images where plan_id= '" + planid.trim() + "' AND retailsite_code= '" + retailcode.trim() + "' AND tankcode= '" + tankcode + "' AND dispensorid='" + dispenserid + "' AND nozzleid='" + nozzleid + "'", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {
                DispenserImages maDoctype = new DispenserImages();

                maDoctype.setLabel(res.getString(res.getColumnIndex("label")));
                maDoctype.setFileName(res.getString(res.getColumnIndex("fileName")));
                maDoctype.setUrl(res.getString(res.getColumnIndex("url")));
                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public boolean deletefromdispensornozzleimages(String planid, String retailcode, String tankcode, String dispenserid, String nozzleid, int id) {

        Log.d("planid", planid);
        Log.d("retailcode", retailcode);
        Log.d("tankcode", tankcode);
        Log.d("dispenserid", dispenserid);
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deleteqa_dispenser_meaurment_images = "DELETE FROM nozzle_images where plan_id= '" + planid.trim() + "' AND retailsite_code= '" + retailcode.trim() + "' AND tankcode= '" + tankcode + "' AND dispensorid='" + dispenserid + "' AND nozzleid='" + nozzleid + "' AND id=" + id;
            db.execSQL(deleteqa_dispenser_meaurment_images);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }

    public List<DispenserImages> getDispenserImagesDataFromDbByPlanid(String planid, String retailcode, String dispenserid, String nozzleid) {
        Log.d("Site code", planid);
        int count = 0;
        Cursor res = null;
        List<DispenserImages> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<DispenserImages>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select label , fileName, url from nozzle_images where plan_id= '" + planid.trim() + "' AND retailsite_code= '" + retailcode.trim() + "' AND dispensorid='" + dispenserid + "' AND nozzleid='" + nozzleid + "'", null);

            res.moveToFirst();

            while (res.isAfterLast() == false) {
                DispenserImages maDoctype = new DispenserImages();


                maDoctype.setLabel(res.getString(res.getColumnIndex("label")));
                maDoctype.setFileName(res.getString(res.getColumnIndex("fileName")));
                maDoctype.setUrl(res.getString(res.getColumnIndex("url")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public boolean Updatedispensornozzleimages(String planid, String retailcode, String tankcode, String dispenserid, String nozzleid, String label, int id) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("label", label);
            res = db.update("nozzle_images", data, "plan_id= '" + planid.trim() + "' AND retailsite_code= '" + retailcode.trim() + "' AND tankcode='" + tankcode + "' AND dispensorid='" + dispenserid + "' AND nozzleid='" + nozzleid + "' AND id=" + id, null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    //TODO:========================== Dispenser Certificate========================
    //TODO:================== Dispenser Certificate Retailer==================
    public Long insert_dispenser_certificate_retailer_signature_images(String planid, String retailsitecode, CaptureImagesModel captureImagesModel) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("plan_id", planid);
            contentValues.put("retailsite_code", retailsitecode);
            contentValues.put("label", captureImagesModel.getLabel());
            contentValues.put("fileName", captureImagesModel.getFileName());
            contentValues.put("url", captureImagesModel.getUrl());


            idInsert = db.insert("dispenser_meaurment_certificate_retailer", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<CaptureImagesModel> getdispenser_certificate_retailer_signature_images(String planid, String retailcode) {
        Log.d("Site code", planid);
        Cursor res = null;
        List<CaptureImagesModel> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<CaptureImagesModel>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from dispenser_meaurment_certificate_retailer where plan_id= '" + planid.trim() + "' AND retailsite_code= '" + retailcode.trim() + "'", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {
                CaptureImagesModel maDoctype = new CaptureImagesModel();
                //  maDoctype.setId(res.getInt(res.getColumnIndex("id")));

                maDoctype.setLabel(res.getString(res.getColumnIndex("label")));
                maDoctype.setFileName(res.getString(res.getColumnIndex("fileName")));
                maDoctype.setUrl(res.getString(res.getColumnIndex("url")));
                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public boolean deletefromdispenser_meaurment_certificate_retailer_signature_images(String planid, String rtsid) {
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deletedispenser_meaurment_certificate = "DELETE FROM dispenser_meaurment_certificate_retailer WHERE plan_id='" + planid + "' AND retailsite_code='" + rtsid + "'";
            db.execSQL(deletedispenser_meaurment_certificate);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }

    //TODO:================== Dispenser Certificate Techinican==================
    public Long insert_dispenser_certificate_technician_signature_images(String planid, String retailsitecode, CaptureImagesModel captureImagesModel) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("plan_id", planid);
            contentValues.put("retailsite_code", retailsitecode);
            contentValues.put("label", captureImagesModel.getLabel());
            contentValues.put("fileName", captureImagesModel.getFileName());
            contentValues.put("url", captureImagesModel.getUrl());


            idInsert = db.insert("dispenser_meaurment_certificate_technician", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<CaptureImagesModel> getdispenser_certificate_technician_signature_images(String planid, String retailcode) {
        Log.d("Site code", planid);
        Cursor res = null;
        List<CaptureImagesModel> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<CaptureImagesModel>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from dispenser_meaurment_certificate_technician where plan_id= '" + planid.trim() + "' AND retailsite_code= '" + retailcode.trim() + "'", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {
                CaptureImagesModel maDoctype = new CaptureImagesModel();
                //  maDoctype.setId(res.getInt(res.getColumnIndex("id")));

                maDoctype.setLabel(res.getString(res.getColumnIndex("label")));
                maDoctype.setFileName(res.getString(res.getColumnIndex("fileName")));
                maDoctype.setUrl(res.getString(res.getColumnIndex("url")));
                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public boolean deletefromdispenser_meaurment_certificate_technician_signature_images(String planid, String rtsid) {
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deletedispenser_meaurment_certificate = "DELETE FROM dispenser_meaurment_certificate_technician WHERE plan_id='" + planid + "' AND retailsite_code='" + rtsid + "'";
            db.execSQL(deletedispenser_meaurment_certificate);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }
    //TODO:=======================================================================


    public Long insert_dispenser_measurment_result(DispenerResult dispenerResult) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("plan_id", dispenerResult.getPlanid());
            contentValues.put("retailsite_code", dispenerResult.getRetailsite_id());
            contentValues.put("remarks", dispenerResult.getRemarks());
            contentValues.put("image", dispenerResult.getImage());
            contentValues.put("signature_retailer", dispenerResult.getSignature_retailer());
            contentValues.put("signature_technician", dispenerResult.getSignature_technician());

            idInsert = db.insert("dispenser_meaurment_certificate", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<DispenerResult> getDispenserResultDataFromDb(String planid, String retailcode) {
        Log.d("Site code", planid);

        Cursor res = null;
        List<DispenerResult> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<DispenerResult>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from dispenser_meaurment_certificate where plan_id= '" + planid.trim() + "' AND retailsite_code= '" + retailcode.trim() + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                DispenerResult maDoctype = new DispenerResult();
                maDoctype.setPlanid(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRetailsite_id(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("remarks")));
                maDoctype.setImage(res.getString(res.getColumnIndex("image")));
                maDoctype.setSignature_retailer(res.getString(res.getColumnIndex("signature_retailer")));
                maDoctype.setSignature_technician(res.getString(res.getColumnIndex("signature_technician")));
                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public boolean UpdateDispenserSignature_Retailer(String plan_id, String retailersite_id, String image) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("signature_retailer", image);
            res = db.update("dispenser_meaurment_certificate", data, "plan_id= '" + plan_id.trim() + "' AND retailsite_code= '" + retailersite_id.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public boolean UpdateDispenserSignatureTechnician(String plan_id, String retailersite_id, String image) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("signature_technician", image);
            res = db.update("dispenser_meaurment_certificate", data, "plan_id= '" + plan_id.trim() + "' AND retailsite_code= '" + retailersite_id.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public boolean deletefromdispenser_meaurment_certificate() {
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deletedispenser_meaurment_certificate = "DELETE FROM dispenser_meaurment_certificate";
            db.execSQL(deletedispenser_meaurment_certificate);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }


    //TODO:============================ Dispenser Certficate Builder================

    public List<DispensorMeasurmentDispenserCertificateProductList> GenerateDispenserCertificate(String code, String rtsid) {

        Cursor res = null;
        List<DispensorMeasurmentDispenserCertificateProductList> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<DispensorMeasurmentDispenserCertificateProductList>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from fueltype where plan_id= '" + code.trim() + "' AND retailsite_code='" + rtsid + "'", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {
                DispensorMeasurmentDispenserCertificateProductList maDoctype = new DispensorMeasurmentDispenserCertificateProductList();
                maDoctype.setProductTank(res.getString(res.getColumnIndex("name")));
                maDoctype.setMakeName(" ");
                maDoctype.setDispensorID(" ");
                maDoctype.setProductCertificateList(getnozzlesbyProductName(code, rtsid, res.getString(res.getColumnIndex("name"))));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }


    public List<DispensorMeasurmentDispenserCertificateNozzleList> getnozzlesbyProductName(String planid, String rtscode, String fuelname) {
        Cursor res = null;
        List<DispensorMeasurmentDispenserCertificateNozzleList> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<DispensorMeasurmentDispenserCertificateNozzleList>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from nozzle where fueltype= '" + fuelname.trim() + "' AND plan_id='" + planid + "' AND retailsite_code='" + rtscode + "'", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {
                DispensorMeasurmentDispenserCertificateNozzleList maDoctype = new DispensorMeasurmentDispenserCertificateNozzleList();
// COde by Sarfraz for Report
                maDoctype.setNozzelID(res.getString(res.getColumnIndex("NozzelID")));
                if (res.getString(res.getColumnIndex("FirstReading")) != null) {

                    int firstreading = 0;
                    int sampledrawn = 0;
                    int underrun = 0;
                    int overrun = 0;
                    if (res.getString(res.getColumnIndex("SampleDrawn")) != null) {

                        try {
                            firstreading = Integer.parseInt(res.getString(res.getColumnIndex("FirstReading")));
                            sampledrawn = Integer.parseInt(res.getString(res.getColumnIndex("SampleDrawn")));
                        } catch (NumberFormatException nfe) {
                            System.out.println("Could not parse FirstReading / SampleDrawn");
                        }
                        int diff = sampledrawn - firstreading;
                        if (diff > 0) underrun = diff;
                        else if (diff < 0) overrun = diff;
                    }
                    maDoctype.setFirstReading(underrun + "");
                    maDoctype.setFirstReadingPercentage(overrun + "");

                } else {
                    maDoctype.setFirstReading(0 + "");
                    maDoctype.setFirstReadingPercentage(0 + "");
                }
                if (res.getString(res.getColumnIndex("FinalReading")) != null) {

                    int finalreading = 0;
                    int sampledrawn = 0;
                    int underrun = 0;
                    int overrun = 0;
                    if (res.getString(res.getColumnIndex("SampleDrawn")) != null) {

                        try {
                            finalreading = Integer.parseInt(res.getString(res.getColumnIndex("FinalReading")));
                            sampledrawn = Integer.parseInt(res.getString(res.getColumnIndex("SampleDrawn")));
                        } catch (NumberFormatException nfe) {
                            System.out.println("Could not parse FinalReading / SampleDrawn");
                        }
                        int diff = sampledrawn - finalreading;
                        if (diff > 0) underrun = diff;
                        else if (diff < 0) overrun = diff;
                    }
                    maDoctype.setFinalReading(underrun + "");
                    maDoctype.setFinalReadingPercentage(overrun + "");

                } else {
                    maDoctype.setFinalReading(0 + "");
                    maDoctype.setFinalReadingPercentage(0 + "");
                }


                maDoctype.setNozzelDes(res.getString(res.getColumnIndex("NozzelDes")));
                maDoctype.setNozzelNO(res.getString(res.getColumnIndex("NozzelNO")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }


//    public List<DispensorMeasurmentDispenserCertificateNozzleList> getnozzlesbyProductName(String planid, String rtscode, String fuelname)
//    {
//        Cursor res = null;
//        List<DispensorMeasurmentDispenserCertificateNozzleList> list = null;
//        SQLiteDatabase db = null;
//
//        try {
//            list = new ArrayList<DispensorMeasurmentDispenserCertificateNozzleList>();
//            db = this.getReadableDatabase();
//            res = db.rawQuery("select * from nozzle where fueltype= '"+fuelname.trim()+"' AND plan_id='"+planid+"' AND retailsite_code='"+rtscode+"'", null);
//            res.moveToFirst();
//
//
//
//            while (res.isAfterLast() == false) {
//                DispensorMeasurmentDispenserCertificateNozzleList maDoctype = new DispensorMeasurmentDispenserCertificateNozzleList();
//
//                maDoctype.setNozzelID(res.getString(res.getColumnIndex("NozzelID")));
//                maDoctype.setFirstReading(res.getString(res.getColumnIndex("FirstReading")));
//                if(res.getString(res.getColumnIndex("FirstReadingPercentage"))!=null)
//                {
//                    maDoctype.setFirstReadingPercentage(res.getString(res.getColumnIndex("FirstReadingPercentage")));
//
//
//                }
//                else
//                    {
//                        maDoctype.setFirstReadingPercentage(" ");
//
//                    }
//                if(res.getString(res.getColumnIndex("FinalReading"))!=null)
//                {
//                    maDoctype.setFinalReading(res.getString(res.getColumnIndex("FinalReading")));
//
//                }
//                else {
//                    maDoctype.setFinalReading(" ");
//
//                }
//                if(res.getString(res.getColumnIndex("FinalReadingPercentage"))!=null) {
//                    maDoctype.setFinalReadingPercentage(res.getString(res.getColumnIndex("FinalReadingPercentage")));
//                }
//                else {
//                    maDoctype.setFinalReadingPercentage(" ");
//
//                }
//                maDoctype.setNozzelDes(res.getString(res.getColumnIndex("NozzelDes")));
//                maDoctype.setNozzelNO(res.getString(res.getColumnIndex("NozzelNO")));
//
//
//
//
//
//                list.add(maDoctype);
//                res.moveToNext();
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        } finally {
//            if (res != null)
//                res.close();
//            db.close();
//        }
//        return list;
//    }
//


   /* public List<Dispensordata> GetDispenserDetail(String plan_id,String rtsid) {

        Cursor res = null;
        List<Dispensordata> list = null;
        SQLiteDatabase db=null;
        try {
            list = new ArrayList<Dispensordata>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select dm.dispensorid,dm.image,dm.remarks,n.ActionPlan,n.NozzelID,n.FirstReading,n.FinalReading,\n" +
                    "    n.Reasion,n.SampleDrawn from dispenser_meaurment dm, nozzle n where dm.plan_id = n.plan_id \n" +
                    "    and dm.retailsite_code = n.retailsite_code and dm.dispenser_id = n.dispenser_id and dm.plan_id ='" + plan_id + "' and dm.retailsite_code ='" + rtsid + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                Dispensordata maDoctype = new Dispensordata();
                maDoctype.setDispensorID(res.getString(res.getColumnIndex("dispensorid")));
                maDoctype.setImage(res.getString(res.getColumnIndex("image")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("remarks")));

                List<DispensorMeasurment> dispensorMeasurment=new ArrayList<>();
                dispensorMeasurment.setActionPlanCode(0,res.getString(res.getColumnIndex("ActionPlan")));
                dispensorMeasurment.setActionPlanCode(res.getString(res.getColumnIndex("NozzelID")));
                dispensorMeasurment.setActionPlanCode(res.getString(res.getColumnIndex("FinalReading")));
                dispensorMeasurment.setActionPlanCode(res.getString(res.getColumnIndex("FirstReading")));
                dispensorMeasurment.setActionPlanCode(res.getString(res.getColumnIndex("Reasion")));
                dispensorMeasurment.setActionPlanCode(res.getString(res.getColumnIndex("SampleDrawn")));


                maDoctype.setImage(res.getString(res.getColumnIndex("remarks")));
                List<DispensorMeasurment> dispensorMeasurmentList=new ArrayList<>();
                dispensorMeasurmentList= (List<DispensorMeasurment>) dispensorMeasurment;


                maDoctype.setDispensorMeasurmentList(dispensorMeasurmentList);

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }
*/

    //TODO:========================= Dispenser Server submit=====================
    public List<Dispensordata> GetDispenserDetail(String plan_id, String rtsid) {

        Cursor res = null;
        List<Dispensordata> list = null;

        SQLiteDatabase db = null;
        try {
            list = new ArrayList<Dispensordata>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from dispenser_meaurment where plan_id='" + plan_id + "' and retailsite_code='" + rtsid + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                Dispensordata maDoctype = new Dispensordata();
                maDoctype.setDispensorID(res.getString(res.getColumnIndex("dispensorid")));
                maDoctype.setImage(getDispenserImagesDataFromDbByPlanid(plan_id, rtsid, res.getString(res.getColumnIndex("dispensorid"))));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("remarks")));
                maDoctype.setDispensorMeasurmentList(GetDispenserDetailNozzle(plan_id, rtsid, res.getString(res.getColumnIndex("dispensorid"))));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<DispensorMeasurment> GetDispenserDetailNozzle(String plan_id, String rtsid, String dispensorid) {

        Cursor res = null;
        List<DispensorMeasurment> list = null;

        SQLiteDatabase db = null;
        try {
            list = new ArrayList<DispensorMeasurment>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from nozzle where plan_id='" + plan_id + "' and retailsite_code='" + rtsid + "' and dispensorid='" + dispensorid + "'", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {
                DispensorMeasurment maDoctype = new DispensorMeasurment();

                if (res.getString(res.getColumnIndex("ActionPlan")).equalsIgnoreCase("") || res.getString(res.getColumnIndex("ActionPlan")).equalsIgnoreCase(null)) {
                    maDoctype.setActionPlanCode("");
                } else {
                    maDoctype.setActionPlanCode(res.getString(res.getColumnIndex("ActionPlan")));
                }

                maDoctype.setNozzelID(res.getString(res.getColumnIndex("NozzelID")));
                maDoctype.setFinalReading(res.getString(res.getColumnIndex("FinalReading")));
                maDoctype.setFirstReading(res.getString(res.getColumnIndex("FirstReading")));
                maDoctype.setReasion(GetselectedReaisonNozzleWiseServerSubmit(plan_id, rtsid, res.getString(res.getColumnIndex("tankcode")), dispensorid, res.getString(res.getColumnIndex("NozzelID"))));
                maDoctype.setSampleDrawn(res.getString(res.getColumnIndex("SampleDrawn")));
                maDoctype.setNozzleRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setImage(getDispenserNozzleImagesDataFromDbForServerSubmit(plan_id, rtsid, res.getString(res.getColumnIndex("tankcode")), dispensorid, res.getString(res.getColumnIndex("NozzelID"))));
                if (res.getString(res.getColumnIndex("status")).length() > 0 || res.getString(res.getColumnIndex("status")) != null) {
                    maDoctype.setStatus("");
                } else {
                    maDoctype.setStatus(res.getString(res.getColumnIndex("status")));
                }
                if (res.getString(res.getColumnIndex("FinalReadingPercentage")) != null) {
                    maDoctype.setFinalReadingPercentage("");
                } else if (res.getString(res.getColumnIndex("FinalReadingPercentage")) == null) {
                    maDoctype.setFinalReadingPercentage("");
                } else {
                    maDoctype.setFinalReadingPercentage(res.getString(res.getColumnIndex("FinalReadingPercentage")));

                }

                if (res.getString(res.getColumnIndex("FirstReadingPercentage")) != null) {
                    maDoctype.setFirstReadingPercentage("");
                } else if (res.getString(res.getColumnIndex("FirstReadingPercentage")) == null) {
                    maDoctype.setFirstReadingPercentage("");
                } else {
                    maDoctype.setFirstReadingPercentage(res.getString(res.getColumnIndex("FirstReadingPercentage")));

                }

                if (res.getString(res.getColumnIndex("TotalSampleDrawn")) != null) {
                    maDoctype.setTotalSampleDrawn("");
                } else if (res.getString(res.getColumnIndex("TotalSampleDrawn")) == null) {
                    maDoctype.setTotalSampleDrawn("");
                } else {
                    maDoctype.setTotalSampleDrawn(res.getString(res.getColumnIndex("TotalSampleDrawn")));

                }

                if (res.getString(res.getColumnIndex("FirstMeterReading")) != null) {
                    maDoctype.setFirstMeterReading("");
                } else if (res.getString(res.getColumnIndex("FirstMeterReading")) == null) {
                    maDoctype.setFirstMeterReading("");
                } else {
                    maDoctype.setFirstMeterReading(res.getString(res.getColumnIndex("FirstMeterReading")));

                }
                if (res.getString(res.getColumnIndex("ClosingMeterReading")) != null) {
                    maDoctype.setClosingMeterReading("");
                } else if (res.getString(res.getColumnIndex("ClosingMeterReading")) == null) {
                    maDoctype.setClosingMeterReading("");
                } else {
                    maDoctype.setClosingMeterReading(res.getString(res.getColumnIndex("ClosingMeterReading")));

                }


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }
    //TODO:======================================================================
    //endregion

    //region General Inspection
    //TODO:================================== General Inspection =========================================================

   /* db.execSQL(
            "CREATE TABLE IF NOT EXISTS  `possible_conditions` (\n" +
            "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
            "  `PointDesc` Text(50) DEFAULT NULL,\n" +
            "  `PointCode` Text(50) DEFAULT NULL,\n" +
            "  `Score` Text(50) DEFAULT NULL,\n" +
            "  `Code` Text(50) DEFAULT NULL,\n" +
            "  `Desc` Text(50) DEFAULT NULL\n" +
            ") ;"
            );*/
//    getGI_PossileConditions

    public List<GI_Conditions> getGI_PossileConditions() {

        Cursor res = null;
        List<GI_Conditions> list = null;

        SQLiteDatabase db = null;
        try {
            list = new ArrayList<>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from possible_conditions", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {
                GI_Conditions gi_conditions = new GI_Conditions();

                gi_conditions.setId(res.getInt(res.getColumnIndex("id")));
                gi_conditions.setDesc(res.getString(res.getColumnIndex("Desc")));
                gi_conditions.setCode(res.getString(res.getColumnIndex("Code")));
                gi_conditions.setPointCode(res.getString(res.getColumnIndex("PointCode")));
                gi_conditions.setPointDesc(res.getString(res.getColumnIndex("PointDesc")));
                gi_conditions.setScore(res.getString(res.getColumnIndex("Score")));

                list.add(gi_conditions);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public Long insertPossibleConditions(List<GI_Conditions> gi_conditions) {
        long idInsert = -1;

        SQLiteDatabase db = this.getReadableDatabase();
        try {
            for (int i = 0; i < gi_conditions.size(); i++) {

                ContentValues contentValues = new ContentValues();
                contentValues.put("PointDesc", gi_conditions.get(i).getDesc());
                contentValues.put("PointCode", gi_conditions.get(i).getCode());
                contentValues.put("Score", gi_conditions.get(i).getScore());
                contentValues.put("Code", gi_conditions.get(i).getCode());
                contentValues.put("Desc", gi_conditions.get(i).getDesc());

                idInsert = db.insert("possible_conditions", null, contentValues);
            }


        } catch (Exception e) {
            e.printStackTrace();
            Log.d("_mLog", "insertPossibleConditions error = " + e.getMessage());
        } finally {
            if (db != null)
                db.close();
        }
        return idInsert;
    }

    public int deletePossibleConditions() {
        int idInsert = -1;
        String sqlDeletePossibleConditions = "DELETE FROM possible_conditions";
        SQLiteDatabase db = this.getReadableDatabase();
        try {

            db.execSQL(sqlDeletePossibleConditions);
            idInsert = 1;


        } catch (Exception e) {
            e.printStackTrace();
            Log.d("_mLog", "insertPossibleConditions error = " + e.getMessage());
        } finally {
            if (db != null)
                db.close();
        }
        return idInsert;
    }

    public Long insert_into_GI_Standers(int id, String planid, String rtscode, GI_Standers standard, int click) {
        Long idInsert = -1L;

        Log.d("Points", standard.getPoints());


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("plan_id", planid);
            contentValues.put("retailsite_code", rtscode);
            contentValues.put("Stander_id", id);
            contentValues.put("CategoryCode", standard.getCategoryCode());
            contentValues.put("Type", standard.getType());
            contentValues.put("ParticularCode", standard.getParticularCode());
            contentValues.put("Image", standard.getImage());
            contentValues.put("Remarks", standard.getRemarks());
            contentValues.put("CategoryDesc", standard.getCategoryDesc());
            contentValues.put("ParticularDesc", standard.getParticularDesc());
            if (standard.getPoints().equalsIgnoreCase("")) {
                contentValues.put("Points", "-1");
            } else {
                contentValues.put("Points", standard.getPoints());
            }


            contentValues.put("Conditions", standard.getConditionCode());
            contentValues.put("ActionPlan", standard.getActionPlanCode());
            contentValues.put("isClicked", click);


            idInsert = db.insert("QAVan_GI_Standard", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<GI_Standers_DB> GetStander(int id, String planid, String rtscode) {

        Cursor res = null;
        List<GI_Standers_DB> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<GI_Standers_DB>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from QAVan_GI_Standard where Stander_id=" + id + " AND plan_id='" + planid + "' AND retailsite_code='" + rtscode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                GI_Standers_DB maDoctype = new GI_Standers_DB();
                maDoctype.setPlanid(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRetailsite_code(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setStander_id(res.getInt(res.getColumnIndex("Stander_id")));
                maDoctype.setCategoryCode(res.getString(res.getColumnIndex("CategoryCode")));
                maDoctype.setType(res.getString(res.getColumnIndex("Type")));
                maDoctype.setParticularCode(res.getString(res.getColumnIndex("ParticularCode")));
                maDoctype.setImage(res.getString(res.getColumnIndex("Image")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setCategoryDesc(res.getString(res.getColumnIndex("CategoryDesc")));
                maDoctype.setParticularDesc(res.getString(res.getColumnIndex("ParticularDesc")));
                maDoctype.setConditions(res.getString(res.getColumnIndex("Conditions")));
                maDoctype.setActionPlans(res.getString(res.getColumnIndex("ActionPlan")));
                maDoctype.setPoints(res.getString(res.getColumnIndex("Points")));
                maDoctype.setIsClicked(res.getInt(res.getColumnIndex("isClicked")));
                maDoctype.setAttachmentObj(GetStander_Image(res.getString(res.getColumnIndex("plan_id")),
                        res.getString(res.getColumnIndex("retailsite_code")),
                        res.getString(res.getColumnIndex("CategoryCode")),
                        res.getString(res.getColumnIndex("ParticularCode"))));
                maDoctype.setPossibleconditions(GetQAVan_GI_Conditions(planid, res.getString(res.getColumnIndex("CategoryCode")), res.getString(res.getColumnIndex("ParticularCode"))));
                maDoctype.setPossibleactions(GetActions(planid, res.getString(res.getColumnIndex("CategoryCode")), res.getString(res.getColumnIndex("ParticularCode"))));
                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<GI_Standers_DB> GetStanderALL(String planid, String rtscode) {

        Cursor res = null;
        List<GI_Standers_DB> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<GI_Standers_DB>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from QAVan_GI_Standard where plan_id='" + planid + "' AND retailsite_code='" + rtscode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                GI_Standers_DB maDoctype = new GI_Standers_DB();
                maDoctype.setPlanid(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRetailsite_code(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setStander_id(res.getInt(res.getColumnIndex("Stander_id")));
                maDoctype.setCategoryCode(res.getString(res.getColumnIndex("CategoryCode")));
                maDoctype.setType(res.getString(res.getColumnIndex("Type")));
                maDoctype.setParticularCode(res.getString(res.getColumnIndex("ParticularCode")));
                maDoctype.setImage(res.getString(res.getColumnIndex("Image")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setCategoryDesc(res.getString(res.getColumnIndex("CategoryDesc")));
                maDoctype.setParticularDesc(res.getString(res.getColumnIndex("ParticularDesc")));
                maDoctype.setConditions(res.getString(res.getColumnIndex("Conditions")));
                maDoctype.setActionPlans(res.getString(res.getColumnIndex("ActionPlan")));
                maDoctype.setPoints(res.getString(res.getColumnIndex("Points")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public Long insert_into_GI_Equipment(int id, List<GI_EquipmentConditions> equipmentCondition) {
        Long idInsert = -1L;

        for (int i = 0; i < equipmentCondition.size(); i++) {
            SQLiteDatabase db = this.getReadableDatabase();
            try {

                ContentValues contentValues = new ContentValues();
                contentValues.put("Stander_id", id);
                contentValues.put("EquipmentDesc", equipmentCondition.get(i).getEquipmentDesc());
                contentValues.put("Checked", equipmentCondition.get(i).getChecked());
                contentValues.put("Image", equipmentCondition.get(i).getImage());
                contentValues.put("SerialNo", equipmentCondition.get(i).getSerialNo());
                contentValues.put("Remarks", equipmentCondition.get(i).getRemarks());
                contentValues.put("FixedAssetDesc", equipmentCondition.get(i).getFixedAssetDesc());
                contentValues.put("OwnerShip", equipmentCondition.get(i).getOwnerShip());
                contentValues.put("EquipmentCode", equipmentCondition.get(i).getEquipmentCode());
                contentValues.put("FixedAssetCode", equipmentCondition.get(i).getFixedAssetCode());

                idInsert = db.insert("QAVan_GI_Equipment", null, contentValues);

            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                if (db != null)
                    db.close();
            }
        }

        return idInsert;
    }

    public List<GI_EquipmentConditions> GetEquipment() {

        Cursor res = null;
        List<GI_EquipmentConditions> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<GI_EquipmentConditions>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from QAVan_GI_Equipment", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                GI_EquipmentConditions maDoctype = new GI_EquipmentConditions();
                maDoctype.setStander_id(res.getInt(res.getColumnIndex("Stander_id")));
                maDoctype.setImage(res.getString(res.getColumnIndex("Image")));
                maDoctype.setEquipmentDesc(res.getString(res.getColumnIndex("EquipmentDesc")));
                maDoctype.setChecked(res.getString(res.getColumnIndex("Checked")));
                maDoctype.setSerialNo(res.getString(res.getColumnIndex("SerialNo")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setFixedAssetDesc(res.getString(res.getColumnIndex("FixedAssetDesc")));
                maDoctype.setOwnerShip(res.getString(res.getColumnIndex("OwnerShip")));
                maDoctype.setEquipmentCode(res.getString(res.getColumnIndex("EquipmentCode")));
                maDoctype.setFixedAssetCode(res.getString(res.getColumnIndex("FixedAssetCode")));
                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public int checkcountGI(String planid) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor mCount = db.rawQuery("select count(*) from QAVan_GI_Standard WHERE plan_id='" + planid + "'", null);
        int count = 0;
        if (mCount.moveToFirst()) count = mCount.getInt(0);

        mCount.close();
        db.close();
        return count;
    }

    public int checkIsClicked(String planid, String rtscode, int standerid, String category, String particular) {
        int result = 0;
        Cursor res = null;
        SQLiteDatabase db = null;
        try {

            db = this.getReadableDatabase();
            res = db.rawQuery("select * from QAVan_GI_Standard where plan_id='" + planid + "' AND retailsite_code='" + rtscode + "' AND Stander_id=" + standerid + " AND CategoryCode='" + category + "' AND ParticularCode='" + particular + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                result = (res.getInt(res.getColumnIndex("isClicked")));

                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return result;

    }

    public boolean UpdateGeneralIsClicked(String planid, String rtscode, int standerid, String category, String particular, int val) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("isClicked", val);
            res = db.update("QAVan_GI_signature", data, "plan_id= '" + planid.trim() + "' AND retailsite_code= '" + rtscode.trim() + "' AND Stander_id=" + standerid + " AND CategoryCode='" + category + "' AND ParticularCode='" + particular + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public List<Standards> GetStanderListServerSubmit(String planid) {

        Cursor res = null;
        List<Standards> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<Standards>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from QAVan_GI_Standard where plan_id='" + planid + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                Standards maDoctype = new Standards();
                maDoctype.setCategoryCode(res.getString(res.getColumnIndex("CategoryCode")));
                maDoctype.setParticularCode(res.getString(res.getColumnIndex("ParticularCode")));
                maDoctype.setPoint(res.getString(res.getColumnIndex("Points")));
                maDoctype.setConditionCode(res.getString(res.getColumnIndex("Conditions")));
                maDoctype.setActionPlanCode(res.getString(res.getColumnIndex("ActionPlan")));
                maDoctype.setComments(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setImage(null);
                maDoctype.setAttachmentsobjLists(Get_All_Stander_Image(planid));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public String GetStanderPointForCunt(String id, String planid) {

        Log.d("ID", id);
        Log.d("IDPlan", planid);

        Cursor res = null;
        String pointval = "-1";
        SQLiteDatabase db = null;

        try {

            db = this.getReadableDatabase();
            res = db.rawQuery("select * from QAVan_GI_Standard where ParticularCode='" + id + "' AND plan_id='" + planid + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                pointval = res.getString(res.getColumnIndex("Points"));

                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        if (pointval.equalsIgnoreCase("N/A")) {
            return "0";
        } else
            return pointval;
    }

    public int countStandersByPlanidAndRetailsiteCode(String planid, String rtscode) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor mCount = db.rawQuery("select count(*) from QAVan_GI_Standard WHERE plan_id='" + planid + "' AND  retailsite_code='" + rtscode + "'", null);
        int count = 0;
        if (mCount.moveToFirst()) count = mCount.getInt(0);

        mCount.close();
        Log.d("DbCount", String.valueOf(count));
        db.close();
        return count;
    }

    public Long insert_into_QAVan_GI_Conditions(String planid, String category, String particular, String code, String des,
                                                String pointdesc, String pointcode, String score) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("plan_id", planid);
            contentValues.put("CategoryCode", category);
            contentValues.put("ParticularCode", particular);
            contentValues.put("Code", code);
            contentValues.put("Desc", des);
            contentValues.put("PointDesc", pointdesc);
            contentValues.put("PointCode", pointdesc);
            contentValues.put("Score", score);


            idInsert = db.insert("QAVan_GI_Conditions", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();

        }

        return idInsert;
    }

    public Long insert_into_QAVan_GI_Actions(String planid, String category, String particular, String code, String des) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("plan_id", planid);
            contentValues.put("CategoryCode", category);
            contentValues.put("ParticularCode", particular);
            contentValues.put("Code", code);
            contentValues.put("Desc", des);


            idInsert = db.insert("QAVan_GI_Actions", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();

        }

        return idInsert;
    }

    public void deletefromQAVan_GI_Standard() {
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            String deleteqa_inbox = "DELETE FROM QAVan_GI_Standard";
            db.execSQL(deleteqa_inbox);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }

    public void deletefromQAVan_GI_Conditions() {
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            String deleteqa_inbox = "DELETE FROM QAVan_GI_Conditions";
            db.execSQL(deleteqa_inbox);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }

    public void deletefromQAVan_GI_Actions() {
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            String deleteqa_inbox = "DELETE FROM QAVan_GI_Actions";
            db.execSQL(deleteqa_inbox);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }


    //TODO:=======================Images GI============================
    public Long insert_into_GI_Standers_images(GI_Stander_Images stander) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("plan_id", stander.getPlanid());
            contentValues.put("retailsite_code", stander.getRetailsitecode());
            contentValues.put("CategoryCode", stander.getCategoryid());
            contentValues.put("ParticularCode", stander.getParticluarid());
            contentValues.put("label", stander.getLabel());
            contentValues.put("fileName", stander.getFileName());
            contentValues.put("url", stander.getUrl());

            idInsert = db.insert("QAVan_GI_Standard_Images", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<GI_Stander_Images> GetStander_Image(String planid, String rtscode, String categorycode, String particularcode) {

        Cursor res = null;
        List<GI_Stander_Images> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<GI_Stander_Images>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from QAVan_GI_Standard_Images where plan_id='" + planid + "' AND retailsite_code='" + rtscode + "' AND CategoryCode='" + categorycode + "' AND ParticularCode='" + particularcode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                GI_Stander_Images maDoctype = new GI_Stander_Images();
                maDoctype.setId(res.getInt(res.getColumnIndex("id")));
                maDoctype.setPlanid(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRetailsitecode(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setCategoryid(res.getString(res.getColumnIndex("CategoryCode")));
                maDoctype.setParticluarid(res.getString(res.getColumnIndex("ParticularCode")));
                maDoctype.setLabel(res.getString(res.getColumnIndex("label")));
                maDoctype.setFileName(res.getString(res.getColumnIndex("fileName")));
                maDoctype.setUrl(res.getString(res.getColumnIndex("url")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<AttachmentsobjList> Get_All_Stander_Image(String planid) {

        Cursor res = null;
        List<AttachmentsobjList> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<AttachmentsobjList>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from QAVan_GI_Standard_Images where plan_id='" + planid + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                AttachmentsobjList maDoctype = new AttachmentsobjList();

                maDoctype.setFileLabel(res.getString(res.getColumnIndex("label")));
                maDoctype.setFileName(res.getString(res.getColumnIndex("fileName")));
                maDoctype.setFilePath(res.getString(res.getColumnIndex("url")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public boolean deletefromstanderimages(String planid, String rtscode, String categorycode, String particularcode, int id) {


        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deleteqa_dispenser_meaurment_images = "DELETE FROM QAVan_GI_Standard_Images where plan_id= '" + planid.trim() + "' AND retailsite_code= '" + rtscode.trim() + "' AND CategoryCode= '" + categorycode + "' AND ParticularCode='" + particularcode + "' AND id=" + id;
            db.execSQL(deleteqa_dispenser_meaurment_images);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }

    public boolean UpdateGI_Inspection_Image(String planid, String rtscode,
                                             String categorycode, String particularcode, String name, int id) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();
            data.put("label", name);


            res = db.update("QAVan_GI_Standard_Images", data, "plan_id= '" + planid.trim() + "' AND CategoryCode= '" + categorycode.trim() + "' AND ParticularCode='" + particularcode.trim() + "' AND retailsite_code='" + rtscode + "' AND id=" + id, null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    //TODO:============================================================


    public ArrayList<GI_Conditions> GetQAVan_GI_Conditions(String planid, String categorycode, String particluarcode) {

        Cursor res = null;
        ArrayList<GI_Conditions> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<GI_Conditions>();
            list.add(new GI_Conditions("-1", "Select condition"));
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from QAVan_GI_Conditions WHERE CategoryCode= '" + categorycode + "' AND ParticularCode='" + particluarcode + "'  AND plan_id='" + planid + "'", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {
                GI_Conditions maDoctype = new GI_Conditions();
                maDoctype.setCode(res.getString(res.getColumnIndex("Code")));
                maDoctype.setDesc(res.getString(res.getColumnIndex("Desc")));
                maDoctype.setPointDesc(res.getString(res.getColumnIndex("PointDesc")));
                maDoctype.setPointCode(res.getString(res.getColumnIndex("PointCode")));
                maDoctype.setScore(res.getString(res.getColumnIndex("Score")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<DropDownsModel> GetActions(String planid, String categorycode, String particluarcode) {

        Cursor res = null;
        List<DropDownsModel> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<DropDownsModel>();
            list.add(new DropDownsModel("-1", "Select Actions"));
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from QAVan_GI_Actions WHERE CategoryCode= '" + categorycode + "' AND ParticularCode='" + particluarcode + "'  AND plan_id='" + planid + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                DropDownsModel maDoctype = new DropDownsModel();
                maDoctype.setId(res.getString(res.getColumnIndex("Code")));
                maDoctype.setName(res.getString(res.getColumnIndex("Desc")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public void intsertAllPoints(List<GI_Points> pointList) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long id = -1L;
        try {


            for (int i = 0; i < pointList.size(); i++) {
                ContentValues contentValues1 = new ContentValues();
                contentValues1.put("Code", pointList.get(i).getCode());
                contentValues1.put("Score", pointList.get(i).getScore());

                id = db.insert("all_points", null, contentValues1);
            }


        } catch (NumberFormatException e) {
            e.printStackTrace();
        } catch (Exception e) {
        } finally {
            if (db != null) {
                db.close();
            }
        }
    }

    public List<DropDownsModel> GetPoints() {

        Cursor res = null;
        List<DropDownsModel> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<DropDownsModel>();
            //   list.add(new DropDownsModel("-1","Select Points"));
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from all_points", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                DropDownsModel maDoctype = new DropDownsModel();
                maDoctype.setId(res.getString(res.getColumnIndex("Code")));
                maDoctype.setName(res.getString(res.getColumnIndex("Score")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public boolean UpdateGI_Inspection(String planid, String rtscode,
                                       String categorycode, String particularcode, String point,
                                       String condition, String action, String comments) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();
            data.put("Points", point);
            data.put("Conditions", condition);
            data.put("ActionPlan", action);
            data.put("Remarks", comments);


            res = db.update("QAVan_GI_Standard", data, "plan_id= '" + planid.trim() + "' AND CategoryCode= '" + categorycode.trim() + "' AND ParticularCode='" + particularcode.trim() + "' AND retailsite_code='" + rtscode + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }


    public boolean Delete_Image_Stander(String planid, String rtscode, String categorycode, String particularcode) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();
            data.put("Image", "");


            res = db.update("QAVan_GI_Standard", data, "plan_id= '" + planid.trim() + "' AND CategoryCode= '" + categorycode.trim() + "' AND ParticularCode='" + particularcode.trim() + "' AND retailsite_code='" + rtscode + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }


    public boolean UpdateGI_Points(String planid) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();
            data.put("Points", "0");

            res = db.update("QAVan_GI_Standard", data, "plan_id= '" + planid.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }


    public List<DropDownsModel> GetActionsPosition(String planid, String categorycode, String particluarcode) {

        Cursor res = null;
        List<DropDownsModel> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<DropDownsModel>();
            list.add(new DropDownsModel("-1", "Select Actions"));
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from QAVan_GI_Actions WHERE CategoryCode= '" + categorycode + "' AND ParticularCode='" + particluarcode + "'  AND plan_id='" + planid + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                DropDownsModel maDoctype = new DropDownsModel();
                maDoctype.setId(res.getString(res.getColumnIndex("Code")));
                maDoctype.setName(res.getString(res.getColumnIndex("Desc")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }


    //:TODO================================Signature Of General Observation===============================
    public Long insertGeneralInspection_Signature_result(String planid, String retailsite_id, String signature, String remarks, String obtainpoints, String totalpoint) {
        Long idInsert = -1L;

        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("plan_id", planid);
            contentValues.put("retailsite_code", retailsite_id);
            contentValues.put("signature", signature);
            contentValues.put("remarks", remarks);
            contentValues.put("obtainpoints", obtainpoints);
            contentValues.put("totalpoints", totalpoint);

            idInsert = db.insert("QAVan_GI_signature", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public String getGeneralInspection_SignatureFromDb(String planid, String retailcode) {
        Log.d("Site code", planid);

        Cursor res = null;
        String signature = "";
        SQLiteDatabase db = null;

        try {

            db = this.getReadableDatabase();
            res = db.rawQuery("select * from QAVan_GI_signature where plan_id= '" + planid.trim() + "' AND retailsite_code= '" + retailcode.trim() + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                signature = res.getString(res.getColumnIndex("signature"));
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return signature;
    }

    public List<GI_Stander_ServerSubmit> getGeneralInspection_DataFromDb(String planid, String retailcode) {
        Cursor res = null;
        List<GI_Stander_ServerSubmit> list = null;
        SQLiteDatabase db = null;


        try {
            list = new ArrayList<GI_Stander_ServerSubmit>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from QAVan_GI_signature where plan_id= '" + planid.trim() + "' AND retailsite_code= '" + retailcode.trim() + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                GI_Stander_ServerSubmit maDoctype = new GI_Stander_ServerSubmit();
                maDoctype.setObtainpoints(res.getString(res.getColumnIndex("obtainpoints")));
                maDoctype.setTotalpoints(res.getString(res.getColumnIndex("totalpoints")));
                maDoctype.setComments(res.getString(res.getColumnIndex("remarks")));
                maDoctype.setSignature(res.getString(res.getColumnIndex("signature")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public boolean UpdateGeneralInspection_Signature(String plan_id, String retailersite_id, String image) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("signature", image);
            res = db.update("QAVan_GI_signature", data, "plan_id= '" + plan_id.trim() + "' AND retailsite_code= '" + retailersite_id.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public boolean UpdateGeneralInspection_Comments(String plan_id, String retailersite_id, String remarks) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("remarks", remarks);
            res = db.update("QAVan_GI_signature", data, "plan_id= '" + plan_id.trim() + "' AND retailsite_code= '" + retailersite_id.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }


    public boolean deletefromGeneralInspection_Signature(String planid, String rtsid) {
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deletedispenser_meaurment_certificate = "DELETE FROM QAVan_GI_signature WHERE plan_id='" + planid + "' AND retailsite_code='" + rtsid + "'";
            db.execSQL(deletedispenser_meaurment_certificate);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }


    //endregion

    //region ProductQuality Test


    public Long insertankdetail_productquality(Model_TankTypes_Dispenser model_tankTypes_dispenser) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("plan_id", model_tankTypes_dispenser.getPlan_id());
            contentValues.put("retailsite_code", model_tankTypes_dispenser.getRetailsitecode());
            contentValues.put("tankcode", model_tankTypes_dispenser.getTankcode());
            contentValues.put("tankdes", model_tankTypes_dispenser.getTankdetail());
            contentValues.put("fueltype", model_tankTypes_dispenser.getFuelname());


            idInsert = db.insert("tanks_description_productqualitytest", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }//TODO:Insert in tank Detail

    public List<Model_TankTypes_Dispenser> GetProductQualityTankTypeByPlanCodeAndFuelname(String planid, String fuelname) {

        Cursor res = null;
        List<Model_TankTypes_Dispenser> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<Model_TankTypes_Dispenser>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from tanks_description_productqualitytest where plan_id= '" + planid.trim() + "' AND fueltype= '" + fuelname.trim() + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                Model_TankTypes_Dispenser maDoctype = new Model_TankTypes_Dispenser();
                maDoctype.setPlan_id(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRetailsitecode(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setTankcode(res.getString(res.getColumnIndex("tankcode")));
                maDoctype.setTankdetail(res.getString(res.getColumnIndex("tankdes")));
                maDoctype.setFuelname(res.getString(res.getColumnIndex("fueltype")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<Model_TankTypes_Dispenser> GetProductQualityTanksTypeByPlanCode(String planid) {

        Cursor res = null;
        List<Model_TankTypes_Dispenser> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<Model_TankTypes_Dispenser>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from tanks_description_productqualitytest where plan_id= '" + planid.trim() + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                Model_TankTypes_Dispenser maDoctype = new Model_TankTypes_Dispenser();
                maDoctype.setRetailsitecode(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRetailsitecode(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setTankcode(res.getString(res.getColumnIndex("tankcode")));
                maDoctype.setTankdetail(res.getString(res.getColumnIndex("tankdes")));
                maDoctype.setFuelname(res.getString(res.getColumnIndex("fueltype")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }


    public Boolean CheckTankDetailOfProductQualityByroutecode_tankcode(String planid, String tankcode) {

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            res = db.rawQuery("select * from sample_type_productqualitytest where TRIM(plan_id)= '" + planid.trim() + "' AND TRIM(tankcode)= '" + tankcode.trim() + "'", null);
            res.moveToFirst();

            if (res.getCount() > 0) {
                flag = true;
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }


    public Long insertsample(String plancode, String rtscode, String tankcode, String fueltype,
                             String chargeto, String tankDes, String quantity, String productcode,
                             String image, String samplerefNo, String collectorremarks,
                             String productDes, String collectionDate, String Samplecollected,
                             String remarks, String samplestatus, String reason, String Finalize, String DryReasonCode) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("plan_id", plancode);
            contentValues.put("retailsite_code", rtscode);
            contentValues.put("tankcode", tankcode);
            contentValues.put("fueltype", fueltype);
            contentValues.put("ChargeTo", chargeto);
            contentValues.put("TankDes", tankDes);
            contentValues.put("Quantity", quantity);
            contentValues.put("ProductCode", productcode);
            contentValues.put("Image", image);
            contentValues.put("SampleRefNo", samplerefNo);
            contentValues.put("Remarks", remarks);
            contentValues.put("ProductDes", productDes);
            contentValues.put("CollectionDate", collectionDate);
            contentValues.put("SampleCollectedBy", Samplecollected);
            contentValues.put("Remarks_submit", remarks);
            contentValues.put("SampleStatus", samplestatus);
            contentValues.put("Reasion", reason);
            contentValues.put("Finalize", Finalize);
            contentValues.put("DryReasonCode", DryReasonCode);

            idInsert = db.insert("sample_type_productqualitytest", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    } //TODO:Insert in tank Detail

    public List<ProductQualitySamplesFromDB> GetProductSampleByRetailSiteCodeAndFuelname(String plancode, String retailsitecode, String fuelname) {


        Cursor res = null;
        List<ProductQualitySamplesFromDB> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<ProductQualitySamplesFromDB>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from sample_type_productqualitytest where plan_id= '" + plancode.trim() + "' AND fueltype= '" + fuelname.trim() + "' AND retailsite_code='" + retailsitecode + "'", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {
                ProductQualitySamplesFromDB maDoctype = new ProductQualitySamplesFromDB();
                maDoctype.setPlanid(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRetailSite(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setTankCode(res.getString(res.getColumnIndex("tankcode")));
                maDoctype.setFuelType(res.getString(res.getColumnIndex("fueltype")));

                maDoctype.setChargeTo(res.getString(res.getColumnIndex("ChargeTo")));
                maDoctype.setTankDes(res.getString(res.getColumnIndex("TankDes")));
                maDoctype.setQuantity(res.getString(res.getColumnIndex("Quantity")));
                maDoctype.setProductCode(res.getString(res.getColumnIndex("ProductCode")));
                maDoctype.setImage(res.getString(res.getColumnIndex("Image")));
                maDoctype.setSampleRefNo(res.getString(res.getColumnIndex("SampleRefNo")));
                maDoctype.setSampleCollectorRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setProductDes(res.getString(res.getColumnIndex("ProductDes")));
                maDoctype.setCollectionDate(res.getString(res.getColumnIndex("CollectionDate")));
                maDoctype.setSampleCollectedBy(res.getString(res.getColumnIndex("SampleCollectedBy")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks_submit")));
                maDoctype.setSampleStatus(res.getString(res.getColumnIndex("SampleStatus")));
                maDoctype.setReason(res.getString(res.getColumnIndex("Reasion")));
                maDoctype.setFinalize(res.getString(res.getColumnIndex("Finalize")));
                maDoctype.setDryReasonCode(res.getString(res.getColumnIndex("DryReasonCode")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<ProductQualitySamplesFromDB> GetProductSampleByPlanCode(String plancode) {


        Cursor res = null;
        List<ProductQualitySamplesFromDB> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<ProductQualitySamplesFromDB>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from sample_type_productqualitytest where plan_id= '" + plancode.trim() + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                ProductQualitySamplesFromDB maDoctype = new ProductQualitySamplesFromDB();
                maDoctype.setPlanid(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRetailSite(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setTankCode(res.getString(res.getColumnIndex("tankcode")));
                maDoctype.setFuelType(res.getString(res.getColumnIndex("fueltype")));

                maDoctype.setChargeTo(res.getString(res.getColumnIndex("ChargeTo")));
                maDoctype.setTankDes(res.getString(res.getColumnIndex("TankDes")));
                maDoctype.setQuantity(res.getString(res.getColumnIndex("Quantity")));
                maDoctype.setProductCode(res.getString(res.getColumnIndex("ProductCode")));
                maDoctype.setImage(res.getString(res.getColumnIndex("Image")));
                maDoctype.setSampleRefNo(res.getString(res.getColumnIndex("SampleRefNo")));
                maDoctype.setProductDes(res.getString(res.getColumnIndex("ProductDes")));
                maDoctype.setCollectionDate(res.getString(res.getColumnIndex("CollectionDate")));
                maDoctype.setSampleCollectedBy(res.getString(res.getColumnIndex("SampleCollectedBy")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public Long insertsample_detail(String plancode, String rtscode, String tankcode, String fueltype, ProductQualtyTestList productQualtyTestList) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("plan_id", plancode);
            contentValues.put("retailsite_code", rtscode);
            contentValues.put("tankcode", tankcode);
            contentValues.put("fueltype", fueltype);
            contentValues.put("testcode", productQualtyTestList.getTestCode());
            contentValues.put("RangeInSumerMin", productQualtyTestList.getRangeInSumerMin());
            contentValues.put("Result", productQualtyTestList.getResult());
            contentValues.put("TestTitleCode", productQualtyTestList.getTestTitleCode());
            contentValues.put("Method", productQualtyTestList.getMethod());
            contentValues.put("DataTypeID", productQualtyTestList.getDataTypeID());
            contentValues.put("Critical", productQualtyTestList.getCritical());
            contentValues.put("TestSpecificationReq", productQualtyTestList.getTestSpecificationReq());
            contentValues.put("RangeSummerTo", productQualtyTestList.getRangeSummerTo());
            contentValues.put("DataTypeLabel", productQualtyTestList.getDataTypeLabel());
            contentValues.put("Mandatory", productQualtyTestList.getMandatory());
            contentValues.put("RangeInWinterMax", productQualtyTestList.getRangeInWinterMax());
            contentValues.put("RangeWinterTo", productQualtyTestList.getRangeWinterTo());
            contentValues.put("TestTitleDes", productQualtyTestList.getTestTitleDes());
            contentValues.put("RangeInSumerMax", productQualtyTestList.getRangeInSumerMax());
            contentValues.put("Max", productQualtyTestList.getMax());
            contentValues.put("RangeSummerFrom", productQualtyTestList.getRangeSummerFrom());
            contentValues.put("TestSeasionApply", productQualtyTestList.getTestSeasionApply());
            contentValues.put("RangeWinterFrom", productQualtyTestList.getRangeWinterFrom());
            contentValues.put("Min", productQualtyTestList.getMin());
            contentValues.put("Remarks", "");
            contentValues.put("RangeInWinterMin", productQualtyTestList.getRangeInWinterMin());
            contentValues.put("TestStatus", "neither");
            contentValues.put("DefaultMethodCode", productQualtyTestList.getDefaultMethodCode());
            contentValues.put("DefaultMethodName", productQualtyTestList.getDefaultMethodName());


            idInsert = db.insert("sample_description_productqualitytest", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<ProductQualtyTestList> GetProductSampleDetailByTankCodeandTestCode(String plancode, String retailcode, String tankcode) {
        Log.d("Tankcode", tankcode);
        Log.d("retailcode", retailcode);

        Cursor res = null;
        List<ProductQualtyTestList> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<ProductQualtyTestList>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from sample_description_productqualitytest where plan_id= '" + plancode.trim() + "' AND tankcode= '" + tankcode.trim() + "'AND retailsite_code= '" + retailcode.trim() + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                ProductQualtyTestList maDoctype = new ProductQualtyTestList();
                maDoctype.setPlancode(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRetailsite(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setTankcode(res.getString(res.getColumnIndex("tankcode")));
                maDoctype.setFueltype(res.getString(res.getColumnIndex("fueltype")));
                maDoctype.setTestCode(res.getString(res.getColumnIndex("testcode")));
                maDoctype.setMethodList(GetProductQualityMethods(plancode, retailcode, tankcode, res.getString(res.getColumnIndex("testcode"))));
                maDoctype.setRangeInSumerMin(res.getString(res.getColumnIndex("RangeInSumerMin")));
                maDoctype.setResult(res.getString(res.getColumnIndex("Result")));
                maDoctype.setTestTitleCode(res.getString(res.getColumnIndex("TestTitleCode")));
                maDoctype.setMethod(res.getString(res.getColumnIndex("Method")));
                maDoctype.setDataTypeID(res.getString(res.getColumnIndex("DataTypeID")));
                maDoctype.setCritical(res.getString(res.getColumnIndex("Critical")));
                maDoctype.setTestSpecificationReq(res.getString(res.getColumnIndex("TestSpecificationReq")));
                maDoctype.setRangeSummerTo(res.getString(res.getColumnIndex("RangeSummerTo")));
                maDoctype.setDataTypeLabel(res.getString(res.getColumnIndex("DataTypeLabel")));
                maDoctype.setMandatory(res.getString(res.getColumnIndex("Mandatory")));
                maDoctype.setRangeInWinterMax(res.getString(res.getColumnIndex("RangeInWinterMax")));
                maDoctype.setRangeWinterTo(res.getString(res.getColumnIndex("RangeWinterTo")));
                maDoctype.setTestTitleDes(res.getString(res.getColumnIndex("TestTitleDes")));
                maDoctype.setRangeInSumerMax(res.getString(res.getColumnIndex("RangeInSumerMax")));
                maDoctype.setMax(res.getString(res.getColumnIndex("Max")));
                maDoctype.setRangeSummerFrom(res.getString(res.getColumnIndex("RangeSummerFrom")));
                maDoctype.setTestSeasionApply(res.getString(res.getColumnIndex("TestSeasionApply")));
                maDoctype.setRangeWinterFrom(res.getString(res.getColumnIndex("RangeWinterFrom")));
                maDoctype.setMin(res.getString(res.getColumnIndex("Min")));
                maDoctype.setRangeInWinterMin(res.getString(res.getColumnIndex("RangeInWinterMin")));
                maDoctype.setDefaultMethodCode(res.getString(res.getColumnIndex("DefaultMethodCode")));
                maDoctype.setDefaultMethodName(res.getString(res.getColumnIndex("DefaultMethodName")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public boolean UpdateProductQuality_sampleTest(String plan_id, String rs_id, String tankcode, String fueltype, String testcode, String method, String result, String testresult) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("Method", method);
            data.put("Result", result);
            data.put("TestStatus", testresult);

            res = db.update("sample_description_productqualitytest", data, "plan_id= '" + plan_id.trim() + "' AND retailsite_code= '" + rs_id.trim() + "' AND tankcode='" + tankcode.trim() + "' AND fueltype='" + fueltype.trim() + "' AND testcode='" + testcode.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public boolean UpdateProductQuality_sampleStatusAndRemarks(String plan_id, String rs_id, String tankcode, String fueltype, String remarks, String status, String reason) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("Remarks_submit", remarks);
            data.put("SampleStatus", status);
            data.put("Reasion", reason);

            res = db.update("sample_type_productqualitytest", data, "plan_id= '" + plan_id.trim() + "' AND retailsite_code= '" + rs_id.trim() + "' AND tankcode='" + tankcode.trim() + "' AND fueltype='" + fueltype.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public boolean UpdateProductQuality_finilize(String plan_id, String rs_id, String tankcode, String fueltype, String productcode, String finilze) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("Finalize", finilze);

            res = db.update("sample_type_productqualitytest", data, "plan_id= '" + plan_id.trim() + "' AND retailsite_code= '" + rs_id.trim() + "' AND tankcode='" + tankcode.trim() + "' AND fueltype='" + fueltype.trim() + "' AND ProductCode='" + productcode + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }


    public boolean UpdateProductQualityTankStatus(String plan_id, String rs_id, String fueltype, int status) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();


            data.put("status", status);


            res = db.update("fueltype_productquality", data, "plan_id= '" + plan_id.trim() + "' AND retailsite_code= '" + rs_id.trim() + "' AND name='" + fueltype.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }


    public Long insertProductQualityMethods(String planid, String rtsid, String tankcode, String testcode, List<ProductQualtyMethodList> productQualtyMethodLists) {

        SQLiteDatabase db = null;

        Long idInsert = -1L;
        for (int i = 0; i < productQualtyMethodLists.size(); i++) {
            db = this.getReadableDatabase();


            try {
                ContentValues contentValues = new ContentValues();
                contentValues.put("plan_id", planid);
                contentValues.put("retailsite_code", rtsid);
                contentValues.put("tankcode", tankcode);
                contentValues.put("testcode", testcode);
                contentValues.put("Description", productQualtyMethodLists.get(i).getDescription());
                contentValues.put("Code", productQualtyMethodLists.get(i).getCode());


                idInsert = db.insert("MethodListProductQuality", null, contentValues);

            } catch (SQLException e) {
                e.printStackTrace();
                Log.d("Error", "1");
            } finally {
                if (db != null)
                    db.close();
            }
        }
        return idInsert;
    }

    public Long insertProductQualityReasions(String planid, String rtsid, String tankcode, List<ProductQualtyReasion> productQualtyReasions) {
        Long idInsert = -1L;
        for (int i = 0; i < productQualtyReasions.size(); i++) {
            SQLiteDatabase db = this.getReadableDatabase();

            try {
                ContentValues contentValues = new ContentValues();
                contentValues.put("plan_id", planid);
                contentValues.put("retailsite_code", rtsid);
                contentValues.put("tankcode", tankcode);
                contentValues.put("Description", productQualtyReasions.get(i).getDescription());
                contentValues.put("Code", productQualtyReasions.get(i).getCode());


                idInsert = db.insert("ReasionsProductQuality", null, contentValues);

            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                if (db != null)
                    db.close();
            }
        }
        return idInsert;
    }

    public Long insertProductQualitySampleStatus(String planid, String rtsid, String tankcode, List<ProductQualtySampleStatus> productQualtyReasions) {
        Long idInsert = -1L;
        for (int i = 0; i < productQualtyReasions.size(); i++) {
            SQLiteDatabase db = this.getReadableDatabase();

            try {
                ContentValues contentValues = new ContentValues();
                contentValues.put("plan_id", planid);
                contentValues.put("retailsite_code", rtsid);
                contentValues.put("tankcode", tankcode);
                contentValues.put("Description", productQualtyReasions.get(i).getDescription());
                contentValues.put("Code", productQualtyReasions.get(i).getCode());


                idInsert = db.insert("SampleStatusProductQuality", null, contentValues);

            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                if (db != null)
                    db.close();
            }
        }
        return idInsert;
    }

    public List<ProductQualtyMethodList> GetProductQualityMethods(String planid, String rtsid, String tankcode, String testcode) {

        Cursor res = null;
        List<ProductQualtyMethodList> list = null;
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            list = new ArrayList<ProductQualtyMethodList>();
            list.add(new ProductQualtyMethodList("Select methods", "-1"));

            res = db.rawQuery("select * from MethodListProductQuality WHERE plan_id='" + planid + "' AND retailsite_code='" + rtsid + "' AND tankcode='" + tankcode + "' AND testcode='" + testcode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                ProductQualtyMethodList maDoctype = new ProductQualtyMethodList();
                maDoctype.setCode(res.getString(res.getColumnIndex("Code")));
                maDoctype.setDescription(res.getString(res.getColumnIndex("Description")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<ProductQualtyReasion> GetProductQualityReasons(String planid, String rtsid, String tankcode) {

        Cursor res = null;
        List<ProductQualtyReasion> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<ProductQualtyReasion>();
            list.add(new ProductQualtyReasion("Select reasons", "-1"));
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from ReasionsProductQuality WHERE plan_id='" + planid + "' AND retailsite_code='" + rtsid + "' AND tankcode='" + tankcode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                ProductQualtyReasion maDoctype = new ProductQualtyReasion();
                maDoctype.setCode(res.getString(res.getColumnIndex("Code")));
                maDoctype.setDescription(res.getString(res.getColumnIndex("Description")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<ProductQualtySampleStatus> GetProductQualitySampleStaus(String planid, String rtsid, String tankcode) {

        Cursor res = null;
        List<ProductQualtySampleStatus> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<ProductQualtySampleStatus>();
            list.add(new ProductQualtySampleStatus("Select sample status", "-1"));
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from SampleStatusProductQuality WHERE plan_id='" + planid + "' AND retailsite_code='" + rtsid + "' AND tankcode='" + tankcode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                ProductQualtySampleStatus maDoctype = new ProductQualtySampleStatus();
                maDoctype.setCode(res.getString(res.getColumnIndex("Code")));
                maDoctype.setDescription(res.getString(res.getColumnIndex("Description")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public int checkcountMethods_ProductTest(String planid, String rtsid, String tankcode, String testcode) {

        SQLiteDatabase db = null;
        Cursor mCount = null;
        int count = 0;
        try {
            db = this.getReadableDatabase();
            mCount = db.rawQuery("select count(*) from MethodListProductQuality WHERE plan_id='" + planid + "' AND retailsite_code='" + rtsid + "' AND tankcode='" + tankcode + "' AND testcode='" + testcode + "'", null);
            if (mCount.moveToFirst()) count = mCount.getInt(0);

            mCount.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (mCount != null)
                mCount.close();
            db.close();
        }


        return count;
    }

    public int checkcountReasions_ProductTest(String planid, String rtsid, String tankcode) {


        SQLiteDatabase db = this.getReadableDatabase();
        Cursor mCount = db.rawQuery("select count(*) from ReasionsProductQuality WHERE plan_id='" + planid + "' AND retailsite_code='" + rtsid + "' AND tankcode='" + tankcode + "'", null);
        mCount.moveToFirst();
        int count = 0;
        if (mCount.moveToFirst()) count = mCount.getInt(0);
        mCount.close();
        db.close();

        return count;
    }

    public int checkcountSampleStatus_ProductTest(String planid, String rtsid, String tankcode) {


        SQLiteDatabase db = this.getReadableDatabase();
        Cursor mCount = db.rawQuery("select count(*) from SampleStatusProductQuality WHERE plan_id='" + planid + "' AND retailsite_code='" + rtsid + "' AND tankcode='" + tankcode + "'", null);
        int count = 0;
        if (mCount.moveToFirst()) count = mCount.getInt(0);

        mCount.close();
        db.close();
        return count;
    }

    public Long inserfueltype_productquality(String planid, String id, String name) {
        Long idInsert = -1L;

        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("plan_id", planid);
            contentValues.put("retailsite_code", id);
            contentValues.put("name", name);
            contentValues.put("status", -1);

            idInsert = db.insert("fueltype_productquality", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<FuelType> Getfueltype_productqualityByRetailSiteCode(String planid, String rtsid) {

        Cursor res = null;
        List<FuelType> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<FuelType>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from fueltype_productquality where plan_id= '" + planid.trim() + "' AND retailsite_code='" + rtsid.trim() + "'", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {
                FuelType maDoctype = new FuelType();
                maDoctype.setFueltype(res.getString(res.getColumnIndex("name")));
                maDoctype.setPlancode(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRoutesitecode(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setStatus(res.getInt(res.getColumnIndex("status")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    //TODO:================================ Fuel Pass or Fail on Result=========================
    public List<ProductQualityFuelPassorFail> Getfueltype_productqualityByPlanidAndRetailSiteCodeForDispenserResult(String planid, String rtsid) {

        Cursor res = null;
        List<ProductQualityFuelPassorFail> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<ProductQualityFuelPassorFail>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from fueltype_productquality where plan_id= '" + planid.trim() + "' AND retailsite_code='" + rtsid.trim() + "'", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {
                ProductQualityFuelPassorFail maDoctype = new ProductQualityFuelPassorFail();
                maDoctype.setFueltype(res.getString(res.getColumnIndex("name")));
                maDoctype.setPlancode(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRoutesitecode(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setStatus(String.valueOf(CheckFuelTestPassorFailCase(
                        res.getString(res.getColumnIndex("plan_id")),
                        res.getString(res.getColumnIndex("retailsite_code")), res.getString(res.getColumnIndex("name")))));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<FuelType_Certificate> Getfueltype_productqualityByPlanidAndRetailSiteCodeForDispenserResultForCerfificate(String planid, String rtsid) {

        Cursor res = null;
        List<FuelType_Certificate> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<FuelType_Certificate>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from fueltype_productquality where plan_id= '" + planid.trim() + "' AND retailsite_code='" + rtsid.trim() + "'", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {
                FuelType_Certificate maDoctype = new FuelType_Certificate();
                maDoctype.setName(res.getString(res.getColumnIndex("name")));
                maDoctype.setStatus(String.valueOf(CheckFuelTestPassorFailCase(
                        res.getString(res.getColumnIndex("plan_id")),
                        res.getString(res.getColumnIndex("retailsite_code")), res.getString(res.getColumnIndex("name")))));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }


    public String CheckFuelTestPassorFailCase(String planid, String rtsid, String fuelcode) {

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        String flag = "";


        try {
            res = db.rawQuery("select * from sample_type_productqualitytest where TRIM(plan_id)= '" + planid.trim() + "' AND retailsite_code='" + rtsid + "' AND fueltype='" + fuelcode + "'", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {

                if (res.getString(res.getColumnIndex("SampleStatus")).equalsIgnoreCase("Pass")) {
                    flag = "pass";
                } else {
                    flag = "fail";
                }
                res.moveToNext();
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }

    public boolean CheckProductFinailStatus(String planid, String rtsid, String tankcode, String productcode) {

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        boolean flag = false;


        try {
            res = db.rawQuery("select * from sample_type_productqualitytest where TRIM(plan_id)= '" + planid.trim() + "' AND retailsite_code='" + rtsid + "' AND tankcode='" + tankcode + "' AND ProductCode='" + productcode + "'", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {

                if (res.getString(res.getColumnIndex("Finalize")).equalsIgnoreCase("1")) {
                    flag = true;
                } else {
                    flag = false;
                }
                res.moveToNext();
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }


    //TODO:=====================================================================================
    public Boolean Getfueltype_productqualitybyname(String code, String rtsid, String name) {

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            res = db.rawQuery("select * from fueltype_productquality where TRIM(plan_id)= '" + code.trim() + "' AND TRIM(retailsite_code)= '" + rtsid.trim() + "'AND TRIM(name)= '" + name.trim() + "'", null);
            res.moveToFirst();

            if (res.getCount() > 0) {
                flag = true;
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }


    public boolean deletefromfueltype_productquality() {
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deleteqa_tankststus = "DELETE FROM fueltype_productquality";
            db.execSQL(deleteqa_tankststus);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }


    public Boolean CheckProductQualitybyPlanCode(String plancode) {

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            res = db.rawQuery("select * from sample_type_productqualitytest where TRIM(plan_id)= '" + plancode.trim() + "'", null);
            res.moveToFirst();

            if (res.getCount() > 0) {
                flag = true;
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }

    public boolean UpdateSampleCollectorData(String plan_id, String rs_id, String tankcode, String sam_ref, String sam_coll, String test_rep, String date, String quan, String remarks) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("SampleRefNo", sam_ref);
            data.put("SampleCollectedBy", sam_coll);
            data.put("ProductCode", test_rep);
            data.put("CollectionDate", date);
            data.put("Quantity", quan);
            data.put("Remarks", remarks);
            res = db.update("sample_type_productqualitytest", data, "plan_id= '" + plan_id.trim() + "' AND retailsite_code= '" + rs_id.trim() + "' AND tankcode='" + tankcode.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public Long insert_product_quality_images(String planid, String retailsitecode, String tankcode, CaptureImagesModel images) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {


            ContentValues contentValues = new ContentValues();
            contentValues.put("plan_id", planid);
            contentValues.put("retailsite_code", retailsitecode);
            contentValues.put("tankcode", tankcode);
            contentValues.put("label", images.getLabel());
            contentValues.put("fileName", images.getFileName());
            contentValues.put("url", images.getUrl());

            idInsert = db.insert("product_quality_images", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public Long insert_product_quality_retain_images(String planid, String retailsitecode, String tankcode, CaptureImagesModel images) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {


            ContentValues contentValues = new ContentValues();
            contentValues.put("plan_id", planid);
            contentValues.put("retailsite_code", retailsitecode);
            contentValues.put("tankcode", tankcode);
            contentValues.put("label", images.getLabel());
            contentValues.put("fileName", images.getFileName());
            contentValues.put("url", images.getUrl());

            idInsert = db.insert("product_quality_retain_images", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<ProductQualityImagesFromDB> getProduct_QualityDataFromDb(String planid, String retailcode, String tankcode) {
        Cursor res = null;
        List<ProductQualityImagesFromDB> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<ProductQualityImagesFromDB>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from product_quality_images where plan_id= '" + planid.trim() + "' AND retailsite_code= '" + retailcode.trim() + "' AND tankcode= '" + tankcode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                ProductQualityImagesFromDB maDoctype = new ProductQualityImagesFromDB();
                maDoctype.setId(res.getInt(res.getColumnIndex("id")));
                maDoctype.setPlanid(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setTankCode(res.getString(res.getColumnIndex("tankcode")));
                maDoctype.setLabel(res.getString(res.getColumnIndex("label")));
                maDoctype.setFileName(res.getString(res.getColumnIndex("fileName")));
                maDoctype.setUrl(res.getString(res.getColumnIndex("url")));
                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }


    public int checkcountProductQualityImagesFromDB(String planid, String rtsid, String tankcode) {


        SQLiteDatabase db = this.getReadableDatabase();
        Cursor mCount = db.rawQuery("select * from product_quality_images where plan_id= '" + planid.trim() + "' AND retailsite_code= '" + rtsid.trim() + "' AND tankcode= '" + tankcode + "'", null);
        int count = 0;
        if (mCount.moveToFirst()) count = mCount.getInt(0);

        mCount.close();
        db.close();
        return count;
    }

    public List<ProductQualityImagesFromDB> getProduct_QualityRetainDataFromDb(String planid, String retailcode, String tankcode) {
        Cursor res = null;
        List<ProductQualityImagesFromDB> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<ProductQualityImagesFromDB>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from product_quality_retain_images where plan_id= '" + planid.trim() + "' AND retailsite_code= '" + retailcode.trim() + "' AND tankcode= '" + tankcode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                ProductQualityImagesFromDB maDoctype = new ProductQualityImagesFromDB();
                maDoctype.setId(res.getInt(res.getColumnIndex("id")));
                maDoctype.setPlanid(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setTankCode(res.getString(res.getColumnIndex("tankcode")));
                maDoctype.setLabel(res.getString(res.getColumnIndex("label")));
                maDoctype.setFileName(res.getString(res.getColumnIndex("fileName")));
                maDoctype.setUrl(res.getString(res.getColumnIndex("url")));
                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public boolean deletefromProduct_quality(String planid, String retailcode,
                                             String tankcode, int id) {


        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deleteqa_product_quality_images = "DELETE FROM product_quality_images where plan_id=" + planid + "' AND retailsite_code='" + retailcode + "' AND tankcode='" + tankcode + "' AND id=" + id;
            db.execSQL(deleteqa_product_quality_images);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }

    public boolean deletefromProduct_quality_retain(String planid, String retailcode, String tankcode, int id) {


        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deleteqa_product_quality_images = "DELETE FROM product_quality_retain_images where plan_id=" + planid + "' AND retailsite_code='" + retailcode + "' AND tankcode='" + tankcode + "' AND id=" + id;
            db.execSQL(deleteqa_product_quality_images);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }


    public boolean Updateproductqalityimages(String planid, String retailcode,
                                             String tankcode, String label, int id) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("label", label);
            res = db.update("product_quality_images", data, "plan_id= '" + planid.trim() + "' AND retailsite_code= '" + retailcode.trim() + "' AND tankcode='" + tankcode + "' AND id=" + id, null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public boolean Updateproductqalityimages_retain(String planid, String retailcode,
                                                    String tankcode, String label, int id) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("label", label);
            res = db.update("product_quality_retain_images", data, "plan_id= '" + planid.trim() + "' AND retailsite_code= '" + retailcode.trim() + "' AND tankcode='" + tankcode + "' AND id=" + id, null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }


    public boolean UpdateFinalizeStatusofProduct(String plan_id, String rs_id, String tankcode, String sam_ref, String sam_coll, String test_rep, String date, String quan, String remarks) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("Finalize", sam_ref);
            res = db.update("sample_type_productqualitytest", data, "plan_id= '" + plan_id.trim() + "' AND retailsite_code= '" + rs_id.trim() + "' AND tankcode='" + tankcode.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }


    //:TODO================================TEST RESULT OF PRODUCT QUALITY CERTIFICATE SIGNATURE===============================
    public Long insertProductQualityCertificate_result(String planid, String retailsite_id, CaptureImagesModel images) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("plan_id", planid);
            contentValues.put("retailsite_code", retailsite_id);
            contentValues.put("label", images.getLabel());
            contentValues.put("fileName", images.getFileName());
            contentValues.put("url", images.getUrl());

            idInsert = db.insert("productqualityresult_certificate_signature", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public ProductQualitySignatureImages getProductQualityCertificateFromDb(String planid, String retailcode) {
        Log.d("Site code", planid);

        Cursor res = null;

        SQLiteDatabase db = null;
        ProductQualitySignatureImages images = new ProductQualitySignatureImages();
        try {

            db = this.getReadableDatabase();
            res = db.rawQuery("select * from productqualityresult_certificate_signature where plan_id= '" + planid.trim() + "' AND retailsite_code= '" + retailcode.trim() + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                images.setFileName(res.getString(res.getColumnIndex("fileName")));
                images.setLabel(res.getString(res.getColumnIndex("label")));
                images.setUrl(res.getString(res.getColumnIndex("url")));
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return images;
    }

    public boolean UpdateProductQualityCertificateSignature(String plan_id, String retailersite_id, String image) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("url", image);
            res = db.update("productqualityresult_certificate_signature", data, "plan_id= '" + plan_id.trim() + "' AND retailsite_code= '" + retailersite_id.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public boolean deletefromProductQualityCertificate(String planid, String rtsid) {
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deletedispenser_meaurment_certificate = "DELETE FROM productqualityresult_certificate_signature WHERE plan_id='" + planid + "'AND retailsite_code='" + rtsid + "'";
            db.execSQL(deletedispenser_meaurment_certificate);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }


    //TODO:=========================== PRODUCT QULAITY TECHSIGNATURE CAPTURE IMAGES=======================
    public Long insertProductQualityTechCertificate_result(String planid, String retailsite_id, CaptureImagesModel images) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("plan_id", planid);
            contentValues.put("retailsite_code", retailsite_id);
            contentValues.put("label", images.getLabel());
            contentValues.put("fileName", images.getFileName());
            contentValues.put("url", images.getUrl());

            idInsert = db.insert("product_quality_tech_signature_images", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public ProductQualitySignatureImages getProductQualityTechCertificateFromDb(String planid, String retailcode) {
        Log.d("Site code", planid);

        Cursor res = null;

        SQLiteDatabase db = null;
        ProductQualitySignatureImages images = new ProductQualitySignatureImages();
        try {

            db = this.getReadableDatabase();
            res = db.rawQuery("select * from product_quality_tech_signature_images where plan_id= '" + planid.trim() + "' AND retailsite_code= '" + retailcode.trim() + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                images.setFileName(res.getString(res.getColumnIndex("fileName")));
                images.setLabel(res.getString(res.getColumnIndex("label")));
                images.setUrl(res.getString(res.getColumnIndex("url")));
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return images;
    }

    public boolean UpdateProductQualityTechCertificateSignature(String plan_id, String retailersite_id, String image) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("url", image);
            res = db.update("product_quality_tech_signature_images", data, "plan_id= '" + plan_id.trim() + "' AND retailsite_code= '" + retailersite_id.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public boolean deletefromProductQualityTechCertificate(String planid, String rtsid) {
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deletedispenser_meaurment_certificate = "DELETE FROM product_quality_tech_signature_images WHERE plan_id='" + planid + "' AND retailsite_code='" + rtsid + "'";
            db.execSQL(deletedispenser_meaurment_certificate);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }

    //TODO:============================= PRODUCT QUALITY SIGNATURE CATUPRE IMAGES===============================

    public Long insert_product_quality_signature_images(String planid, String retailsitecode, CaptureImagesModel images) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {


            ContentValues contentValues = new ContentValues();
            contentValues.put("plan_id", planid);
            contentValues.put("retailsite_code", retailsitecode);
            contentValues.put("label", images.getLabel());
            contentValues.put("fileName", images.getFileName());
            contentValues.put("url", images.getUrl());

            idInsert = db.insert("product_quality_signature_images", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<ProductQualityResultCaptureImagesFromDb> getProduct_QualitySignatureImagesDataFromDb(String planid, String retailcode) {
        Cursor res = null;
        List<ProductQualityResultCaptureImagesFromDb> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<ProductQualityResultCaptureImagesFromDb>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from product_quality_signature_images where plan_id= '" + planid.trim() + "' AND retailsite_code= '" + retailcode.trim() + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                ProductQualityResultCaptureImagesFromDb maDoctype = new ProductQualityResultCaptureImagesFromDb();
                maDoctype.setId(res.getInt(res.getColumnIndex("id")));
                maDoctype.setPlanid(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setLabel(res.getString(res.getColumnIndex("label")));
                maDoctype.setFileName(res.getString(res.getColumnIndex("fileName")));
                maDoctype.setUrl(res.getString(res.getColumnIndex("url")));
                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public boolean deletefromProduct_quality_signatureImages(String planid, String retailcode, int id) {


        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deleteqa_product_quality_images = "DELETE FROM product_quality_signature_images where plan_id=" + planid + "' AND retailsite_code='" + retailcode + "' AND id=" + id;
            db.execSQL(deleteqa_product_quality_images);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }

    public boolean Updateproductqalityimages_signatureimages(String planid, String retailcode, String label, int id) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("label", label);
            res = db.update("product_quality_signature_images", data, "plan_id= '" + planid.trim() + "' AND retailsite_code= '" + retailcode.trim() + "' AND id=" + id, null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }


    //TODO:============================= GET PRODUCT QUALITY FOR SERVER SUBMIT==========================

    public List<ProductQuality_ServerSumbit_Model> GetAllDataFromDB(String plancode, String retailcode) {

        Log.d("retailcode", retailcode);

        Cursor res = null;
        List<ProductQuality_ServerSumbit_Model> list = null;
        SQLiteDatabase db = null;


        try {
            list = new ArrayList<ProductQuality_ServerSumbit_Model>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from sample_type_productqualitytest where plan_id= '" + plancode.trim() + "'AND retailsite_code= '" + retailcode.trim() + "'", null);
            res.moveToFirst();


            DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
            Date Today_date = new Date();

            while (res.isAfterLast() == false) {
                ProductQuality_ServerSumbit_Model maDoctype = new ProductQuality_ServerSumbit_Model();
                maDoctype.setChargeTo(res.getString(res.getColumnIndex("ChargeTo")));
                maDoctype.setTankDes(res.getString(res.getColumnIndex("TankDes")));
                maDoctype.setQuantity(res.getString(res.getColumnIndex("Quantity")));
                maDoctype.setProductCode(res.getString(res.getColumnIndex("ProductCode")));
                maDoctype.setImage(null);
                maDoctype.setSampleCollectorRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks_submit")));
                maDoctype.setTankCode(res.getString(res.getColumnIndex("tankcode")));
                maDoctype.setCollectionDate(String.valueOf(dateFormat.format(Today_date)));
                maDoctype.setSampleCollectedBy(res.getString(res.getColumnIndex("SampleCollectedBy")));
                maDoctype.setSampleStatus(res.getString(res.getColumnIndex("SampleStatus")));
                maDoctype.setReasion(res.getString(res.getColumnIndex("Reasion")));
                maDoctype.setFinalize(res.getString(res.getColumnIndex("Finalize")));
                maDoctype.setImages_modelList(getProduct_QualityImages(plancode, retailcode, res.getString(res.getColumnIndex("tankcode"))));
                maDoctype.setSampleTest_models(GetProductAllTestSampleList(plancode, retailcode, res.getString(res.getColumnIndex("tankcode"))));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<ProductQuality_ServerSumbit_Images_Model> getProduct_QualityImages(String planid, String retailcode, String tankcode) {
        Cursor res = null;
        List<ProductQuality_ServerSumbit_Images_Model> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<ProductQuality_ServerSumbit_Images_Model>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from product_quality_images where plan_id= '" + planid.trim() + "' AND retailsite_code= '" + retailcode.trim() + "' AND tankcode= '" + tankcode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                ProductQuality_ServerSumbit_Images_Model maDoctype = new ProductQuality_ServerSumbit_Images_Model();
                maDoctype.setLabel(res.getString(res.getColumnIndex("label")));
                maDoctype.setFileName(res.getString(res.getColumnIndex("fileName")));
                maDoctype.setUrl(res.getString(res.getColumnIndex("url")));
                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<ProductQuality_ServerSumbit_SampleTest_Model> GetProductAllTestSampleList(String plancode, String retailcode, String tankcode) {
        Log.d("Tankcode", tankcode);
        Log.d("retailcode", retailcode);

        Cursor res = null;
        List<ProductQuality_ServerSumbit_SampleTest_Model> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<ProductQuality_ServerSumbit_SampleTest_Model>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from sample_description_productqualitytest where plan_id= '" + plancode.trim() + "' AND tankcode= '" + tankcode.trim() + "'AND retailsite_code= '" + retailcode.trim() + "'", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {
                ProductQuality_ServerSumbit_SampleTest_Model maDoctype = new ProductQuality_ServerSumbit_SampleTest_Model();

                maDoctype.setProductCode(res.getString(res.getColumnIndex("tankcode")));
                maDoctype.setMethod(res.getString(res.getColumnIndex("Method")));
                maDoctype.setResult(res.getString(res.getColumnIndex("Result")));
                maDoctype.setTestCode(res.getString(res.getColumnIndex("testcode")));
                maDoctype.setMax(res.getString(res.getColumnIndex("Max")));
                maDoctype.setMin(res.getString(res.getColumnIndex("Min")));
                maDoctype.setRangeInSumerMin(res.getString(res.getColumnIndex("RangeInSumerMin")));
                maDoctype.setRangeInSumerMax(res.getString(res.getColumnIndex("RangeInSumerMax")));
                maDoctype.setRangeInWinterMin(res.getString(res.getColumnIndex("RangeInSumerMin")));
                maDoctype.setRangeInWinterMax(res.getString(res.getColumnIndex("RangeInWinterMax")));
                maDoctype.setRangeWinterFrom(res.getString(res.getColumnIndex("RangeWinterFrom")));
                maDoctype.setRangeWinterTo(res.getString(res.getColumnIndex("RangeWinterTo")));
                maDoctype.setRangeSummerFrom(res.getString(res.getColumnIndex("RangeSummerFrom")));
                maDoctype.setRangeSummerTo(res.getString(res.getColumnIndex("RangeSummerTo")));
                maDoctype.setDataTypeID(res.getString(res.getColumnIndex("DataTypeID")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }


    //TODO:================================ Check Critical Test Before Submit ===========================
    public List<ProductQualtyTestList> GetAllCriticalProductTestSampleList(String plancode, String retailcode) {

        Log.d("retailcode", retailcode);

        Cursor res = null;
        List<ProductQualtyTestList> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<ProductQualtyTestList>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from sample_description_productqualitytest where plan_id= '" + plancode.trim() + "' AND retailsite_code= '" + retailcode.trim() + "' AND Critical='1' AND TestStatus='neither'", null);
            res.moveToFirst();


            while (res.isAfterLast() == false) {
                ProductQualtyTestList maDoctype = new ProductQualtyTestList();
                maDoctype.setPlancode(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setRetailsite(res.getString(res.getColumnIndex("retailsite_code")));
                maDoctype.setTankcode(res.getString(res.getColumnIndex("tankcode")));
                maDoctype.setFueltype(res.getString(res.getColumnIndex("fueltype")));
                maDoctype.setTestCode(res.getString(res.getColumnIndex("testcode")));
                //  maDoctype.setMethodList(GetProductQualityMethods(plancode,retailcode,tankcode,res.getString(res.getColumnIndex("testcode"))));
                maDoctype.setRangeInSumerMin(res.getString(res.getColumnIndex("RangeInSumerMin")));
                maDoctype.setResult(res.getString(res.getColumnIndex("Result")));
                maDoctype.setTestTitleCode(res.getString(res.getColumnIndex("TestTitleCode")));
                maDoctype.setMethod(res.getString(res.getColumnIndex("Method")));
                maDoctype.setDataTypeID(res.getString(res.getColumnIndex("DataTypeID")));
                maDoctype.setCritical(res.getString(res.getColumnIndex("Critical")));
                maDoctype.setTestSpecificationReq(res.getString(res.getColumnIndex("TestSpecificationReq")));
                maDoctype.setRangeSummerTo(res.getString(res.getColumnIndex("RangeSummerTo")));
                maDoctype.setDataTypeLabel(res.getString(res.getColumnIndex("DataTypeLabel")));
                maDoctype.setMandatory(res.getString(res.getColumnIndex("Mandatory")));
                maDoctype.setRangeInWinterMax(res.getString(res.getColumnIndex("RangeInWinterMax")));
                maDoctype.setRangeWinterTo(res.getString(res.getColumnIndex("RangeWinterTo")));
                maDoctype.setTestTitleDes(res.getString(res.getColumnIndex("TestTitleDes")));
                maDoctype.setRangeInSumerMax(res.getString(res.getColumnIndex("RangeInSumerMax")));
                maDoctype.setMax(res.getString(res.getColumnIndex("Max")));
                maDoctype.setRangeSummerFrom(res.getString(res.getColumnIndex("RangeSummerFrom")));
                maDoctype.setTestSeasionApply(res.getString(res.getColumnIndex("TestSeasionApply")));
                maDoctype.setRangeWinterFrom(res.getString(res.getColumnIndex("RangeWinterFrom")));
                maDoctype.setMin(res.getString(res.getColumnIndex("Min")));
                maDoctype.setRangeInWinterMin(res.getString(res.getColumnIndex("RangeInWinterMin")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    // TODO:============================= DElete Product quality==========================
    public void deleteProductTables() {
        SQLiteDatabase db = this.getReadableDatabase();
        try {

            //TODO:===================Product Quality================================

            String deleteLabTestRequestProductQuality = "DELETE FROM labtest_request";
            db.execSQL(deleteLabTestRequestProductQuality);
            String deletefueltype_productquality = "DELETE FROM fueltype_productquality";
            db.execSQL(deletefueltype_productquality);
            String deletetanks_description_productqualitytest = "DELETE FROM tanks_description_productqualitytest";
            db.execSQL(deletetanks_description_productqualitytest);
            String deletesample_type_productqualitytest = "DELETE FROM sample_type_productqualitytest";
            db.execSQL(deletesample_type_productqualitytest);
            String deleteproduct_quality_images = "DELETE FROM product_quality_images";
            db.execSQL(deleteproduct_quality_images);
            String deletesample_description_productqualitytest = "DELETE FROM sample_description_productqualitytest";
            db.execSQL(deletesample_description_productqualitytest);
            String deleteMethodListProductQuality = "DELETE FROM MethodListProductQuality";
            db.execSQL(deleteMethodListProductQuality);
            String deleteReasionsProductQuality = "DELETE FROM ReasionsProductQuality";
            db.execSQL(deleteReasionsProductQuality);
            String deleteSampleStatusProductQuality = "DELETE FROM SampleStatusProductQuality";
            db.execSQL(deleteSampleStatusProductQuality);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }

    public Long deleteQATourProductTestByPlanAndRetailSite(String plan_id, String retailsite_code) {

        SQLiteDatabase db = this.getReadableDatabase();

        Long returnValue = 1L;

        try {

            //TODO:===================Product Quality================================

            String deletefueltype_productquality = "DELETE FROM fueltype_productquality  WHERE plan_id = '" + plan_id + "' AND retailsite_code = '" + retailsite_code + "'";
            ;
            db.execSQL(deletefueltype_productquality);
            String deletetanks_description_productqualitytest = "DELETE FROM tanks_description_productqualitytest WHERE plan_id = '" + plan_id + "' AND retailsite_code = '" + retailsite_code + "'";
            ;
            db.execSQL(deletetanks_description_productqualitytest);
            String deletesample_type_productqualitytest = "DELETE FROM sample_type_productqualitytest WHERE plan_id = '" + plan_id + "' AND retailsite_code = '" + retailsite_code + "'";
            ;
            db.execSQL(deletesample_type_productqualitytest);
            String deleteproduct_quality_images = "DELETE FROM product_quality_images WHERE plan_id = '" + plan_id + "' AND retailsite_code = '" + retailsite_code + "'";
            ;
            db.execSQL(deleteproduct_quality_images);
            String deletesample_description_productqualitytest = "DELETE FROM sample_description_productqualitytest WHERE plan_id = '" + plan_id + "' AND retailsite_code = '" + retailsite_code + "'";
            ;
            db.execSQL(deletesample_description_productqualitytest);
            String deleteMethodListProductQuality = "DELETE FROM MethodListProductQuality WHERE plan_id = '" + plan_id + "' AND retailsite_code = '" + retailsite_code + "'";
            ;
            db.execSQL(deleteMethodListProductQuality);
            String deleteReasionsProductQuality = "DELETE FROM ReasionsProductQuality WHERE plan_id = '" + plan_id + "' AND retailsite_code = '" + retailsite_code + "'";
            ;
            db.execSQL(deleteReasionsProductQuality);
            String deleteSampleStatusProductQuality = "DELETE FROM SampleStatusProductQuality WHERE plan_id = '" + plan_id + "' AND retailsite_code = '" + retailsite_code + "'";
            ;
            db.execSQL(deleteSampleStatusProductQuality);
            delAllLabTests();

            returnValue = 1L;
        } catch (SQLException e) {
            e.printStackTrace();
            returnValue = -1L;
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return returnValue;
    }

    //endregion

    //region tour status

    public int gettourststatus(String id) {


        Log.d("ID", id);

        Cursor res = null;
        int pointval = 0;
        SQLiteDatabase db = null;

        try {

            db = this.getReadableDatabase();
            res = db.rawQuery("select * from starttourstatus where planid='" + id + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                pointval = res.getInt(res.getColumnIndex("status"));

                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return pointval;
    }

    public Long inserttourstatus(String id, int status) {


        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;

        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("planid", id);
            contentValues.put("status", status);


            idInsert = db.insert("starttourstatus", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public int countstartstatus(String id) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor mCount = db.rawQuery("select * from starttourstatus where planid='" + id + "'", null);
        int count = 0;
        if (mCount.moveToFirst()) count = mCount.getInt(0);

        mCount.close();
        db.close();

        return count;
    }

    //endregion

    //region UserObservation


    public Long insert_into_UserObservation(String pid, UserObservationList userObservation) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("plan_id", pid);
            contentValues.put("ProductColor", userObservation.getProductColor());
            contentValues.put("RetailSiteName", userObservation.getRetailSiteName());
            contentValues.put("FuelType", userObservation.getFuelType());
            contentValues.put("UserObservation", userObservation.getUserObservation());
            contentValues.put("RetailSiteCode", userObservation.getRetailSiteCode());
            contentValues.put("SpecificGravity", userObservation.getSpecificGravity());
            contentValues.put("Remarks", userObservation.getRemarks());
            contentValues.put("ReconStatus", userObservation.getReconStatus());
            contentValues.put("Reasion", userObservation.getReasion());

            idInsert = db.insert("UserObservation", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<UserObservationList> Get_UserObservation(String plancode, String retailsite_id) {

        Cursor res = null;
        List<UserObservationList> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<UserObservationList>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from UserObservation where plan_id= '" + plancode.trim() + "' AND  RetailSiteCode = '" + retailsite_id + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                UserObservationList maDoctype = new UserObservationList();
                maDoctype.setPlanid(res.getString(res.getColumnIndex("plan_id")));
                maDoctype.setProductColor(res.getString(res.getColumnIndex("ProductColor")));
                maDoctype.setFuelType(res.getString(res.getColumnIndex("FuelType")));
                maDoctype.setRetailSiteName(res.getString(res.getColumnIndex("RetailSiteName")));
                maDoctype.setUserObservation(res.getString(res.getColumnIndex("UserObservation")));
                maDoctype.setRetailSiteCode(res.getString(res.getColumnIndex("RetailSiteCode")));
                maDoctype.setSpecificGravity(res.getString(res.getColumnIndex("SpecificGravity")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setReconStatus(res.getString(res.getColumnIndex("ReconStatus")));
                maDoctype.setReasion(res.getString(res.getColumnIndex("Reasion")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public Boolean CheckUserObservationbyPlanCode(String plancode, String retailsite_id) {

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            res = db.rawQuery("select * from UserObservation where TRIM(plan_id)= '" + plancode.trim() + "' AND  RetailSiteCode = '" + retailsite_id + "'", null);
            res.moveToFirst();

            if (res.getCount() > 0) {
                flag = true;
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }


    public int insert_into_QAProductTestReq(List<QAProductTestReq> testReqList) {
        int idInsert = -1;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();

            for (int i = 0; i < testReqList.size(); i++) {

                contentValues.put("RequestNo", testReqList.get(i).getRequestNo());
                contentValues.put("RequestDate", testReqList.get(i).getRequestDate());
                contentValues.put("LabType", testReqList.get(i).getLabType());
                contentValues.put("Remarks", testReqList.get(i).getRemarks());
                contentValues.put("TestType", testReqList.get(i).getTestType());

                db.insert("qa_product_test_req", null, contentValues);
                idInsert = i;
            }


        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<QAProductTestReq> Get_QAProductTestReq() {

        Cursor res = null;
        List<QAProductTestReq> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<QAProductTestReq>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from qa_product_test_req", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                QAProductTestReq maDoctype = new QAProductTestReq();
                maDoctype.setId(res.getInt(res.getColumnIndex("Id")));
                maDoctype.setRequestNo(res.getString(res.getColumnIndex("RequestNo")));
                maDoctype.setTestCase(res.getString(res.getColumnIndex("TestCase")));
                maDoctype.setRequestDate(res.getString(res.getColumnIndex("RequestDate")));
                maDoctype.setLabType(res.getString(res.getColumnIndex("LabType")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setTestType(res.getString(res.getColumnIndex("TestType")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public void deleteQAProductTestReq() {
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            String deleteqa_inbox = "DELETE FROM qa_product_test_req";
            db.execSQL(deleteqa_inbox);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }

    public void deletefromUserObservation() {
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            String deleteqa_inbox = "DELETE FROM UserObservation";
            db.execSQL(deleteqa_inbox);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }

    public void deletefromUserObservationbyid(String plan_id, String retailsite_id) {
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            String deleteqa_inbox = "DELETE FROM UserObservation  WHERE TRIM(plan_id)= '" + plan_id.trim() + "' AND  RetailSiteCode = '" + retailsite_id + "'";
            db.execSQL(deleteqa_inbox);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }

    public void deletefromqa_possibleuserobservation() {
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            String deleteqa_inbox = "DELETE FROM qa_possibleuserobservation";
            db.execSQL(deleteqa_inbox);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }


    public void deletefromqa_possibleuserobservation_productcolor() {
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            String deleteqa_inbox = "DELETE FROM qa_possibleuserobservation_productcolor";
            db.execSQL(deleteqa_inbox);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }


    public void deletefromqa_possibleuserobservation_reasons() {
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            String deleteqa_inbox = "DELETE FROM qa_possibleuserobservation_reasons";
            db.execSQL(deleteqa_inbox);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }


    public Long InsertUserObservation_Possible(List<UserObservationpossible> reaisons) {

        Long idInsert = -1L;
        for (int i = 0; i < reaisons.size(); i++) {
            SQLiteDatabase db = this.getReadableDatabase();


            try {

                ContentValues contentValues = new ContentValues();
                contentValues.put("Description", reaisons.get(i).getDescription());
                contentValues.put("Code", reaisons.get(i).getCode());
                idInsert = db.insert("qa_possibleuserobservation", null, contentValues);


            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                if (db != null)
                    db.close();
            }
        }
        return idInsert;
    }

    public Long InsertUserObservation_PossibleColor(List<UserObservationpossible> reaisons) {

        Long idInsert = -1L;
        for (int i = 0; i < reaisons.size(); i++) {
            SQLiteDatabase db = this.getReadableDatabase();


            try {

                ContentValues contentValues = new ContentValues();
                contentValues.put("Description", reaisons.get(i).getDescription());
                contentValues.put("Code", reaisons.get(i).getCode());
                idInsert = db.insert("qa_possibleuserobservation_productcolor", null, contentValues);


            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                if (db != null)
                    db.close();
            }
        }
        return idInsert;
    }

    public Long InsertUserObservation_PossibleReasons(List<UserObservationpossible> reaisons) {

        Long idInsert = -1L;
        for (int i = 0; i < reaisons.size(); i++) {
            SQLiteDatabase db = this.getReadableDatabase();


            try {

                ContentValues contentValues = new ContentValues();
                contentValues.put("Description", reaisons.get(i).getDescription());
                contentValues.put("Code", reaisons.get(i).getCode());
                idInsert = db.insert("qa_possibleuserobservation_reasons", null, contentValues);


            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                if (db != null)
                    db.close();
            }
        }
        return idInsert;
    }


    public List<UserObservationpossible> GetUserObservation_Possible() {

        Cursor res = null;
        List<UserObservationpossible> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<UserObservationpossible>();
            list.add(new UserObservationpossible("Select user observation", "-1"));
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from qa_possibleuserobservation", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                UserObservationpossible maDoctype = new UserObservationpossible();
                maDoctype.setDescription(res.getString(res.getColumnIndex("Description")));
                maDoctype.setCode(res.getString(res.getColumnIndex("Code")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<UserObservationpossible> GetUserObservation_PossibleColor() {

        Cursor res = null;
        List<UserObservationpossible> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<UserObservationpossible>();
            list.add(new UserObservationpossible("Select Color", "-1"));
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from qa_possibleuserobservation_productcolor", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                UserObservationpossible maDoctype = new UserObservationpossible();
                maDoctype.setDescription(res.getString(res.getColumnIndex("Description")));
                maDoctype.setCode(res.getString(res.getColumnIndex("Code")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<UserObservationpossible> GetUserObservation_PossibleReasons() {

        Cursor res = null;
        List<UserObservationpossible> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<UserObservationpossible>();
            list.add(new UserObservationpossible("Select Reason", "-1"));
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from qa_possibleuserobservation_reasons", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                UserObservationpossible maDoctype = new UserObservationpossible();
                maDoctype.setDescription(res.getString(res.getColumnIndex("Description")));
                maDoctype.setCode(res.getString(res.getColumnIndex("Code")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public boolean UpdateUserObservation(String planid, String fueltype, String checkbox, String color, String gravity, String obs, String reason, String remarks) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();
            data.put("ReconStatus", checkbox);
            data.put("ProductColor", color);
            data.put("SpecificGravity", gravity);
            data.put("UserObservation", obs);
            data.put("Reasion", reason);
            data.put("Remarks", remarks);

            res = db.update("UserObservation", data, "plan_id= '" + planid.trim() + "' AND FuelType= '" + fueltype.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }


    //endregion

    //region LabTest


    //TODO: LAB MANAGER

    public Long insert_into_Labtest_Managers(String autoDocNo, String reuestid, ManagerList managerList) {
        Long idInsert = -1L;

        SQLiteDatabase db = this.getReadableDatabase();
//        String deletelabtest_labtest_managers = "DELETE FROM labtest_managers";
//        db.execSQL(deletelabtest_labtest_managers);

        try {

            ContentValues contentValues = new ContentValues();

            contentValues.put("AutoDocNo", autoDocNo);
            contentValues.put("RequestNo", reuestid);
            contentValues.put("QualityInchargeName", managerList.getQualityInchargeName());
            contentValues.put("VanCode", managerList.getVanCode());
            contentValues.put("VanDesc", managerList.getVanDesc());
            contentValues.put("QualityInchargeCode", managerList.getQualityInchargeCode());


            idInsert = db.insert("labtest_managers", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<ManagerList> Get_LabTest_Managers(String AutoDocNo) {

        Cursor res = null;
        List<ManagerList> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<ManagerList>();
            ManagerList maDoctype1 = new ManagerList();
            maDoctype1.setQualityInchargeName("Select the Employeee");
            maDoctype1.setVanCode("");
            maDoctype1.setVanDesc("");
            maDoctype1.setQualityInchargeCode("-1");

            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_managers where AutoDocNo= '" + AutoDocNo.trim() + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                ManagerList maDoctype = new ManagerList();
                maDoctype.setQualityInchargeName(res.getString(res.getColumnIndex("QualityInchargeName")));
                maDoctype.setVanCode(res.getString(res.getColumnIndex("VanCode")));
                maDoctype.setVanDesc(res.getString(res.getColumnIndex("VanDesc")));
                maDoctype.setQualityInchargeCode(res.getString(res.getColumnIndex("QualityInchargeCode")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    //TODO: LAB TEST REQUEST
    public Long insert_into_Labtest_Request(String AutoDocNo, String requestid, ModelLabTestInner modelLabTestInner) {
        Long idInsert = -1L;

        if (isLabTestAutoDocNoExist(modelLabTestInner.getAutoDocNo()) > 0) {
            delLabTestByAutoDocNo(modelLabTestInner.getAutoDocNo());
        }

        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("FormNo", modelLabTestInner.getFormNo());
            contentValues.put("ReleaseNo", modelLabTestInner.getReleaseNo());
            contentValues.put("TestReportDate", modelLabTestInner.getTestReportDate());
            contentValues.put("ReportNo", modelLabTestInner.getReportNo());
            contentValues.put("AutoDocNo", modelLabTestInner.getAutoDocNo());
            contentValues.put("RequestNo", modelLabTestInner.getRequestNo());
            contentValues.put("RequestDate", modelLabTestInner.getRequestDate());
            contentValues.put("RequestDetail", modelLabTestInner.getRequestInfo().getRequestDetail());
            contentValues.put("TankDesc", modelLabTestInner.getTankDesc());
            contentValues.put("OldTestReportNo", modelLabTestInner.getOldTestReportNo());
            contentValues.put("TankCode", modelLabTestInner.getTankCode());
            contentValues.put("RequesterRemarks", modelLabTestInner.getRequesterRemarks());
            contentValues.put("SupplyPointDesc", modelLabTestInner.getSupplyPointDesc());
            contentValues.put("VanTCPNo", modelLabTestInner.getVanTCPNo());
            contentValues.put("LabType", modelLabTestInner.getLabType());
            contentValues.put("ManageLabDesc", modelLabTestInner.getManageLabDesc());
            contentValues.put("SupplyPointCode", modelLabTestInner.getSupplyPointCode());
            contentValues.put("PerformedLabCode", modelLabTestInner.getPerformedLabCode());
            contentValues.put("DepartmentCode", modelLabTestInner.getDepartmentCode());
            contentValues.put("PerformedLabDesc", modelLabTestInner.getPerformedLabDesc());
            contentValues.put("DesignationDesc", modelLabTestInner.getDesignationDesc());
            contentValues.put("ManageLabCode", modelLabTestInner.getManageLabCode());
            contentValues.put("DesignationCode", modelLabTestInner.getDesignationCode());
            contentValues.put("RequestedBy", modelLabTestInner.getRequestedBy());
            contentValues.put("RequestNo", modelLabTestInner.getRequestNo());
            contentValues.put("VanTCPDate", modelLabTestInner.getVanTCPDate());
            contentValues.put("TestType", modelLabTestInner.getTestType());
            contentValues.put("DepartmentDesc", modelLabTestInner.getDepartmentDesc());
            contentValues.put("InvoiceUrl", modelLabTestInner.getInvoiceUrl());

            contentValues.put("LabSelectionVisible", modelLabTestInner.getLabSelectionVisible());
            contentValues.put("LabSelectionEnable", modelLabTestInner.getLabSelectionEnable());
            contentValues.put("LabInchargeRemarksVisible", modelLabTestInner.getLabInchargeRemarksVisible());
            contentValues.put("LabInchargeRemarksEnable", modelLabTestInner.getLabInchargeRemarksEnable());
            contentValues.put("SampleCollectionReq", modelLabTestInner.getSampleCollectionReq());
            contentValues.put("TestSelectionQAVisible", modelLabTestInner.getTestSelectionQAVisible());
            contentValues.put("TestSelectionLabInchVisible", modelLabTestInner.getTestSelectionLabInchVisible());
            contentValues.put("ChargeToVisible", modelLabTestInner.getChargeToVisible());
            contentValues.put("AdvanceRequiredVisible", modelLabTestInner.getAdvanceRequiredVisible());
            contentValues.put("AdvanceRequiredEnable", modelLabTestInner.getAdvanceRequiredEnable());
            contentValues.put("AdvanceApprovalVisible", modelLabTestInner.getAdvanceApprovalVisible());
            contentValues.put("AdvanceApprovalEnable", modelLabTestInner.getAdvanceAprovalEnable());
            contentValues.put("AdvanceConfirmationVisible", modelLabTestInner.getAdvanceConfirmationVisible());
            contentValues.put("AdvanceConfirmationEnable", modelLabTestInner.getAdvanceConfirmationEnable());
            contentValues.put("ChemistSelectionVisible", modelLabTestInner.getChemistSelectionVisible());
            contentValues.put("ChemistSelectionEnable", modelLabTestInner.getChemistSelectionEnable());
            contentValues.put("TestPerformVisible", modelLabTestInner.getTestPerformVisible());

            contentValues.put("SampleCollectorVisible", modelLabTestInner.getSampleCollectorVisible());
            contentValues.put("SampleCollectorEnable", modelLabTestInner.getSampleCollectorEnable());
            contentValues.put("MenuCollectSampleVisible", modelLabTestInner.getMenuCollectSampleVisible());
            contentValues.put("MenuCollectSampleEnable", modelLabTestInner.getMenuCollectSampleEnable());
            contentValues.put("MenuReceiveSampleVisible", modelLabTestInner.getMenuReceiveSampleVisible());
            contentValues.put("MenuReceiveSampleEnable", modelLabTestInner.getMenuReceiveSampleEnable());
            contentValues.put("MenuInvoiceVisible", modelLabTestInner.getTestPerformVisible());
            contentValues.put("MenuRetainSampleVisible", modelLabTestInner.getMenuRetainSampleVisible());
            contentValues.put("MenuRetainSampleEnable", modelLabTestInner.getMenuRetainSampleEnable());
            contentValues.put("MenuDrainSampleVisible", modelLabTestInner.getMenuDrainSampleVisible());
            contentValues.put("MenuDrainSampleEnable", modelLabTestInner.getMenuDrainSampleEnable());


            //TODO: Please code for enable and disable as well

            idInsert = db.insert("labtest_request", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public int isLabTestAutoDocNoExist(String AutoDocNo) {
        Cursor res = null;
        List<ModelLabTestInner> list = null;
        SQLiteDatabase db = null;
        int result = -1;
        try {
            list = new ArrayList<ModelLabTestInner>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select AutoDocNo from labtest_request WHERE AutoDocNo = '" + AutoDocNo.trim() + "'", null);
            res.moveToFirst();
            while (!res.isAfterLast()) {
                result = 1;
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return result;

    }

    public int delLabTestByAutoDocNo(String AutoDocNo) {
        Cursor res = null;
        List<ModelLabTestInner> list = null;
        SQLiteDatabase db = null;
        int result = -1;
        try {
            deletefrominbox(AutoDocNo);
            list = new ArrayList<ModelLabTestInner>();
            db = this.getReadableDatabase();

            db.execSQL("DELETE from labtest_request WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from labtest_chemistlist WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from labtest_qainchargeSection WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from labtest_ChargeTo WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from labtest_AdvanceRequest WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from labtest_advanceaproval WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from labtest_Advanceaproval_intimate WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from labtest_AdvanceConfirmation WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from labtest_ProductList WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from labtest_SampleList WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from labtest_selected_chemist WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from labtest_SampleAttachmentsList WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from labtest_LabInchargeAssignment WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from labtest_LabInchargeAssignment_intimate WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from labtest_TestList_sample WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from labtest_MethodList_sample WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from labtest_TestList WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from labtest_product_reasons WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from labtest_sample_reasons WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from labtest_sample_remarks WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from labtest_MethodList WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from labtest_LabInchargeSection WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from LTTank WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from LTParcel WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from LTSample WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from LTTankLorrySTN WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from LTTankLorrySaleInv WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from LTTLOMC WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            db.execSQL("DELETE from LTCustomerSample WHERE AutoDocNo = '" + AutoDocNo.trim() + "'");
            result = 1;


        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return result;

    }


    public int delAllLabTests() {
        Cursor res = null;
        List<ModelLabTestInner> list = null;
        SQLiteDatabase db = null;
        int result = -1;
        try {
            list = new ArrayList<ModelLabTestInner>();
            db = this.getReadableDatabase();
            db.execSQL("DELETE from labtest_request");
            db.execSQL("DELETE from labtest_chemistlist");
            db.execSQL("DELETE from labtest_qainchargeSection");
            db.execSQL("DELETE from labtest_ChargeTo ");
            db.execSQL("DELETE from labtest_AdvanceRequest");
            db.execSQL("DELETE from labtest_advanceaproval ");
            db.execSQL("DELETE from labtest_Advanceaproval_intimate ");
            db.execSQL("DELETE from labtest_AdvanceConfirmation ");
            db.execSQL("DELETE from labtest_ProductList");
            db.execSQL("DELETE from labtest_SampleList");
            db.execSQL("DELETE from labtest_selected_chemist");
            db.execSQL("DELETE from labtest_SampleAttachmentsList");
            db.execSQL("DELETE from labtest_LabInchargeAssignment ");
            db.execSQL("DELETE from labtest_LabInchargeAssignment_intimate");
            db.execSQL("DELETE from labtest_TestList_sample");
            db.execSQL("DELETE from labtest_MethodList_sample");
            db.execSQL("DELETE from labtest_TestList");
            db.execSQL("DELETE from labtest_MethodList");
            db.execSQL("DELETE from labtest_LabInchargeSection ");
            db.execSQL("DELETE from LTTank");
            db.execSQL("DELETE from LTParcel");
            db.execSQL("DELETE from LTSample ");
            db.execSQL("DELETE from LTTankLorrySTN");
            db.execSQL("DELETE from LTTankLorrySaleInv");
            db.execSQL("DELETE from LTTLOMC ");
            db.execSQL("DELETE from LTCustomerSample");
            result = 1;


        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return result;

    }


    public List<ModelLabTestInner> Get_LabTest_Request(String AutoDocNo) {

        Cursor res = null;
        List<ModelLabTestInner> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<ModelLabTestInner>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_request WHERE AutoDocNo = '" + AutoDocNo.trim() + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                ModelLabTestInner maDoctype = new ModelLabTestInner();
                maDoctype.setFormNo(res.getString(res.getColumnIndex("FormNo")));
                maDoctype.setReleaseNo(res.getString(res.getColumnIndex("ReleaseNo")));
                maDoctype.setTestReportDate(res.getString(res.getColumnIndex("TestReportDate")));
                maDoctype.setReportNo(res.getString(res.getColumnIndex("ReportNo")));
                maDoctype.setRequestDate(res.getString(res.getColumnIndex("RequestDate")));
                maDoctype.setRequestDetail(res.getString(res.getColumnIndex("RequestDetail")));
                maDoctype.setTankDesc(res.getString(res.getColumnIndex("TankDesc")));
                maDoctype.setOldTestReportNo(res.getString(res.getColumnIndex("OldTestReportNo")));
                maDoctype.setTankCode(res.getString(res.getColumnIndex("TankCode")));
                maDoctype.setRequesterRemarks(res.getString(res.getColumnIndex("RequesterRemarks")));
                maDoctype.setSupplyPointDesc(res.getString(res.getColumnIndex("SupplyPointDesc")));
                maDoctype.setVanTCPNo(res.getString(res.getColumnIndex("VanTCPNo")));
                maDoctype.setLabType(res.getString(res.getColumnIndex("LabType")));
                maDoctype.setManageLabDesc(res.getString(res.getColumnIndex("ManageLabDesc")));
                maDoctype.setSupplyPointCode(res.getString(res.getColumnIndex("SupplyPointCode")));
                maDoctype.setPerformedLabCode(res.getString(res.getColumnIndex("PerformedLabCode")));
                maDoctype.setDepartmentCode(res.getString(res.getColumnIndex("DepartmentCode")));
                maDoctype.setDepartmentDesc(res.getString(res.getColumnIndex("DepartmentDesc")));
                maDoctype.setInvoiceUrl(res.getString(res.getColumnIndex("InvoiceUrl")));

                maDoctype.setPerformedLabDesc(res.getString(res.getColumnIndex("PerformedLabDesc")));
                maDoctype.setDesignationDesc(res.getString(res.getColumnIndex("DesignationDesc")));
                maDoctype.setDesignationCode(res.getString(res.getColumnIndex("DesignationCode")));
                maDoctype.setRequestedBy(res.getString(res.getColumnIndex("RequestedBy")));
                maDoctype.setRequestNo(res.getString(res.getColumnIndex("RequestNo")));
                maDoctype.setVanTCPDate(res.getString(res.getColumnIndex("VanTCPDate")));
                maDoctype.setTestType(res.getString(res.getColumnIndex("TestType")));

                maDoctype.setLabSelectionVisible(res.getString(res.getColumnIndex("LabSelectionVisible")));
                maDoctype.setLabSelectionEnable(res.getString(res.getColumnIndex("LabSelectionEnable")));
                maDoctype.setLabInchargeRemarksVisible(res.getString(res.getColumnIndex("LabInchargeRemarksVisible")));
                maDoctype.setLabInchargeRemarksEnable(res.getString(res.getColumnIndex("LabInchargeRemarksEnable")));
                maDoctype.setSampleCollectionReq(res.getString(res.getColumnIndex("SampleCollectionReq")));
                maDoctype.setTestSelectionQAVisible(res.getString(res.getColumnIndex("TestSelectionQAVisible")));
                maDoctype.setTestSelectionLabInchVisible(res.getString(res.getColumnIndex("TestSelectionLabInchVisible")));
                maDoctype.setChargeToVisible(res.getString(res.getColumnIndex("ChargeToVisible")));
                maDoctype.setAdvanceRequiredVisible(res.getString(res.getColumnIndex("AdvanceRequiredVisible")));
                maDoctype.setAdvanceRequiredEnable(res.getString(res.getColumnIndex("AdvanceRequiredEnable")));

                maDoctype.setAdvanceApprovalVisible(res.getString(res.getColumnIndex("AdvanceApprovalVisible")));
                maDoctype.setAdvanceApprovalEnable(res.getString(res.getColumnIndex("AdvanceApprovalEnable")));

                maDoctype.setAdvanceConfirmationVisible(res.getString(res.getColumnIndex("AdvanceConfirmationVisible")));
                maDoctype.setAdvanceConfirmationEnable(res.getString(res.getColumnIndex("AdvanceConfirmationEnable")));

                maDoctype.setChemistSelectionEnable(res.getString(res.getColumnIndex("ChemistSelectionEnable")));
                maDoctype.setChemistSelectionVisible(res.getString(res.getColumnIndex("ChemistSelectionVisible")));
                maDoctype.setTestPerformVisible(res.getString(res.getColumnIndex("TestPerformVisible")));
                maDoctype.setSampleCollectorVisible(res.getString(res.getColumnIndex("SampleCollectorVisible")));
                maDoctype.setSampleCollectorEnable(res.getString(res.getColumnIndex("SampleCollectorEnable")));
                maDoctype.setMenuCollectSampleVisible(res.getString(res.getColumnIndex("MenuCollectSampleVisible")));
                maDoctype.setMenuCollectSampleEnable(res.getString(res.getColumnIndex("MenuCollectSampleEnable")));
                maDoctype.setMenuReceiveSampleVisible(res.getString(res.getColumnIndex("MenuReceiveSampleVisible")));
                maDoctype.setMenuReceiveSampleEnable(res.getString(res.getColumnIndex("MenuReceiveSampleEnable")));
                maDoctype.setMenuInvoiceVisible(res.getString(res.getColumnIndex("MenuInvoiceVisible")));
                maDoctype.setMenuRetainSampleVisible(res.getString(res.getColumnIndex("MenuRetainSampleVisible")));
                maDoctype.setMenuRetainSampleEnable(res.getString(res.getColumnIndex("MenuRetainSampleEnable")));
                maDoctype.setMenuDrainSampleVisible(res.getString(res.getColumnIndex("MenuDrainSampleVisible")));
                maDoctype.setMenuDrainSampleEnable(res.getString(res.getColumnIndex("MenuDrainSampleEnable")));


                maDoctype.setChemistListLabTestList(Get_LabTest_Chemist(AutoDocNo));
                maDoctype.setQaInchargeSectionLabTestList(Get_LabTest_QaInchargeSection(AutoDocNo));
                maDoctype.setAdvanceConfirmationLabTestList(Get_LabTest_AdvanceConformation(AutoDocNo));
                maDoctype.setAdvanceRequestLabTestList(Get_LabTest_AdvanceRequest(AutoDocNo));
                maDoctype.setProductListLabTestList(Get_LabTest_ProductList(AutoDocNo));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }


    //TODO: LAB TEST CHEMIST

    public Long insert_into_Labtest_ChemistList(String AutoDocNo, String requestid, ChemistListLabTest chemistListLabTest) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();


            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("RequestNo", requestid);
            contentValues.put("IsSelected", chemistListLabTest.getIsSelected());
            contentValues.put("EmpName", chemistListLabTest.getEmpName());
            contentValues.put("EmpCode", chemistListLabTest.getEmpCode());


            idInsert = db.insert("labtest_chemistlist", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<ChemistListLabTest> Get_LabTest_Chemist(String AutoDocNo) {

        Cursor res = null;
        List<ChemistListLabTest> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<ChemistListLabTest>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_chemistlist where AutoDocNo= '" + AutoDocNo.trim() + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                ChemistListLabTest maDoctype = new ChemistListLabTest();
                maDoctype.setIsSelected(res.getString(res.getColumnIndex("IsSelected")));
                maDoctype.setEmpName(res.getString(res.getColumnIndex("EmpName")));
                maDoctype.setEmpCode(res.getString(res.getColumnIndex("EmpCode")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }


    //TODO: LAB TEST QA INCHARGE SECTION

    public Long insert_into_Labtest_QAInchargeSection(String AutoDocNo, String requestid, QaInchargeSectionLabTest qaInchargeSectionLabTest) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();

            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("RequestNo", requestid);
            contentValues.put("DesignationDesc", qaInchargeSectionLabTest.getDesignationDesc());
            contentValues.put("ShowHide", qaInchargeSectionLabTest.getShowHide());
            contentValues.put("ManagingLabDesc", qaInchargeSectionLabTest.getManagingLabDesc());
            contentValues.put("DesignationCode", qaInchargeSectionLabTest.getDesignationCode());
            contentValues.put("DesignationDesc", qaInchargeSectionLabTest.getDesignationDesc());
            contentValues.put("EnableDisable", qaInchargeSectionLabTest.getEnableDisable());
            contentValues.put("TestingLabDesc", qaInchargeSectionLabTest.getTestingLabDesc());
            contentValues.put("ManagingLabCode", qaInchargeSectionLabTest.getManagingLabCode());
            contentValues.put("TestingLabCode", qaInchargeSectionLabTest.getTestingLabCode());


            idInsert = db.insert("labtest_qainchargeSection", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<QaInchargeSectionLabTest> Get_LabTest_QaInchargeSection(String AutoDocNo) {

        Cursor res = null;
        List<QaInchargeSectionLabTest> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<QaInchargeSectionLabTest>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_qainchargeSection where AutoDocNo= '" + AutoDocNo.trim() + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                QaInchargeSectionLabTest maDoctype = new QaInchargeSectionLabTest();
                maDoctype.setDesignationDesc(res.getString(res.getColumnIndex("DesignationDesc")));
                maDoctype.setShowHide(res.getString(res.getColumnIndex("ShowHide")));
                maDoctype.setManagingLabDesc(res.getString(res.getColumnIndex("ManagingLabDesc")));
                maDoctype.setDesignationCode(res.getString(res.getColumnIndex("DesignationCode")));
                maDoctype.setEnableDisable(res.getString(res.getColumnIndex("EnableDisable")));
                maDoctype.setDesignationDesc(res.getString(res.getColumnIndex("DesignationDesc")));
                maDoctype.setTestingLabDesc(res.getString(res.getColumnIndex("TestingLabDesc")));
                maDoctype.setManagingLabCode(res.getString(res.getColumnIndex("ManagingLabCode")));
                maDoctype.setTestingLabCode(res.getString(res.getColumnIndex("TestingLabCode")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }


    public boolean UpdateLabTest_QAInchargeSection_Manageing_Lab(String AutoDocNo, String valcode, String des) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("ManagingLabCode", valcode);
            data.put("ManagingLabDesc", des);
            res = db.update("labtest_qainchargeSection", data, "AutoDocNo= '" + AutoDocNo.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public boolean UpdateLabTest_QAInchargeSection_Testing_Lab(String AutoDocNo, String valcode, String des) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("TestingLabCode", valcode);
            data.put("TestingLabDesc", des);
            res = db.update("labtest_qainchargeSection", data, "AutoDocNo= '" + AutoDocNo.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }


    //TODO: LAB CHARGE TO

    public Long insert_into_Labtest_ChargeTo(String AutoDocNo, String requestid, ChargeToLAbTest chargeToLAbTest) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();

            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("RequestNo", requestid);
            contentValues.put("Requester", chargeToLAbTest.getRequester());
            contentValues.put("Finance", chargeToLAbTest.getFinance());
            contentValues.put("SalesPerson", chargeToLAbTest.getSalesPerson());
            contentValues.put("LogisticAtSite", chargeToLAbTest.getLogisticAtSite());
            contentValues.put("LogisticAtHeadOffice", chargeToLAbTest.getLogisticAtHeadOffice());


            idInsert = db.insert("labtest_ChargeTo", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }


    public boolean UpdateLabTest_Test_ChargeToo_Requestor(String AutoDocNo, String ProductCode, String SampleId, String val) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("Requester", val);
            res = db.update("labtest_ChargeTo", data, "AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode= '" + ProductCode.trim() + "' AND SampleId= '" + SampleId.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public boolean UpdateLabTest_Test_ChargeToo_LogisticSite(String AutoDocNo, String ProductCode, String SampleId, String val) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("LogisticAtSite", val);
            res = db.update("labtest_ChargeTo", data, "AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode= '" + ProductCode.trim() + "' AND SampleId= '" + SampleId.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public boolean UpdateLabTest_Test_ChargeToo_LogistcHead(String AutoDocNo, String ProductCode, String SampleId, String val) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("LogisticAtHeadOffice", val);
            res = db.update("labtest_ChargeTo", data, "AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode= '" + ProductCode.trim() + "' AND SampleId= '" + SampleId.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public boolean UpdateLabTest_Test_ChargeToo_SalesPerson(String AutoDocNo, String ProductCode, String SampleId, String val) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("SalesPerson", val);
            res = db.update("labtest_ChargeTo", data, "AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode= '" + ProductCode.trim() + "' AND SampleId= '" + SampleId.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public boolean UpdateLabTest_Test_ChargeToo_Finance(String AutoDocNo, String ProductCode, String SampleId, String val) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("Finance", val);
            res = db.update("labtest_ChargeTo", data, "AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode= '" + ProductCode.trim() + "' AND SampleId= '" + SampleId.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }


    //TODO: LAB ADVANCE REQUEST

    public Long insert_into_Labtest_AdvanceRequest(String AutoDocNo, String requestid, AdvanceRequestLabTest advanceRequestLabTest) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();

            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("RequestNo", requestid);
            contentValues.put("AdvanceAmount", advanceRequestLabTest.getAdvanceAmount());
            contentValues.put("AdvanceRequired", advanceRequestLabTest.getAdvanceRequired());
            contentValues.put("Remarks", advanceRequestLabTest.getRemarks());
            contentValues.put("AdvanceApprovalFromCode", advanceRequestLabTest.getAdvanceApprovalFromCode());
            contentValues.put("AdvanceApprovalFrom", advanceRequestLabTest.getAdvanceApprovalFrom());


            idInsert = db.insert("labtest_AdvanceRequest", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<AdvanceRequestLabTest> Get_LabTest_AdvanceRequest(String AutoDocNo) {

        Cursor res = null;
        List<AdvanceRequestLabTest> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<AdvanceRequestLabTest>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_AdvanceRequest where AutoDocNo= '" + AutoDocNo.trim() + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                AdvanceRequestLabTest maDoctype = new AdvanceRequestLabTest();
                maDoctype.setAdvanceAmount(res.getString(res.getColumnIndex("AdvanceAmount")));
                maDoctype.setAdvanceRequired(res.getString(res.getColumnIndex("AdvanceRequired")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setAdvanceApprovalFrom(res.getString(res.getColumnIndex("AdvanceApprovalFrom")));
                maDoctype.setAdvanceApprovalFromCode(res.getString(res.getColumnIndex("AdvanceApprovalFromCode")));
                maDoctype.setIntimation(Get_LabTest_AdvanceRequestIntimate(AutoDocNo));
                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }


    public boolean UpdateLabTest_Test_LabInchargeSection(String AutoDocNo, String remarks) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("Remarks", remarks);
            res = db.update("labtest_AdvanceRequest", data, "AutoDocNo= '" + AutoDocNo.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public boolean UpdateLabTest_Test_AdvanceRequestAdvanceAmount(String AutoDocNo, String AdvanceAmount) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("AdvanceAmount", AdvanceAmount);
            res = db.update("labtest_AdvanceRequest", data, "AutoDocNo= '" + AutoDocNo.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public boolean UpdateLabTest_Test_LabInchargeSectionAdvanceApprovalFrom(String AutoDocNo, String name) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("AdvanceApprovalFrom", name);
            res = db.update("labtest_AdvanceRequest", data, "AutoDocNo= '" + AutoDocNo.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    //TODO: LAB ADVANCE CONFORMATION INTIMATION


    public Long insert_into_Labtest_AdvanceConformation_INTIMATE(String requestid, Intimation intimation) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();


            contentValues.put("RequestNo", requestid);

            contentValues.put("empCode", intimation.getEmpCode());
            contentValues.put("Designation", intimation.getDesignation());
            contentValues.put("EmployeeName", intimation.getEmployeeName());

            idInsert = db.insert("labtest_AdvanceConfirmation_intimate", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<Intimation> Get_LabTest_AdvanceConformationIntimate(String AutoDocNo) {

        Cursor res = null;
        List<Intimation> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<Intimation>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_AdvanceConfirmation_intimate where AutoDocNo= '" + AutoDocNo.trim() + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                Intimation maDoctype = new Intimation();
                maDoctype.setEmpCode(res.getString(res.getColumnIndex("empCode")));
                maDoctype.setDesignation(res.getString(res.getColumnIndex("Designation")));
                maDoctype.setEmployeeName(res.getString(res.getColumnIndex("EmployeeName")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }


    //TODO: LAB ADVANCE APPROVAL INTIMATION


    public Long insert_into_Labtest_AdvanceApproval_INTIMATE(String requestid, Intimation intimation) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();


            contentValues.put("RequestNo", requestid);

            contentValues.put("empCode", intimation.getEmpCode());
            contentValues.put("Designation", intimation.getDesignation());
            contentValues.put("EmployeeName", intimation.getEmployeeName());

            idInsert = db.insert("labtest_Advanceaproval_intimate", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<Intimation> Get_LabTest_AdvanceApprovalIntimate(String AutoDocNo) {

        Cursor res = null;
        List<Intimation> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<Intimation>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_Advanceaproval_intimate where AutoDocNo= '" + AutoDocNo.trim() + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                Intimation maDoctype = new Intimation();
                maDoctype.setEmpCode(res.getString(res.getColumnIndex("empCode")));
                maDoctype.setDesignation(res.getString(res.getColumnIndex("Designation")));
                maDoctype.setEmployeeName(res.getString(res.getColumnIndex("EmployeeName")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    //TODO: LAB ADVANCE REQUEST INTIMATION


    public Long insert_into_Labtest_AdvanceRequest_INTIMATE(String requestid, Intimation intimation) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();


            contentValues.put("RequestNo", requestid);

            contentValues.put("empCode", intimation.getEmpCode());
            contentValues.put("Designation", intimation.getDesignation());
            contentValues.put("EmployeeName", intimation.getEmployeeName());

            idInsert = db.insert("labtest_AdvanceRequest_intimate", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<Intimation> Get_LabTest_AdvanceRequestIntimate(String AutoDocNo) {

        Cursor res = null;
        List<Intimation> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<Intimation>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_AdvanceRequest_intimate where AutoDocNo= '" + AutoDocNo.trim() + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                Intimation maDoctype = new Intimation();
                maDoctype.setEmpCode(res.getString(res.getColumnIndex("empCode")));
                maDoctype.setDesignation(res.getString(res.getColumnIndex("Designation")));
                maDoctype.setEmployeeName(res.getString(res.getColumnIndex("EmployeeName")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }


    //TODO: LAB ADVANCE CONFORMATION

    public Long insert_into_Labtest_AdvanceConfromationRequest(String AutoDocNo, String requestid, AdvanceConfirmationLabTest advanceConfirmationLabTest) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();

            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("RequestNo", requestid);
            contentValues.put("Remarks", advanceConfirmationLabTest.getRemarks());
            contentValues.put("AdvanceArrangementStatus", advanceConfirmationLabTest.getAdvanceArrangementStatus());


            idInsert = db.insert("labtest_AdvanceConfirmation", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<AdvanceConfirmationLabTest> Get_LabTest_AdvanceConformation(String AutoDocNo) {

        Cursor res = null;
        List<AdvanceConfirmationLabTest> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<AdvanceConfirmationLabTest>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_AdvanceConfirmation where AutoDocNo= '" + AutoDocNo.trim() + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                AdvanceConfirmationLabTest maDoctype = new AdvanceConfirmationLabTest();
                maDoctype.setAdvanceArrangementStatus(res.getString(res.getColumnIndex("AdvanceArrangementStatus")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setIntimation(Get_LabTest_AdvanceConformationIntimate(AutoDocNo));
                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public boolean UpdateLabTest_Test_AdavceConfromationStatus(String AutoDocNo, String status) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("AdvanceArrangementStatus", status);
            res = db.update("labtest_AdvanceConfirmation", data, "AutoDocNo= '" + AutoDocNo.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }


    public boolean UpdateLabTest_Test_AdavceConfromation(String AutoDocNo, String remarks) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("Remarks", remarks);
            res = db.update("labtest_AdvanceConfirmation", data, "AutoDocNo= '" + AutoDocNo.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }


    //TODO: LAB ADVANCE APPROVAL

    public Long insert_into_Labtest_AdvanceApproval(String AutoDocNo, String requestid, AdvanceAproval advanceAproval) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();

            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("RequestNo", requestid);
            contentValues.put("AdvanceStatus", advanceAproval.getAdvanceStatus());
            contentValues.put("Remarks", advanceAproval.getRemarks());


            idInsert = db.insert("labtest_advanceaproval", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public boolean UpdateLabTest_Test_LabInchargeSection_AdvenceApprovalStatusCheckbox(String AutoDocNo, String status) {

        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("AdvanceStatus", status);
            res = db.update("labtest_advanceaproval", data, "AutoDocNo= '" + AutoDocNo.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public boolean UpdateLabTest_Test_labtest_advanceaprovalRemarks(String AutoDocNo, String remarks) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("Remarks", remarks);
            res = db.update("labtest_advanceaproval", data, "AutoDocNo= '" + AutoDocNo.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }


    public List<AdvanceAproval> Get_LabTest_AdvanceApproval(String AutoDocNo) {

        Cursor res = null;
        List<AdvanceAproval> list = null;
        boolean flag = false;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<AdvanceAproval>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_advanceaproval where AutoDocNo= '" + AutoDocNo.trim() + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                AdvanceAproval maDoctype = new AdvanceAproval();
                maDoctype.setAdvanceStatus(res.getString(res.getColumnIndex("AdvanceStatus")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setIntimation(Get_LabTest_AdvanceApprovalIntimate(AutoDocNo));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }


    //TODO: LAB PRODUCT LIST

    public Long insert_into_Labtest_ProductList(String AutoDocNo, String requestid, ProductListLabTest productListLabTest) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();


            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("RequestNo", requestid);
            contentValues.put("ProductCode", productListLabTest.getProductCode());
            contentValues.put("ProductDesc", productListLabTest.getProductDesc());
            contentValues.put("TransNo", productListLabTest.getTransNo());
            contentValues.put("CurrentActor", productListLabTest.getCurrentActor());


            idInsert = db.insert("labtest_ProductList", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<ProductListLabTest> Get_LabTest_ProductList(String AutoDocNo) {

        Cursor res = null;
        List<ProductListLabTest> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<ProductListLabTest>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_ProductList where AutoDocNo= '" + AutoDocNo.trim() + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                ProductListLabTest maDoctype = new ProductListLabTest();
                maDoctype.setTestListList(Get_LabTest_TestList(AutoDocNo, res.getString(res.getColumnIndex("ProductCode"))));
                maDoctype.setLabInchargeSectionList(Get_LabTest_LabInchargeSection(AutoDocNo, res.getString(res.getColumnIndex("ProductCode"))));
                maDoctype.setSampleListList(Get_LabTest_SampleList(AutoDocNo, res.getString(res.getColumnIndex("ProductCode"))));
                maDoctype.setProductCode(res.getString(res.getColumnIndex("ProductCode")));
                maDoctype.setProductDesc(res.getString(res.getColumnIndex("ProductDesc")));
                maDoctype.setTransNo(res.getString(res.getColumnIndex("TransNo")));
                maDoctype.setCurrentActor(res.getString(res.getColumnIndex("CurrentActor")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<ProductListLabTest> Get_LabTest_ProductData(String AutoDocNo, String ProductCode) {

        Cursor res = null;
        List<ProductListLabTest> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<ProductListLabTest>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_ProductList where AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode = '" + ProductCode.trim() + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                ProductListLabTest maDoctype = new ProductListLabTest();
                maDoctype.setTestListList(Get_LabTest_TestList(AutoDocNo, res.getString(res.getColumnIndex("ProductCode"))));
                maDoctype.setLabInchargeSectionList(Get_LabTest_LabInchargeSection(AutoDocNo, res.getString(res.getColumnIndex("ProductCode"))));
                maDoctype.setSampleListList(Get_LabTest_SampleList(AutoDocNo, res.getString(res.getColumnIndex("ProductCode"))));
                maDoctype.setProductCode(res.getString(res.getColumnIndex("ProductCode")));
                maDoctype.setProductDesc(res.getString(res.getColumnIndex("ProductDesc")));
                maDoctype.setTransNo(res.getString(res.getColumnIndex("TransNo")));
                maDoctype.setCurrentActor(res.getString(res.getColumnIndex("CurrentActor")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    //TODO: LAB INCHARGE SECTION


    public Long insert_into_Labtest_LabInchargeSection(String AutoDocNo, String requestid, String productcode, LabInchargeSection labInchargeSection) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();

            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("RequestNo", requestid);
            contentValues.put("ProductCode", productcode);
            contentValues.put("LabInchargeName", labInchargeSection.getLabInchargeName());
            contentValues.put("DesignationDesc", labInchargeSection.getDesignationDesc());
            contentValues.put("ShowHide", labInchargeSection.getShowHide());
            contentValues.put("LabInchargeCode", labInchargeSection.getLabInchargeCode());
            contentValues.put("DesignationCode", labInchargeSection.getDesignationCode());
            contentValues.put("Date", labInchargeSection.getDate());
            contentValues.put("EnableDisable", labInchargeSection.getEnableDisable());
            contentValues.put("Remarks", labInchargeSection.getRemarks());
            contentValues.put("SampleStatus", labInchargeSection.getSampleStatus());


            idInsert = db.insert("labtest_LabInchargeSection", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<LabInchargeSection> Get_LabTest_LabInchargeSection(String AutoDocNo, String productcode) {

        Cursor res = null;
        List<LabInchargeSection> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<LabInchargeSection>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_LabInchargeSection where AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode='" + productcode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                LabInchargeSection maDoctype = new LabInchargeSection();
                maDoctype.setRequestcode(res.getString(res.getColumnIndex("RequestNo")));
                maDoctype.setProductcode(res.getString(res.getColumnIndex("ProductCode")));
                maDoctype.setLabInchargeName(res.getString(res.getColumnIndex("LabInchargeName")));
                maDoctype.setDesignationDesc(res.getString(res.getColumnIndex("DesignationDesc")));
                maDoctype.setShowHide(res.getString(res.getColumnIndex("ShowHide")));
                maDoctype.setLabInchargeCode(res.getString(res.getColumnIndex("LabInchargeCode")));
                maDoctype.setDesignationCode(res.getString(res.getColumnIndex("DesignationCode")));
                maDoctype.setDate(res.getString(res.getColumnIndex("Date")));
                maDoctype.setEnableDisable(res.getString(res.getColumnIndex("EnableDisable")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setSampleStatus(res.getString(res.getColumnIndex("SampleStatus")));
                maDoctype.setReason(Get_LabTest_PossibleReasonsProductWise(AutoDocNo, productcode));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public boolean UpdateLabTest_Test_LabInchargeSection(String AutoDocNo, String productcode, String remarks) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("Remarks", remarks);
            res = db.update("labtest_LabInchargeSection", data, "AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode= '" + productcode.trim() + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public int updateLabInchargeSectionSampleStatus(String AutoDocNo, String productcode, String status) {
        int idInsert = -1;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("SampleStatus", status);
            idInsert = db.update("labtest_LabInchargeSection", contentValues, "AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode= '" + productcode.trim() + "'", null);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    //TODO: LAB INCHARGE ASSIGNMENT

    public Long insert_into_Labtest_LabInchargeAssignment(String AutoDocNo, String requestid, String productcode, String samplecode, LabInchargeAssignment labInchargeSection) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();

            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("SampleId", samplecode);
            contentValues.put("RequestNo", requestid);
            contentValues.put("ProductCode", productcode);
            contentValues.put("ShowHide", labInchargeSection.getShowHide());
            contentValues.put("DesignationDesc", labInchargeSection.getDesignationDesc());
            contentValues.put("CollectorCode", labInchargeSection.getCollectorCode());
            contentValues.put("DesignationCode", labInchargeSection.getDesignationCode());
            contentValues.put("EnableDisable", labInchargeSection.getEnableDisable());
            contentValues.put("Remarks", labInchargeSection.getRemarks());
            contentValues.put("CollectorName", labInchargeSection.getCollectorName());


            idInsert = db.insert("labtest_LabInchargeAssignment", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public LabInchargeAssignment Get_LabTest_LabInchargeAssignment(String AutoDocNo, String productcode, String sample) {

        Cursor res = null;
        LabInchargeAssignment maDoctype = null;
        SQLiteDatabase db = null;

        try {

            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_LabInchargeAssignment where AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode='" + productcode.trim() + "' AND SampleId = '" + sample + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                maDoctype = new LabInchargeAssignment();
                maDoctype.setSamplecode(res.getString(res.getColumnIndex("SampleId")));
                maDoctype.setRequestNo(res.getString(res.getColumnIndex("RequestNo")));
                maDoctype.setProductCode(res.getString(res.getColumnIndex("ProductCode")));
                maDoctype.setShowHide(res.getString(res.getColumnIndex("ShowHide")));
                maDoctype.setDesignationDesc(res.getString(res.getColumnIndex("DesignationDesc")));
                maDoctype.setCollectorCode(res.getString(res.getColumnIndex("CollectorCode")));
                maDoctype.setDesignationCode(res.getString(res.getColumnIndex("DesignationCode")));
                maDoctype.setEnableDisable(res.getString(res.getColumnIndex("EnableDisable")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setCollectorName(res.getString(res.getColumnIndex("CollectorName")));
                maDoctype.setIntimation(Get_LabTest_Intimate(AutoDocNo.trim(), productcode.trim(), sample.trim()));

                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return maDoctype;
    }

    public boolean Get_LabTest_LabInchargeAssignment_Selected(String reuestid, String productcode, String sample, String collectorcode) {

        Cursor res = null;
        LabInchargeAssignment maDoctype = null;
        boolean flag = false;
        SQLiteDatabase db = null;

        try {

            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_LabInchargeAssignment where RequestNo= '" + reuestid.trim() + "' AND ProductCode='" + productcode.trim() + "' AND SampleId = '" + sample + "' AND CollectorCode = '" + collectorcode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                maDoctype = new LabInchargeAssignment();
                maDoctype.setSamplecode(res.getString(res.getColumnIndex("SampleId")));
                maDoctype.setRequestNo(res.getString(res.getColumnIndex("RequestNo")));
                maDoctype.setProductCode(res.getString(res.getColumnIndex("ProductCode")));
                maDoctype.setShowHide(res.getString(res.getColumnIndex("ShowHide")));
                maDoctype.setDesignationDesc(res.getString(res.getColumnIndex("DesignationDesc")));
                maDoctype.setCollectorCode(res.getString(res.getColumnIndex("CollectorCode")));
                maDoctype.setDesignationCode(res.getString(res.getColumnIndex("DesignationCode")));
                maDoctype.setEnableDisable(res.getString(res.getColumnIndex("EnableDisable")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setCollectorName(res.getString(res.getColumnIndex("CollectorName")));
                maDoctype.setIntimation(Get_LabTest_Intimate(reuestid.trim(), productcode.trim(), sample.trim()));

                res.moveToNext();

                flag = true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return flag;
    }

    public boolean UpdateLabTest_Test_LabInchargeAssignment(String AutoDocNo, String productcode, String samplecode, String code, String name) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();


            data.put("CollectorName", name);
            res = db.update("labtest_LabInchargeAssignment", data, "AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode= '" + productcode.trim() + "' AND SampleId = '" + samplecode + "' AND CollectorCode= '" + code + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public int checkcountLabInchargeAssignment(String AutoDocNo, String productcode, String sample) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor mCount = db.rawQuery("select count(*) from labtest_LabInchargeAssignment where AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode='" + productcode.trim() + "' AND SampleId = '" + sample + "'", null);
        int count = 0;
        if (mCount.moveToFirst()) count = mCount.getInt(0);
        mCount.close();
        db.close();

        return count;
    }

    public boolean UpdateLabTest_Test_LabInchargeAssignmentCollectorName(String AutoDocNo, String productcode, String samplecode, String collectorCode, String collectorName) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("CollectorName", collectorName);
            data.put("CollectorCode", collectorCode);
            res = db.update("labtest_LabInchargeAssignment", data, "AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode= '" + productcode.trim() + "' AND SampleId = '" + samplecode + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public boolean UpdateLabTest_Test_LabInchargeAssignmentRemarks(String AutoDocNo, String productcode, String samplecode, String remarks) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("Remarks", remarks);
            res = db.update("labtest_LabInchargeAssignment", data, "AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode= '" + productcode.trim() + "' AND SampleId = '" + samplecode + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public boolean UpdateAdvanceApprovalSelect(String AutoDocNo, String isSelected) {

        //labtest_AdvanceRequest where RequestNo
        //AdvanceRequired

        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();


            data.put("AdvanceRequired", isSelected);
            res = db.update("labtest_AdvanceRequest", data, "AutoDocNo= '" + AutoDocNo.trim() + "' ", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }


    //TODO INTIMATE TOO
    public Long insert_into_Labtest_INTIMATE(String AutoDocNo, String requestid, String productcode, String sample, Intimation intimation) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();

            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("SampleId", sample);
            contentValues.put("RequestNo", requestid);
            contentValues.put("ProductCode", productcode);
            contentValues.put("empCode", intimation.getEmpCode());
            contentValues.put("Designation", intimation.getDesignation());
            contentValues.put("EmployeeName", intimation.getEmployeeName());

            idInsert = db.insert("labtest_LabInchargeAssignment_intimate", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public Long insert_into_Labtest_INTIMATE_BY_Dialogue(String AutoDocNo, String productcode, String sample, String code, String name, String des) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();

            contentValues.put("SampleId", sample);
            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("ProductCode", productcode);
            contentValues.put("empCode", code);
            contentValues.put("Designation", des);
            contentValues.put("EmployeeName", name);


            idInsert = db.insert("labtest_LabInchargeAssignment_intimate", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<Intimation> Get_LabTest_Intimate(String AutoDocNo, String productcode, String samplecode) {

        Cursor res = null;
        List<Intimation> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<Intimation>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_LabInchargeAssignment_intimate where AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode='" + productcode + "' AND SampleId ='" + samplecode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                Intimation maDoctype = new Intimation();
                maDoctype.setEmpCode(res.getString(res.getColumnIndex("empCode")));
                maDoctype.setDesignation(res.getString(res.getColumnIndex("Designation")));
                maDoctype.setEmployeeName(res.getString(res.getColumnIndex("EmployeeName")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public boolean Get_LabTest_Intimate_Check(String AutoDocNo, String productcode, String sample, String code) {

        Cursor res = null;

        SQLiteDatabase db = null;

        boolean flag = false;
        try {

            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_LabInchargeAssignment_intimate where AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode='" + productcode + "' AND empCode='" + code + "' AND SampleId = '" + sample + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                flag = true;
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return flag;
    }

    public boolean Delete_LabTest_Intimate_Check(String AutoDocNo, String productcode, String sample, String code) {

        Cursor res = null;

        SQLiteDatabase db = null;

        boolean flag = false;
        try {

            db = this.getReadableDatabase();
            res = db.rawQuery("DELETE FROM labtest_LabInchargeAssignment_intimate where AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode='" + productcode + "' AND empCode='" + code + "' AND SampleId ='" + sample + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                flag = true;
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return flag;
    }

    //TODO: SLECTED CHEMIST

    public Long insert_into_Labtest_Selected_Chemist(String AutoDocNo, String requestid, String productcode, String sample, ChemistObject chemistObject) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();


            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("RequestNo", requestid);
            contentValues.put("ProductCode", productcode);
            contentValues.put("SampleId", sample);
            contentValues.put("ShowHide", chemistObject.getShowHide());
            contentValues.put("DesignationDesc", chemistObject.getDesignationDesc());
            contentValues.put("ChemistName", chemistObject.getChemistName());
            contentValues.put("DesignationCode", chemistObject.getDesignationCode());
            contentValues.put("EnableDisable", chemistObject.getEnableDisable());
            contentValues.put("ChemistCode", chemistObject.getChemistCode());

            idInsert = db.insert("labtest_selected_chemist", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }


    //TODO: CHARGE TO
    public Long insert_into_Labtest_Selected_ChargeTo(String AutoDocNo, String requestid, String productcode, String sample, ChargeToLAbTest chargeToLAbTest) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();


            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("RequestNo", requestid);
            contentValues.put("ProductCode", productcode);
            contentValues.put("SampleId", sample);
            contentValues.put("Requester", chargeToLAbTest.getRequester());
            contentValues.put("Finance", chargeToLAbTest.getFinance());
            contentValues.put("SalesPerson", chargeToLAbTest.getSalesPerson());
            contentValues.put("LogisticAtSite", chargeToLAbTest.getLogisticAtSite());
            contentValues.put("LogisticAtHeadOffice", chargeToLAbTest.getLogisticAtHeadOffice());

           /* "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
                    "  `AutoDocNo` Text(255) DEFAULT NULL,\n" +
                    "  `RequestNo` Text(255) DEFAULT NULL,\n" +
                    "  `ProductCode` Text(255) DEFAULT NULL,\n" +
                    "  `SampleId` Text(255) DEFAULT NULL,\n" +
                    "  `Requester` Text(255) DEFAULT NULL,\n" +
                    "  `Finance` Text(255) DEFAULT NULL,\n" +
                    "  `SalesPerson` Text(255) DEFAULT NULL,\n" +
                    "  `LogisticAtSite` Text(255) DEFAULT NULL,\n" +
                    "  `LogisticAtHeadOffice` Text(255) DEFAULT NULL\n" +*/

            idInsert = db.insert("labtest_ChargeTo", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    //=============


    public List<ChargeToLAbTest> Get_LabTest_ChargeTo(String AutoDocNo, String requestid, String ProductCode, String SampleId) {

        Cursor res = null;
        List<ChargeToLAbTest> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<ChargeToLAbTest>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_ChargeTo where AutoDocNo= '" + AutoDocNo.trim() + "' AND RequestNo= '" + requestid.trim() + "' AND ProductCode= '" + ProductCode.trim() + "' AND SampleId= '" + SampleId.trim() + "'  ", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                ChargeToLAbTest maDoctype = new ChargeToLAbTest();
                maDoctype.setRequester(res.getString(res.getColumnIndex("Requester")));
                maDoctype.setFinance(res.getString(res.getColumnIndex("Finance")));
                maDoctype.setSalesPerson(res.getString(res.getColumnIndex("SalesPerson")));
                maDoctype.setLogisticAtSite(res.getString(res.getColumnIndex("LogisticAtSite")));
                maDoctype.setLogisticAtHeadOffice(res.getString(res.getColumnIndex("LogisticAtHeadOffice")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    //==================

    public ChemistObject Get_LabTest_selected_chemist(String AutoDocNo, String productcode, String samplecode) {

        Cursor res = null;
        ChemistObject maDoctype = null;
        SQLiteDatabase db = null;

        try {

            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_selected_chemist where AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode='" + productcode + "' AND SampleId ='" + samplecode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                maDoctype = new ChemistObject();
                maDoctype.setRequestcode(res.getString(res.getColumnIndex("RequestNo")));
                maDoctype.setProductcode(res.getString(res.getColumnIndex("ProductCode")));
                maDoctype.setSamplecode(res.getString(res.getColumnIndex("SampleId")));
                maDoctype.setShowHide(res.getString(res.getColumnIndex("ShowHide")));
                maDoctype.setDesignationDesc(res.getString(res.getColumnIndex("DesignationDesc")));
                maDoctype.setChemistName(res.getString(res.getColumnIndex("ChemistName")));
                maDoctype.setDesignationCode(res.getString(res.getColumnIndex("DesignationCode")));
                maDoctype.setEnableDisable(res.getString(res.getColumnIndex("EnableDisable")));
                maDoctype.setChemistCode(res.getString(res.getColumnIndex("ChemistCode")));


                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return maDoctype;
    }

    public boolean UpdateLabTestSelectedChemist(String AutoDocNo, String productcode, String samplecode, ChemistObject object) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("ShowHide", object.getShowHide());
            data.put("DesignationDesc", object.getDesignationDesc());
            data.put("ChemistName", object.getChemistName());
            data.put("DesignationCode", object.getDesignationCode());
            data.put("EnableDisable", object.getEnableDisable());
            data.put("ChemistCode", object.getChemistCode());
            res = db.update("labtest_selected_chemist", data, "AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode= '" + productcode.trim() + "' AND SampleId='" + samplecode + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }


    //TODO: SAMPLE LIST

    public Long insert_into_Labtest_SampleList(String AutoDocNo, String requestid, String productcode, String ProductName, SampleList sampleList) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();

            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("RequestNo", requestid);
            contentValues.put("ProductCode", productcode);
            contentValues.put("ProductName", ProductName);
            contentValues.put("Finalize", sampleList.getFinalize());
            contentValues.put("Quantity", sampleList.getQuantity());
            contentValues.put("SampleRefNo", sampleList.getSampleRefNo());
            contentValues.put("Remarks", sampleList.getRemarks());
            contentValues.put("OldSampleId", sampleList.getOldSampleId());
            contentValues.put("SampleType", sampleList.getSampleType());
            contentValues.put("SampleId", sampleList.getSampleId());
            contentValues.put("CollectedBy", sampleList.getCollectedBy());
            contentValues.put("CollectionDate", sampleList.getCollectionDate());
            contentValues.put("SampleStatus", sampleList.getSampleStatus());
            contentValues.put("MenuRetainSampleVisible", sampleList.getMenuRetainSampleVisible());
            contentValues.put("MenuRetainSampleEnable", sampleList.getMenuRetainSampleEnable());
            contentValues.put("MenuDrainSampleVisible", sampleList.getMenuDrainSampleVisible());
            contentValues.put("MenuDrainSampleEnable", sampleList.getMenuDrainSampleEnable());

            idInsert = db.insert("labtest_SampleList", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public List<SampleList> Get_LabTest_SampleList(String AutoDocNo, String productcode) {

        Cursor res = null;
        List<SampleList> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<SampleList>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_SampleList where AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode='" + productcode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                SampleList maDoctype = new SampleList();
                maDoctype.setRequestid(res.getString(res.getColumnIndex("RequestNo")));
                maDoctype.setProductcode(res.getString(res.getColumnIndex("ProductCode")));
                maDoctype.setProductName(res.getString(res.getColumnIndex("ProductName")));
                maDoctype.setChemistObject(Get_LabTest_selected_chemist(AutoDocNo, productcode, res.getString(res.getColumnIndex("SampleId"))));
                maDoctype.setFinalize(res.getString(res.getColumnIndex("Finalize")));
                maDoctype.setQuantity(res.getString(res.getColumnIndex("Quantity")));
                maDoctype.setSampleRefNo(res.getString(res.getColumnIndex("SampleRefNo")));
                maDoctype.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                maDoctype.setOldSampleId(res.getString(res.getColumnIndex("OldSampleId")));
                maDoctype.setLabInchargeAssignmentList(Get_LabTest_LabInchargeAssignment(AutoDocNo, productcode, res.getString(res.getColumnIndex("SampleId"))));
                maDoctype.setSampleType(res.getString(res.getColumnIndex("SampleType")));
                maDoctype.setSampleId(res.getString(res.getColumnIndex("SampleId")));
                maDoctype.setCollectedBy(res.getString(res.getColumnIndex("CollectedBy")));
                maDoctype.setSampleStatus(res.getString(res.getColumnIndex("SampleStatus")));
                maDoctype.setPossibleReasonList(Get_LabTest_Samplelist_PossibleReasons(AutoDocNo, productcode, res.getString(res.getColumnIndex("SampleId"))));
                maDoctype.setDrainLocations(Get_LabTest_Samplelist_DrainLocations(AutoDocNo, productcode, res.getString(res.getColumnIndex("SampleId"))));
                maDoctype.setCollectionDate(res.getString(res.getColumnIndex("CollectionDate")));
                maDoctype.setTestListList(Get_LabTest_TestList_sample(AutoDocNo, productcode, res.getString(res.getColumnIndex("SampleId"))));
                maDoctype.setChargeToLAbTests(Get_LabTest_ChargeTo(AutoDocNo, res.getString(res.getColumnIndex("RequestNo")), productcode, res.getString(res.getColumnIndex("SampleId"))));
                maDoctype.setMenuRetainSampleVisible(res.getString(res.getColumnIndex("MenuRetainSampleVisible")));
                maDoctype.setMenuRetainSampleEnable(res.getString(res.getColumnIndex("MenuRetainSampleEnable")));
                maDoctype.setMenuDrainSampleVisible(res.getString(res.getColumnIndex("MenuDrainSampleVisible")));
                maDoctype.setMenuDrainSampleEnable(res.getString(res.getColumnIndex("MenuDrainSampleEnable")));
                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public int updateSampleListDB(String AutoDocNo, String productcode, SampleList sampleList) {
        int idInsert = -1;

        SQLiteDatabase db = this.getReadableDatabase();
        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("Finalize", sampleList.getFinalize());
            contentValues.put("Remarks", sampleList.getRemarks());


            idInsert = db.update("labtest_SampleList", contentValues, "AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode= '" + productcode.trim() + "' AND SampleId='" + sampleList.getSampleId().toString() + "'", null);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public int updateLTSampleFinalize(String AutoDocNo, String productcode, String sampleId, String finalize) {
        int idInsert = -1;


        SQLiteDatabase db = this.getReadableDatabase();
        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("Finalize", finalize);
            idInsert = db.update("labtest_SampleList", contentValues, "AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode= '" + productcode.trim() + "' AND SampleId='" + sampleId + "'", null);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }


    public int updateLTSampleActionStatus(String AutoDocNo, String productcode, String sampleId, String status) {
        int idInsert = -1;
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("SampleStatus", status);
            idInsert = db.update("labtest_SampleList", contentValues, "AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode= '" + productcode.trim() + "' AND SampleId='" + sampleId + "'", null);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public int updateSampleCollectionDataIntoDB(String AutoDocNo, String productcode, SampleList sampleList) {
        int idInsert = -1;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("Quantity", sampleList.getQuantity());
            contentValues.put("SampleRefNo", sampleList.getSampleRefNo());
            contentValues.put("Remarks", sampleList.getRemarks());
            contentValues.put("CollectedBy", sampleList.getCollectedBy());
            contentValues.put("CollectionDate", sampleList.getCollectionDate());


            idInsert = db.update("labtest_SampleList", contentValues, "AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode= '" + productcode.trim() + "' AND SampleId='" + sampleList.getSampleId().toString() + "'", null);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public Long insertSampleCollectionAttachments(String autoDocNo, String requestid, String productcode, String sampleid,
                                                  SampleCollectionAttachment sampleCollectionAttachment) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("AutoDocNo", autoDocNo);
            contentValues.put("SampleId", sampleid);
            contentValues.put("RequestNo", requestid);
            contentValues.put("ProductCode", productcode);
            contentValues.put("FileLabel", sampleCollectionAttachment.getFileLabel());
            contentValues.put("FileName", sampleCollectionAttachment.getFileName());
            contentValues.put("FileServerPath", sampleCollectionAttachment.getFileServerPath());
            contentValues.put("FileLocalPath", sampleCollectionAttachment.getFileLocalPath());

            idInsert = db.insert("sample_collection_attachment", null, contentValues);


        } catch (SQLException e) {
            e.printStackTrace();
        } finally {

        }

        return idInsert;
    }


    public List<CaptureImagesModel> Get_LabTest_SampleCollectionAttachments(String AutoDocNo, String productcode, String sampleid) {

        Cursor res = null;
        List<CaptureImagesModel> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<CaptureImagesModel>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from sample_collection_attachment where AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode='" + productcode + "' AND SampleId ='" + sampleid + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                CaptureImagesModel maDoctype = new CaptureImagesModel();
                maDoctype.setId(res.getInt(res.getColumnIndex("id")));
                maDoctype.setLabel(res.getString(res.getColumnIndex("FileLabel")));
                maDoctype.setFileName(res.getString(res.getColumnIndex("FileName")));
                maDoctype.setUrl(res.getString(res.getColumnIndex("FileServerPath")));
                maDoctype.setFileImage(R.drawable.ic_image);

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public int getSampleCollectionAttachmentByProductCode(String AutoDocNo, String productCode, String sampleid) {

        int count = 0;
        MAGIStandardAttachment standardAttachments = new MAGIStandardAttachment();
        String selectQuery = "SELECT  * FROM  sample_collection_attachment WHERE AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode='" + productCode + "' AND SampleId ='" + sampleid + "'";
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQuery, null);
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {
                count++;
                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return count;
    }

    //TODO: ATTACHMENTS LIST

    public Long insert_into_Labtest_SampleAttachmentsList(String AutoDocNo, String requestid, String productcode, String sampleid, AttachmentsLabTest attachmentsLabTest) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();

            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("RequestNo", requestid);
            contentValues.put("ProductCode", productcode);
            contentValues.put("SampleId", sampleid);
            contentValues.put("label", attachmentsLabTest.getFileLabel());
            contentValues.put("fileName", attachmentsLabTest.getFileName());
            contentValues.put("url", attachmentsLabTest.getFilePath());


            idInsert = db.insert("labtest_SampleAttachmentsList", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public List<AttachmentsLabTest> Get_LabTest_SampleAttachmentsList(String AutoDocNo, String productcode, String sampleid) {

        Cursor res = null;
        List<AttachmentsLabTest> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<AttachmentsLabTest>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_SampleAttachmentsList where AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode='" + productcode + "' AND SampleId ='" + sampleid + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                AttachmentsLabTest maDoctype = new AttachmentsLabTest();
                maDoctype.setId(res.getInt(res.getColumnIndex("id")));
                maDoctype.setRequestid(res.getString(res.getColumnIndex("RequestNo")));
                maDoctype.setProductid(res.getString(res.getColumnIndex("ProductCode")));
                maDoctype.setSampleid(res.getString(res.getColumnIndex("SampleId")));
                maDoctype.setFileLabel(res.getString(res.getColumnIndex("label")));
                maDoctype.setFileName(res.getString(res.getColumnIndex("fileName")));
                maDoctype.setFilePath(res.getString(res.getColumnIndex("url")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }


    public boolean DeleteFromLaTestSampleImages(String requestid, String productcode, String samplecode, int id) {


        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deleteqa_dispenser_meaurment_images = "DELETE FROM labtest_SampleAttachmentsList where RequestNo= '" + requestid.trim() + "' AND ProductCode= '" + productcode.trim() + "' AND SampleId= '" + samplecode + "' AND id = " + id;
            db.execSQL(deleteqa_dispenser_meaurment_images);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }

    public boolean UpdateLabTestSampleImages(String requestid, String productcode, String samplecode, int id, String label) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("label", label);
            res = db.update("labtest_SampleAttachmentsList", data, "RequestNo= '" + requestid.trim() + "' AND ProductCode= '" + productcode.trim() + "' AND SampleId='" + samplecode + "' AND id=" + id, null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    //TODO: Method for Calculating Price Of Test List
    public int calculateAllTestPrices(String AutoDocNo, String reuestid, List<String[]> productsSamplesTotals) {

        Log.d("_mLog1= ", "Addressess= " + productsSamplesTotals.get(0));
        Cursor res = null;
        int totalPrice = 0;
        List<TestList> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<TestList>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select ProductCode,SUM(TestPrice) as ProductTotal from labtest_TestList where RequestNo= '" + reuestid.trim() + "' AND AutoDocNo = '" + AutoDocNo.trim() + "' group by ProductCode", null);
            res.moveToFirst();
            int i = 0;
            while (!res.isAfterLast()) {
                String ProductCode = res.getString(res.getColumnIndex("ProductCode"));
                String productTotal = res.getString(res.getColumnIndex("ProductTotal"));

                int productSamples = 0;
                for (int j = 0; j <= productsSamplesTotals.size(); j++) {
                    String aa = productsSamplesTotals.get(j)[0];
                    String bb = ProductCode;
                    if (aa.equals(bb)) {
                        productSamples = Integer.parseInt(productsSamplesTotals.get(j)[1]);
                        break;
                    }
                }
                int ptotal = productSamples * Integer.parseInt(productTotal);
                totalPrice += ptotal;
//                Log.d("_mLog11= ", "ProductCode= "+ProductCode+"  ProductTotal= "+productTotal);
//                Log.d("_mLog11= ", "totalPrice "+totalPrice);
//                Log.d("_mLog11= ", "productWise Total "+ptotal);
                res.moveToNext();
                i++;
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return totalPrice;

    }

    //TODO: Method for Calculating SampleWiseTotalPrice Of Test List
    public int calculateTotalPrice(String AutoDocNo, String reuestid) {
        Cursor res = null;
        int totalPrice = 0;

        SQLiteDatabase db = null;

        try {
            db = this.getReadableDatabase();
            res = db.rawQuery("select ProductCode,SUM(TestPrice) as ProductTotalPrice from labtest_TestList where RequestNo= '" + reuestid.trim() + "' AND AutoDocNo = '" + AutoDocNo.trim() + "' AND LabInchargeSelection = 'true' group by ProductCode", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                String currentProductCode = res.getString(res.getColumnIndex("ProductCode"));
                String ProductTotalPrice = res.getString(res.getColumnIndex("ProductTotalPrice"));
                Cursor res1 = null;
                res1 = db.rawQuery("select COUNT(SampleId) as NumberofSamples from labtest_SampleList where RequestNo= '" + reuestid.trim() + "' AND AutoDocNo = '" + AutoDocNo.trim() + "' AND ProductCode = '" + currentProductCode + "'", null);
                res1.moveToFirst();
                if (!res1.isAfterLast()) {
                    String NumberofSamples = res1.getString(res1.getColumnIndex("NumberofSamples"));
                    totalPrice = totalPrice + (Integer.parseInt(NumberofSamples) * Integer.parseInt(ProductTotalPrice));
                }
                res.moveToNext();
            }

        } catch (Exception e) {
            e.printStackTrace();
            totalPrice = -1;
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return totalPrice;

    }

    //TODO: Method for Calculating SampleWiseTotalPrice Of Test List
    public int calculateSampleWiseTotalPrice(String AutoDocNo, String reuestid, String ProductCode, String SampleId) {

        Cursor res = null;
        int sampleTotalint = 0;
        SQLiteDatabase db = null;

        try {
            db = this.getReadableDatabase();
            res = db.rawQuery("select SUM(TestPrice) as SampleTotal from labtest_TestList_sample where RequestNo= '" + reuestid.trim() + "' AND AutoDocNo = '" + AutoDocNo.trim() + "'  AND ProductCode = '" + ProductCode.trim() + "'  AND SampleId = '" + SampleId.trim() + "'", null);
            res.moveToFirst();
            if (!res.isAfterLast()) {
                String SampleTotal = res.getString(res.getColumnIndex("SampleTotal"));
                sampleTotalint = Integer.parseInt(SampleTotal);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return sampleTotalint;

    }

    //TODO: LAB TEST LIST
    public Long insert_into_Labtest_TestList(String AutoDocNo, String requestid, String productcode, TestList testList) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();

            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("RequestNo", requestid);
            contentValues.put("ProductCode", productcode);
            contentValues.put("TestCode", testList.getTestCode());
            contentValues.put("TestTitleCode", testList.getTestTitleCode());
            contentValues.put("Method", testList.getMethod());
            contentValues.put("RequesterSelection", testList.getRequesterSelection());
            contentValues.put("LabInchargeSelection", testList.getLabInchargeSelection());
            contentValues.put("DefaultMethodName", testList.getDefaultMethodName());
            contentValues.put("DataTypeLabel", testList.getDataTypeLabel());
            contentValues.put("TestPrice", testList.getTestPrice());
            contentValues.put("RangeInWinterMax", testList.getRangeInWinterMax());
            contentValues.put("RangeInSumerMax", testList.getRangeInSumerMax());
            contentValues.put("Max", testList.getMax());
            contentValues.put("TestSeasionApply", testList.getTestSeasionApply());
            contentValues.put("Min", testList.getMin());
            contentValues.put("RangeInSumerMin", testList.getRangeInSumerMin());
            contentValues.put("Result", testList.getResult());
            contentValues.put("DataTypeID", testList.getDataTypeID());
            contentValues.put("Critical", testList.getCritical());
            contentValues.put("TestSpecificationReq", testList.getTestSpecificationReq());
            contentValues.put("RangeSummerTo", testList.getRangeSummerTo());
            contentValues.put("DefaultMethodCode", testList.getDefaultMethodCode());
            contentValues.put("QVInchargeSelection", testList.getQVInchargeSelection());
            contentValues.put("Mandatory", testList.getMandatory());
            contentValues.put("TestTitleDes", testList.getTestTitleDes());
            contentValues.put("RangeWinterTo", testList.getRangeWinterTo());
            contentValues.put("RangeSummerFrom", testList.getRangeSummerFrom());
            contentValues.put("RangeWinterFrom", testList.getRangeWinterFrom());
            contentValues.put("RangeInWinterMin", testList.getRangeInWinterMin());


            idInsert = db.insert("labtest_TestList", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    ///hello

    public Long insert_into_Labtest_TestList_sample(String AutoDocNo, String requestid, String productcode, String sampleid, TestList testList) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();

            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("RequestNo", requestid);
            contentValues.put("ProductCode", productcode);
            contentValues.put("SampleId", sampleid);
            contentValues.put("TestCode", testList.getTestCode());
            contentValues.put("TestTitleCode", testList.getTestTitleCode());
            contentValues.put("Method", testList.getMethod());
            contentValues.put("RequesterSelection", testList.getRequesterSelection());
            contentValues.put("LabInchargeSelection", testList.getLabInchargeSelection());
            contentValues.put("DefaultMethodName", testList.getDefaultMethodName());
            contentValues.put("DataTypeLabel", testList.getDataTypeLabel());
            contentValues.put("TestPrice", testList.getTestPrice());
            contentValues.put("RangeInWinterMax", testList.getRangeInWinterMax());
            contentValues.put("RangeInSumerMax", testList.getRangeInSumerMax());
            contentValues.put("Max", testList.getMax());
            contentValues.put("TestSeasionApply", testList.getTestSeasionApply());
            contentValues.put("Min", testList.getMin());
            contentValues.put("RangeInSumerMin", testList.getRangeInSumerMin());
            contentValues.put("Result", testList.getResult());
            contentValues.put("DataTypeID", testList.getDataTypeID());
            contentValues.put("Critical", testList.getCritical());
            contentValues.put("TestSpecificationReq", testList.getTestSpecificationReq());
            contentValues.put("RangeSummerTo", testList.getRangeSummerTo());
            contentValues.put("DefaultMethodCode", testList.getDefaultMethodCode());
            contentValues.put("QVInchargeSelection", testList.getQVInchargeSelection());
            contentValues.put("Mandatory", testList.getMandatory());
            contentValues.put("TestTitleDes", testList.getTestTitleDes());
            contentValues.put("RangeWinterTo", testList.getRangeWinterTo());
            contentValues.put("RangeSummerFrom", testList.getRangeSummerFrom());
            contentValues.put("RangeWinterFrom", testList.getRangeWinterFrom());
            contentValues.put("RangeInWinterMin", testList.getRangeInWinterMin());
            contentValues.put("TestStatus", testList.getTestStatus());


            idInsert = db.insert("labtest_TestList_sample", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }


    public List<TestList> Get_LabTest_TestList(String AutoDocNo, String productcode) {

        Cursor res = null;
        List<TestList> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<TestList>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_TestList where AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode='" + productcode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                TestList maDoctype = new TestList();
                maDoctype.setAutoDocNo(res.getString(res.getColumnIndex("AutoDocNo")));
                maDoctype.setRequestcode(res.getString(res.getColumnIndex("RequestNo")));
                maDoctype.setProductcode(res.getString(res.getColumnIndex("ProductCode")));
                maDoctype.setSamplecode(res.getString(res.getColumnIndex("SampleId")));
                maDoctype.setTestTitleCode(res.getString(res.getColumnIndex("TestTitleCode")));
                maDoctype.setMethod(res.getString(res.getColumnIndex("Method")));
                maDoctype.setRequesterSelection(res.getString(res.getColumnIndex("RequesterSelection")));
                maDoctype.setLabInchargeSelection(res.getString(res.getColumnIndex("LabInchargeSelection")));
                maDoctype.setTestCode(res.getString(res.getColumnIndex("TestCode")));
                maDoctype.setDefaultMethodName(res.getString(res.getColumnIndex("DefaultMethodName")));
                maDoctype.setDataTypeLabel(res.getString(res.getColumnIndex("DataTypeLabel")));
                maDoctype.setTestPrice(res.getString(res.getColumnIndex("TestPrice")));
                maDoctype.setRangeInWinterMax(res.getString(res.getColumnIndex("RangeInWinterMax")));
                maDoctype.setRangeInSumerMax(res.getString(res.getColumnIndex("RangeInSumerMax")));
                maDoctype.setMax(res.getString(res.getColumnIndex("Max")));
                maDoctype.setTestSeasionApply(res.getString(res.getColumnIndex("TestSeasionApply")));
                maDoctype.setMin(res.getString(res.getColumnIndex("Min")));
                maDoctype.setRangeInSumerMin(res.getString(res.getColumnIndex("RangeInSumerMin")));
                maDoctype.setResult(res.getString(res.getColumnIndex("Result")));
                maDoctype.setDataTypeID(res.getString(res.getColumnIndex("DataTypeID")));
                maDoctype.setCritical(res.getString(res.getColumnIndex("Critical")));
                maDoctype.setRangeSummerTo(res.getString(res.getColumnIndex("RangeSummerTo")));
                maDoctype.setDefaultMethodCode(res.getString(res.getColumnIndex("DefaultMethodCode")));
                maDoctype.setQVInchargeSelection(res.getString(res.getColumnIndex("QVInchargeSelection")));
                maDoctype.setMandatory(res.getString(res.getColumnIndex("Mandatory")));
                maDoctype.setTestTitleDes(res.getString(res.getColumnIndex("TestTitleDes")));
                maDoctype.setRangeWinterTo(res.getString(res.getColumnIndex("RangeWinterTo")));
                maDoctype.setRangeSummerFrom(res.getString(res.getColumnIndex("RangeSummerFrom")));
                maDoctype.setRangeInWinterMin(res.getString(res.getColumnIndex("RangeInWinterMin")));
                maDoctype.setTestSpecificationReq(res.getString(res.getColumnIndex("TestSpecificationReq")));
                //maDoctype.setMethodListList(Get_LabTest_MethodList(reuestid,productcode,res.getString(res.getColumnIndex("TestCode"))));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<TestList> Get_LabTest_TestList_sample(String AutoDocNo, String productcode, String sampleid) {

        Cursor res = null;
        List<TestList> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<TestList>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_TestList_sample where AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode='" + productcode + "' AND SampleId ='" + sampleid + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                TestList maDoctype = new TestList();
                maDoctype.setAutoDocNo(res.getString(res.getColumnIndex("AutoDocNo")));
                maDoctype.setRequestcode(res.getString(res.getColumnIndex("RequestNo")));
                maDoctype.setProductcode(res.getString(res.getColumnIndex("ProductCode")));
                maDoctype.setSamplecode(res.getString(res.getColumnIndex("SampleId")));
                maDoctype.setTestTitleCode(res.getString(res.getColumnIndex("TestTitleCode")));
                maDoctype.setMethod(res.getString(res.getColumnIndex("Method")));
                maDoctype.setRequesterSelection(res.getString(res.getColumnIndex("RequesterSelection")));
                maDoctype.setLabInchargeSelection(res.getString(res.getColumnIndex("LabInchargeSelection")));
                maDoctype.setTestCode(res.getString(res.getColumnIndex("TestCode")));
                maDoctype.setDefaultMethodName(res.getString(res.getColumnIndex("DefaultMethodName")));
                maDoctype.setDataTypeLabel(res.getString(res.getColumnIndex("DataTypeLabel")));
                maDoctype.setTestPrice(res.getString(res.getColumnIndex("TestPrice")));
                maDoctype.setRangeInWinterMax(res.getString(res.getColumnIndex("RangeInWinterMax")));
                maDoctype.setRangeInSumerMax(res.getString(res.getColumnIndex("RangeInSumerMax")));
                maDoctype.setMax(res.getString(res.getColumnIndex("Max")));
                maDoctype.setTestSeasionApply(res.getString(res.getColumnIndex("TestSeasionApply")));
                maDoctype.setMin(res.getString(res.getColumnIndex("Min")));
                maDoctype.setRangeInSumerMin(res.getString(res.getColumnIndex("RangeInSumerMin")));
                maDoctype.setResult(res.getString(res.getColumnIndex("Result")));
                maDoctype.setDataTypeID(res.getString(res.getColumnIndex("DataTypeID")));
                maDoctype.setCritical(res.getString(res.getColumnIndex("Critical")));
                maDoctype.setRangeSummerTo(res.getString(res.getColumnIndex("RangeSummerTo")));
                maDoctype.setDefaultMethodCode(res.getString(res.getColumnIndex("DefaultMethodCode")));
                maDoctype.setQVInchargeSelection(res.getString(res.getColumnIndex("QVInchargeSelection")));
                maDoctype.setMandatory(res.getString(res.getColumnIndex("Mandatory")));
                maDoctype.setTestTitleDes(res.getString(res.getColumnIndex("TestTitleDes")));
                maDoctype.setRangeWinterTo(res.getString(res.getColumnIndex("RangeWinterTo")));
                maDoctype.setRangeSummerFrom(res.getString(res.getColumnIndex("RangeSummerFrom")));
                maDoctype.setRangeInWinterMin(res.getString(res.getColumnIndex("RangeInWinterMin")));
                maDoctype.setTestSpecificationReq(res.getString(res.getColumnIndex("TestSpecificationReq")));
                maDoctype.setTestStatus(res.getString(res.getColumnIndex("TestStatus")));
                maDoctype.setMethodListList(Get_LabTest_MethodList_sample(AutoDocNo, productcode, sampleid, res.getString(res.getColumnIndex("TestCode"))));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public String Get_LabTest_TestList_sample_TestStatus(String AutoDocNo, String productcode, String sampleid, String testcode) {

        Cursor res = null;
        String TestStatus = "";
        SQLiteDatabase db = null;

        try {

            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_TestList_sample where AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode='" + productcode + "' AND SampleId ='" + sampleid + "' AND TestCode='" + testcode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                TestStatus = res.getString(res.getColumnIndex("TestStatus"));
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return TestStatus;
    }


    public boolean UpdateLabTest_Test_sampleTest(String reqestid, String productcode, String testcode, String method, String result, String testresult) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("Method", method);
            data.put("Result", result);
            data.put("TestStatus", testresult);

            res = db.update("labtest_TestList", data, "RequestNo= '" + reqestid.trim() + "' AND ProductCode= '" + productcode.trim() + "' AND TestCode= '" + testcode + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public boolean UpdateLabTest_Test_sampleTest_sample(String AutoDocNo, String productcode, String sample, String testcode, String method, String result, String testresult) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("Method", method);
            data.put("Result", result);
            data.put("TestStatus", testresult);

            res = db.update("labtest_TestList_sample", data, "AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode= '" + productcode.trim() + "' AND TestCode= '" + testcode + "' AND SampleId ='" + sample + "'", null) > 0;

            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }


    public boolean UpdateLabTest_TestList_QA_Incharge(String AutoDocNo, String productcode, String testcode, String val) {

        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("QVInchargeSelection", val);
            res = db.update("labtest_TestList", data, "AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode= '" + productcode.trim() + "' AND TestCode= '" + testcode + "'", null) > 0;
            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public boolean UpdateLabTest_TestList_QA_Incharge_sample(String reqestid, String productcode, String sampleid, String testcode, String val) {

        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("QVInchargeSelection", val);
            res = db.update("labtest_TestList_sample", data, "RequestNo= '" + reqestid.trim() + "' AND ProductCode= '" + productcode.trim() + "' AND TestCode= '" + testcode + "' AND SampleId ='" + sampleid + "'", null) > 0;
            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }


    public boolean UpdateLabTest_TestList_Lab_Incharge(String AutoDocNo, String productcode, String testcode, String val) {

        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("LabInchargeSelection", val);
            res = db.update("labtest_TestList", data, "AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode= '" + productcode.trim() + "' AND TestCode= '" + testcode + "'", null) > 0;
            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }

    public boolean UpdateLabTest_TestList_Lab_Incharge_sample(String reqestid, String productcode, String sampleid, String testcode, String val) {

        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = null;
        Boolean res = false;


        try {
            data = new ContentValues();

            data.put("LabInchargeSelection", val);
            res = db.update("labtest_TestList_sample", data, "RequestNo= '" + reqestid.trim() + "' AND ProductCode= '" + productcode.trim() + "' AND TestCode= '" + testcode + "' AND SampleId ='" + sampleid + "'", null) > 0;
            res = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            db.close();
        }
        return res;
    }


    public String Get_LabTest_TestList_QAIncharge(String AutoDocNo, String productcode, String testcode) {
        //1000100700001001 --HSD
        // 1000101400002001 -- HOBC
        // 1000100600001001 -- PMG

        Log.d("Req:", AutoDocNo);
        Log.d("product:", productcode);
        Log.d("testcode:", testcode);
        Cursor res = null;
        String list = null;
        SQLiteDatabase db = null;

        try {
            list = "";
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_TestList where AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode='" + productcode + "' AND TestCode ='" + testcode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                list = res.getString(res.getColumnIndex("QVInchargeSelection"));
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public String Get_LabTest_TestList_QAIncharge_sample(String reuestid, String productcode, String sampleid, String testcode) {
        //1000100700001001 --HSD
        // 1000101400002001 -- HOBC
        // 1000100600001001 -- PMG

        Log.d("Req:", reuestid);
        Log.d("product:", productcode);
        Log.d("testcode:", testcode);
        Cursor res = null;
        String list = null;
        SQLiteDatabase db = null;

        try {
            list = "";
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_TestList_sample where RequestNo= '" + reuestid.trim() + "' AND ProductCode='" + productcode + "' AND TestCode ='" + testcode + "' AND SampleId ='" + sampleid + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                list = res.getString(res.getColumnIndex("QVInchargeSelection"));
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }


    public String Get_LabTest_TestList_LabIncharge(String AutoDocNo, String productcode, String testcode) {
        //1000100700001001 --HSD
        // 1000101400002001 -- HOBC
        // 1000100600001001 -- PMG

        Log.d("Req:", AutoDocNo);
        Log.d("product:", productcode);
        Log.d("testcode:", testcode);
        Cursor res = null;
        String list = null;
        SQLiteDatabase db = null;

        try {
            list = "";
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_TestList where AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode='" + productcode + "' AND TestCode ='" + testcode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                list = res.getString(res.getColumnIndex("LabInchargeSelection"));
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public String Get_LabTest_TestList_LabIncharge_sample(String reuestid, String productcode, String sampleid, String testcode) {
        //1000100700001001 --HSD
        // 1000101400002001 -- HOBC
        // 1000100600001001 -- PMG

        Log.d("Req:", reuestid);
        Log.d("product:", productcode);
        Log.d("testcode:", testcode);
        Cursor res = null;
        String list = null;
        SQLiteDatabase db = null;

        try {
            list = "";
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_TestList_sample where RequestNo= '" + reuestid.trim() + "' AND ProductCode='" + productcode + "' AND TestCode ='" + testcode + "' AND SampleId ='" + sampleid + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                list = res.getString(res.getColumnIndex("LabInchargeSelection"));
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }


    //TODO: LAB METHOD LIST

    public Long insert_into_Labtest_MethodList(String AutoDocNo, String requestid, String productcode, String testcode, MethodList methodList) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();

            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("RequestNo", requestid);
            contentValues.put("ProductCode", productcode);
            contentValues.put("TestCode", testcode);
            contentValues.put("Description", methodList.getDescription());
            contentValues.put("Code", methodList.getCode());


            idInsert = db.insert("labtest_MethodList", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public Long insert_into_Labtest_MethodList_sample(String AutoDocNo, String requestid, String productcode, String sampleid, String testcode, MethodList methodList) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();

            contentValues.put("AutoDocNo", AutoDocNo);
            contentValues.put("RequestNo", requestid);
            contentValues.put("ProductCode", productcode);
            contentValues.put("SampleId", sampleid);
            contentValues.put("TestCode", testcode);
            contentValues.put("Description", methodList.getDescription());
            contentValues.put("Code", methodList.getCode());


            idInsert = db.insert("labtest_MethodList_sample", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    //TODO RI Tour Apprive side Attachments================


    public Long insert_wf_current_attachments(String autoDocNo, String callType, CaptureImagesModel attach) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();

            contentValues.put("AutoDocNo", autoDocNo);
            contentValues.put("CallType", callType);
            contentValues.put("FileLabel", attach.getLabel());
            contentValues.put("FileName", attach.getFileName());
            contentValues.put("FileLocalPath", attach.getUrl());


            idInsert = db.insert("wf_current_attachments", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<CaptureImagesModel> Get_wf_current_attachments(String autoDocNo, String callType) {

        Cursor res = null;
        List<CaptureImagesModel> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<CaptureImagesModel>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from wf_current_attachments where AutoDocNo='" + autoDocNo + "' AND CallType='" + callType + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                CaptureImagesModel maDoctype = new CaptureImagesModel();
                maDoctype.setFileDbid(res.getInt(res.getColumnIndex("id")));
                maDoctype.setFileName(res.getString(res.getColumnIndex("FileName")));
                maDoctype.setLabel(res.getString(res.getColumnIndex("FileLabel")));
                maDoctype.setUrl(res.getString(res.getColumnIndex("FileLocalPath")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public int count_wf_current_attachments(String autoDocNo) {

        int count = 0;
        Cursor res = null;
        List<CaptureImagesModel> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<CaptureImagesModel>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from wf_current_attachments where AutoDocNo='" + autoDocNo + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                count++;
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return count;
    }

    public boolean delete_wf_current_attachments(String autoDocNo, int id) {
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deletelt_possible_reasons = "DELETE FROM wf_current_attachments WHERE AutoDocNo='" + autoDocNo + "' AND id ='" + id + "'";
            db.execSQL(deletelt_possible_reasons);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }

    //TODO=========================================

    //TODO: LabTest current Action Attachments================

    public int count_lab_test_current_action_attachments(String autoDocNo) {

        int count = 0;
        Cursor res = null;
        List<CaptureImagesModel> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<CaptureImagesModel>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from lab_test_current_action_attach where AutoDocNo='" + autoDocNo + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                count++;
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return count;
    }

    public boolean delete_lab_test_current_action_attachments(String autoDocNo, int id) {
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deletelt_possible_reasons = "DELETE FROM lab_test_current_action_attach WHERE AutoDocNo='" + autoDocNo + "' AND id ='" + id + "'";
            db.execSQL(deletelt_possible_reasons);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }

    //TODO=========================================
    public Long insert_into_Labtest_Remarks_by_productCode_and_sample_vise(String autoDocNo, String requestid, String productcode, String sampleid, String remarks) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();

            contentValues.put("AutoDocNo", autoDocNo);
            contentValues.put("RequestNo", requestid);
            contentValues.put("ProductCode", productcode);
            contentValues.put("SampleId", sampleid);
            contentValues.put("Remarks", remarks);


            idInsert = db.insert("labtest_sample_remarks", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public String Get_LabTest_Remarks_by_productCode_and_sample_vise(String AutoDocNo, String productcode, String sampleid) {

        Cursor res = null;
        String remarks = "";
        SQLiteDatabase db = null;

        try {

            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_sample_remarks where AutoDocNo='" + AutoDocNo + "' AND ProductCode='" + productcode + "' AND SampleId ='" + sampleid + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                remarks = res.getString(res.getColumnIndex("Remarks"));

                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return remarks;
    }

    public int check_LabTest_Remarks_by_productCode_and_sample_vise(String productcode, String sampleid) {

        int isExist = 0;
        Cursor res = null;
        SQLiteDatabase db = null;

        try {
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_sample_remarks where ProductCode='" + productcode + "' AND SampleId ='" + sampleid + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                isExist = 1;
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return isExist;
    }

    public boolean deletePossibleRemarks(String productcode, String sampleid) {
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deletelt_possible_reasons = "DELETE FROM labtest_sample_remarks WHERE ProductCode='" + productcode + "' AND SampleId ='" + sampleid + "'";
            db.execSQL(deletelt_possible_reasons);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }


    public Long insert_into_Labtest_PossibleReasonsProductWise(String autoDocNo, String requestid, String productcode, String possibleReasons, String code) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();

            contentValues.put("AutoDocNo", autoDocNo);
            contentValues.put("RequestNo", requestid);
            contentValues.put("ProductCode", productcode);
            contentValues.put("Description", possibleReasons);
            contentValues.put("Code", code);


            idInsert = db.insert("labtest_product_reasons", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public Long insert_into_Labtest_PossibleReasonsSampleWise(String autoDocNo, String requestid, String productcode, String sampleId, String possibleReasons, String code) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();
        try {

            ContentValues contentValues = new ContentValues();

            contentValues.put("AutoDocNo", autoDocNo);
            contentValues.put("RequestNo", requestid);
            contentValues.put("ProductCode", productcode);
            contentValues.put("SampleId", sampleId);
            contentValues.put("Description", possibleReasons);
            contentValues.put("Code", code);


            idInsert = db.insert("labtest_sample_reasons", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public ArrayList<PossibleReason> Get_LabTest_PossibleReasonsProductWise(String AutoDocNo, String productcode) {

        Cursor res = null;
        ArrayList<PossibleReason> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<PossibleReason>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_product_reasons where AutoDocNo='" + AutoDocNo + "' AND ProductCode='" + productcode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                PossibleReason maDoctype = new PossibleReason();
                maDoctype.setProductcode(productcode);
                maDoctype.setAutoDocNo(res.getString(res.getColumnIndex("AutoDocNo")));
                maDoctype.setDescription(res.getString(res.getColumnIndex("Description")));
                maDoctype.setCode(res.getString(res.getColumnIndex("Code")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public ArrayList<PossibleReason> Get_LabTest_PossibleReasonsSampleWise(String AutoDocNo, String productcode, String sampleId) {

        Cursor res = null;
        ArrayList<PossibleReason> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<PossibleReason>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_sample_reasons where AutoDocNo='" + AutoDocNo + "' AND ProductCode='" + productcode + "' AND SampleId='" + sampleId + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                PossibleReason maDoctype = new PossibleReason();
                maDoctype.setProductcode(productcode);
                maDoctype.setAutoDocNo(res.getString(res.getColumnIndex("AutoDocNo")));
                maDoctype.setDescription(res.getString(res.getColumnIndex("Description")));
                maDoctype.setCode(res.getString(res.getColumnIndex("Code")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public int check_LabTest_PossibleReasonsProductWise(String productcode, String code) {

        int isExist = 0;
        Cursor res = null;
        List<PossibleReason> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<PossibleReason>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_product_reasons where ProductCode='" + productcode + "' AND Code ='" + code + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                isExist = 1;
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return isExist;
    }

    public int check_LabTest_PossibleReasonsSampleWise(String productcode, String sampleId, String code) {

        int isExist = 0;
        Cursor res = null;
        List<PossibleReason> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<PossibleReason>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_product_reasons where ProductCode='" + productcode + "' AND Code ='" + code + "'" + "' AND SampleId ='" + sampleId + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                isExist = 1;
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return isExist;
    }

    public boolean deletePossibleReasons(String AutoDocNo, String productcode, String code) {
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deletelt_possible_reasons = "DELETE FROM labtest_product_reasons WHERE AutoDocNo='" + AutoDocNo + "' AND ProductCode='" + productcode + "' AND Code='" + code + "'";
            db.execSQL(deletelt_possible_reasons);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }

    public boolean deletePossibleSampleReasons(String AutoDocNo, String productcode, String sampleId, String code) {
        SQLiteDatabase db = this.getReadableDatabase();
        Boolean flag = false;
        try {
            String deletelt_possible_reasons = "DELETE FROM labtest_sample_reasons WHERE AutoDocNo='" + AutoDocNo + "' AND ProductCode='" + productcode + "' AND Code='" + code + "' AND SampleId='" + sampleId + "'";
            db.execSQL(deletelt_possible_reasons);
            flag = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return flag;
    }

    public List<MethodList> Get_LabTest_MethodList(String reuestid, String productcode, String testcode) {

        Cursor res = null;
        List<MethodList> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<MethodList>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_MethodList where RequestNo= '" + reuestid.trim() + "' AND ProductCode='" + productcode + "' AND TestCode ='" + testcode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                MethodList maDoctype = new MethodList();
                maDoctype.setRequestid(res.getString(res.getColumnIndex("RequestNo")));
                maDoctype.setProductid(res.getString(res.getColumnIndex("ProductCode")));
                maDoctype.setSampleid(res.getString(res.getColumnIndex("TestCode")));
                maDoctype.setDescription(res.getString(res.getColumnIndex("Description")));
                maDoctype.setCode(res.getString(res.getColumnIndex("Code")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<MethodList> Get_LabTest_MethodList_sample(String AutoDocNo, String productcode, String sampleid, String testcode) {

        Cursor res = null;
        List<MethodList> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<MethodList>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_MethodList_sample where AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode='" + productcode + "' AND TestCode ='" + testcode + "' AND SampleId ='" + sampleid + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                MethodList maDoctype = new MethodList();
                maDoctype.setRequestid(res.getString(res.getColumnIndex("RequestNo")));
                maDoctype.setProductid(res.getString(res.getColumnIndex("ProductCode")));
                maDoctype.setSampleid(res.getString(res.getColumnIndex("SampleId")));
                maDoctype.setSampleid(res.getString(res.getColumnIndex("TestCode")));
                maDoctype.setDescription(res.getString(res.getColumnIndex("Description")));
                maDoctype.setCode(res.getString(res.getColumnIndex("Code")));


                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }


    //TODO: Save to Server QA INCharge
    public List<ModelLabTestInner> Get_LabTest_QA_InchargeServerSubmit(String AutoDocNo) {

        Cursor res = null;
        List<ModelLabTestInner> list = null;
        SQLiteDatabase db = null;

        List<ApprovalRemarks> previous = new ArrayList<>();
        CurrentObjectLabTest current = new CurrentObjectLabTest();
        try {
            list = new ArrayList<ModelLabTestInner>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_request WHERE AutoDocNo = '" + AutoDocNo.trim() + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                ModelLabTestInner maDoctype = new ModelLabTestInner();


                maDoctype.setPreviousInfoList(previous);
                maDoctype.setRequestDate(res.getString(res.getColumnIndex("RequestDate")));
                maDoctype.setTankDesc(res.getString(res.getColumnIndex("TankDesc")));
                maDoctype.setAdvanceAprovalList(Get_LabTest_AdvanceApproval(AutoDocNo));
                maDoctype.setCurrentObjectList(current);
                maDoctype.setOldTestReportNo(res.getString(res.getColumnIndex("OldTestReportNo")));
                maDoctype.setTankCode(res.getString(res.getColumnIndex("TankCode")));
                maDoctype.setChemistListLabTestList(Get_LabTest_Chemist(AutoDocNo));
                maDoctype.setRequesterRemarks(res.getString(res.getColumnIndex("RequesterRemarks")));
                maDoctype.setSupplyPointDesc(res.getString(res.getColumnIndex("SupplyPointDesc")));
                maDoctype.setVanTCPNo(res.getString(res.getColumnIndex("VanTCPNo")));
                maDoctype.setLabType(res.getString(res.getColumnIndex("LabType")));
                maDoctype.setManageLabDesc(res.getString(res.getColumnIndex("ManageLabDesc")));
                maDoctype.setQaInchargeSectionLabTestList(Get_LabTest_QaInchargeSection(AutoDocNo));
                maDoctype.setSupplyPointCode(res.getString(res.getColumnIndex("SupplyPointCode")));
                maDoctype.setPerformedLabCode(res.getString(res.getColumnIndex("PerformedLabCode")));
                maDoctype.setDepartmentCode(res.getString(res.getColumnIndex("DepartmentCode")));
                maDoctype.setPerformedLabDesc(res.getString(res.getColumnIndex("PerformedLabDesc")));
                maDoctype.setDesignationDesc(res.getString(res.getColumnIndex("DesignationDesc")));
//                maDoctype.setChargeToLAbTests(Get_LabTest_ChargeTo(AutoDocNo));
                maDoctype.setAdvanceConfirmationLabTestList(Get_LabTest_AdvanceConformation(AutoDocNo));
                maDoctype.setManageLabCode(res.getString(res.getColumnIndex("ManageLabCode")));
                maDoctype.setDesignationCode(res.getString(res.getColumnIndex("DesignationCode")));
                maDoctype.setRequestedBy(res.getString(res.getColumnIndex("RequestedBy")));
                maDoctype.setAdvanceRequestLabTestList(Get_LabTest_AdvanceRequest(AutoDocNo));
                maDoctype.setRequestNo(res.getString(res.getColumnIndex("RequestNo")));
                maDoctype.setVanTCPDate(res.getString(res.getColumnIndex("VanTCPDate")));
                maDoctype.setTestType(res.getString(res.getColumnIndex("TestType")));
                maDoctype.setDepartmentDesc(res.getString(res.getColumnIndex("DepartmentDesc")));//DepartmentDesc
                maDoctype.setProductListLabTestList(Get_LabTest_ProductList(AutoDocNo));

                maDoctype.setSampleCollectorVisible(res.getString(res.getColumnIndex("SampleCollectorVisible")));
                maDoctype.setSampleCollectorEnable(res.getString(res.getColumnIndex("SampleCollectorEnable")));
                maDoctype.setMenuCollectSampleVisible(res.getString(res.getColumnIndex("MenuCollectSampleVisible")));
                maDoctype.setMenuCollectSampleEnable(res.getString(res.getColumnIndex("MenuCollectSampleEnable")));
                maDoctype.setMenuReceiveSampleVisible(res.getString(res.getColumnIndex("MenuReceiveSampleVisible")));
                maDoctype.setMenuReceiveSampleEnable(res.getString(res.getColumnIndex("MenuReceiveSampleEnable")));
                maDoctype.setMenuReceiveSampleEnable(res.getString(res.getColumnIndex("MenuReceiveSampleEnable")));
                maDoctype.setMenuReceiveSampleEnable(res.getString(res.getColumnIndex("MenuReceiveSampleEnable")));
                maDoctype.setMenuRetainSampleVisible(res.getString(res.getColumnIndex("MenuRetainSampleVisible")));
                maDoctype.setMenuRetainSampleEnable(res.getString(res.getColumnIndex("MenuRetainSampleEnable")));
                maDoctype.setMenuDrainSampleVisible(res.getString(res.getColumnIndex("MenuDrainSampleVisible")));
                maDoctype.setMenuDrainSampleEnable(res.getString(res.getColumnIndex("MenuDrainSampleEnable")));
                maDoctype.setMenuInvoiceVisible(res.getString(res.getColumnIndex("MenuInvoiceVisible")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }


    //TODO: LAB TEST POSSIBLE REASONS

    public void deleteLabTestPossibleReasons() {

        SQLiteDatabase db = this.getReadableDatabase();
        try {
            String deletelabtest_labtest_managers = "DELETE FROM labtest_Samplelist_PossibleReasons";
            db.execSQL(deletelabtest_labtest_managers);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }


    public Long insert_into_LabTest_Samplelist_PossibleReasons(String autoDocNo, String requestid, String productcode, String testcode, PossibleReason possibleReason) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();

        try {

            ContentValues contentValues = new ContentValues();

            contentValues.put("AutoDocNo", autoDocNo);
            contentValues.put("RequestNo", requestid);
            contentValues.put("ProductCode", productcode);
            contentValues.put("SampleId", testcode);
            contentValues.put("Description", possibleReason.getDescription());
            contentValues.put("Code", possibleReason.getCode());


            idInsert = db.insert("labtest_Samplelist_PossibleReasons", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<PossibleReason> Get_LabTest_Samplelist_PossibleReasons(String AutoDocNo, String productcode, String testcode) {


        Cursor res = null;
        List<PossibleReason> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<PossibleReason>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_Samplelist_PossibleReasons where AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode='" + productcode + "' AND SampleId ='" + testcode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                PossibleReason maDoctype = new PossibleReason();
                maDoctype.setProductcode(productcode);
                maDoctype.setSamplecode(testcode);
                maDoctype.setDescription(res.getString(res.getColumnIndex("Description")));
                maDoctype.setCode(res.getString(res.getColumnIndex("Code")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    //TODO: LAB TEST DRAIN LOCATIONS

    public void deleteLabTestDrainLocations() {

        SQLiteDatabase db = this.getReadableDatabase();
        try {
            String deletelabtest_labtest_managers = "DELETE FROM labtest_Samplelist_DrainLocations";
            db.execSQL(deletelabtest_labtest_managers);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }


    public Long insert_into_LabTest_Samplelist_DrainLocations(String autoDocNo, String requestid, String productcode, String testcode, DrainLocations drainLocations) {
        Long idInsert = -1L;


        SQLiteDatabase db = this.getReadableDatabase();

        try {

            ContentValues contentValues = new ContentValues();

            contentValues.put("AutoDocNo", autoDocNo);
            contentValues.put("RequestNo", requestid);
            contentValues.put("ProductCode", productcode);
            contentValues.put("SampleId", testcode);
            contentValues.put("LocationCode", drainLocations.getLocationCode());
            contentValues.put("LocationDesc", drainLocations.getLocationDesc());


            idInsert = db.insert("labtest_Samplelist_DrainLocations", null, contentValues);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }


        return idInsert;
    }

    public List<DrainLocations> Get_LabTest_Samplelist_DrainLocations(String AutoDocNo, String productcode, String testcode) {
        Cursor res = null;
        List<DrainLocations> list = null;
        SQLiteDatabase db = null;

        try {
            list = new ArrayList<DrainLocations>();
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from labtest_Samplelist_DrainLocations where AutoDocNo= '" + AutoDocNo.trim() + "' AND ProductCode='" + productcode + "' AND SampleId ='" + testcode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                DrainLocations maDoctype = new DrainLocations();
                maDoctype.setProductcode(productcode);
                maDoctype.setSamplecode(testcode);
                maDoctype.setLocationDesc(res.getString(res.getColumnIndex("LocationDesc")));
                maDoctype.setLocationCode(res.getString(res.getColumnIndex("LocationCode")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }


    public void deleteLabTestTables() {

        SQLiteDatabase db = this.getReadableDatabase();
        try {
            String deletelabtest_labtest_managers = "DELETE FROM labtest_managers";
            db.execSQL(deletelabtest_labtest_managers);

            String deletelabtest_SampleAttachmentsList = "DELETE FROM labtest_SampleAttachmentsList";
            db.execSQL(deletelabtest_SampleAttachmentsList);


            String deletelabtest_SampleList = "DELETE FROM labtest_SampleList";
            db.execSQL(deletelabtest_SampleList);

            String deletelabtest_LabInchargeSection = "DELETE FROM labtest_LabInchargeSection";
            db.execSQL(deletelabtest_LabInchargeSection);

            String deletelabtest_MethodList = "DELETE FROM labtest_MethodList";
            db.execSQL(deletelabtest_MethodList);

            String deletelabtest_TestList = "DELETE FROM labtest_TestList";
            db.execSQL(deletelabtest_TestList);

            String deletelabtest_ProductList = "DELETE FROM labtest_ProductList";
            db.execSQL(deletelabtest_ProductList);

            String deletelabtest_AdvanceRequest = "DELETE FROM labtest_AdvanceRequest";
            db.execSQL(deletelabtest_AdvanceRequest);

            String deletelabtest_AdvanceConfirmation = "DELETE FROM labtest_AdvanceConfirmation";
            db.execSQL(deletelabtest_AdvanceConfirmation);

            String deletelabtest_ChargeTo = "DELETE FROM labtest_ChargeTo";
            db.execSQL(deletelabtest_ChargeTo);

            String deletelabtest_qainchargeSection = "DELETE FROM labtest_qainchargeSection";
            db.execSQL(deletelabtest_qainchargeSection);

            String deletelabtest_chemistlist = "DELETE FROM labtest_chemistlist";
            db.execSQL(deletelabtest_chemistlist);

            String deletelabtest_advanceaproval = "DELETE FROM labtest_advanceaproval";
            db.execSQL(deletelabtest_advanceaproval);

            String deletelabtest_request = "DELETE FROM labtest_request";
            db.execSQL(deletelabtest_request);

            String deletelabtest_LabInchargeAssignmentt = "DELETE FROM labtest_LabInchargeAssignment";
            db.execSQL(deletelabtest_LabInchargeAssignmentt);

            String deletelabtest_labtest_intimate = "DELETE FROM labtest_LabInchargeAssignment_intimate";
            db.execSQL(deletelabtest_labtest_intimate);

            String deletelabtest_AdvanceConfirmation_intimate = "DELETE FROM labtest_AdvanceConfirmation_intimate";
            db.execSQL(deletelabtest_AdvanceConfirmation_intimate);

            String deletelabtest_AdvanceRequest_intimate = "DELETE FROM labtest_AdvanceRequest_intimate";
            db.execSQL(deletelabtest_AdvanceRequest_intimate);

            String deletelabtest_Samplelist_PossibleReasons = "DELETE FROM labtest_Samplelist_PossibleReasons";
            db.execSQL(deletelabtest_Samplelist_PossibleReasons);

            String deletelabtest_labtest_Advanceaproval_intimate = "DELETE FROM labtest_Advanceaproval_intimate";
            db.execSQL(deletelabtest_labtest_Advanceaproval_intimate);

            String deletelabtest_labtest_labtest_TestList_sample = "DELETE FROM labtest_TestList_sample";
            db.execSQL(deletelabtest_labtest_labtest_TestList_sample);

            String deletelabtest_labtest_labtest_MethodList_sample = "DELETE FROM labtest_MethodList_sample";
            db.execSQL(deletelabtest_labtest_labtest_MethodList_sample);

            String deletelabtest_labtest_selected_chemist = "DELETE FROM labtest_selected_chemist";
            db.execSQL(deletelabtest_labtest_selected_chemist);


        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }


    //endregion

    public Long InsertEmployees(List<EmployeeList> reaisons) {
        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;
        String deleteemployees = "DELETE FROM employees";
        db.execSQL(deleteemployees);
        try {

            for (int i = 0; i < reaisons.size(); i++) {

                ContentValues contentValues = new ContentValues();
                contentValues.put("Code", reaisons.get(i).getCode());
                contentValues.put("EmployeeName", reaisons.get(i).getEmployeeName());
                contentValues.put("IsThirdParty", reaisons.get(i).getIsThirdParty());
                contentValues.put("Designation", reaisons.get(i).getDesignation());
                idInsert = db.insert("employees", null, contentValues);


            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return idInsert;
    }

    public List<DropDownsModel> GetEmpolyee() {

        Cursor res = null;
        List<DropDownsModel> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<DropDownsModel>();
            //    list.add(new DropDownsModel("-1","Select employee"));
            db = this.getReadableDatabase();
            res = db.rawQuery("select * from employees ", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                DropDownsModel maDoctype = new DropDownsModel();
                maDoctype.setId(res.getString(res.getColumnIndex("Code")));
                maDoctype.setName(res.getString(res.getColumnIndex("EmployeeName")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<Model_IntmateToo> GetEmpolyee_ForIntimateToo() {

        Cursor res = null;
        List<Model_IntmateToo> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<Model_IntmateToo>();

            db = this.getReadableDatabase();
            res = db.rawQuery("select * from employees ORDER BY EmployeeName ASC;", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                Model_IntmateToo maDoctype = new Model_IntmateToo();
                maDoctype.setCode(res.getString(res.getColumnIndex("Code")));
                maDoctype.setName(res.getString(res.getColumnIndex("EmployeeName")));
                maDoctype.setDesignation(res.getString(res.getColumnIndex("Designation")));
                maDoctype.setIsThird(res.getString(res.getColumnIndex("IsThirdParty")));
                maDoctype.setStatus(0);

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    public List<Model_IntmateToo> GetEmpolyee_ForDriver_Techician() {

        Cursor res = null;
        List<Model_IntmateToo> list = null;
        SQLiteDatabase db = null;
        try {
            list = new ArrayList<Model_IntmateToo>();

            db = this.getReadableDatabase();
            res = db.rawQuery("select * from employees WHERE IsThirdParty = 'true' ORDER BY EmployeeName ASC ;", null);
            res.moveToFirst();

            Model_IntmateToo maDoctype1 = new Model_IntmateToo("-1", "Select Employee", "Driver", "Yes", 1);
            list.add(maDoctype1);

            while (res.isAfterLast() == false) {
                Model_IntmateToo maDoctype = new Model_IntmateToo();
                maDoctype.setCode(res.getString(res.getColumnIndex("Code")));
                maDoctype.setName(res.getString(res.getColumnIndex("EmployeeName")));
                maDoctype.setDesignation(res.getString(res.getColumnIndex("Designation")));
                maDoctype.setIsThird(res.getString(res.getColumnIndex("IsThirdParty")));
                maDoctype.setStatus(0);

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            db.close();
        }
        return list;
    }

    //TODO:====================================================================================================
    public int checkcountoutbox() {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor mCount = db.rawQuery("select count(*) from outbox", null);
        int count = 0;
        if (mCount.moveToFirst()) count = mCount.getInt(0);
        mCount.close();
        db.close();

        return count;
    }

    //TODO:====================================================================================================
    public boolean UpdateQaplan(int id, String serverid) {
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues data = new ContentValues();
        data.put("QVTP_Server_id", serverid);


        return db.update("qavan_TourPlanner", data, "id=" + id, null) > 0;
    }

    public int checkdb() {
        SQLiteDatabase db = this.getReadableDatabase();
        int count = 0;
        try {

            Cursor mCount = db.rawQuery("select count(*) from dropdowns_Territory", null);
            mCount.moveToFirst();
            count = mCount.getInt(0);
            mCount.close();
        } catch (Exception e) {

        } finally {
            if (db != null)
                db.close();
        }
        return count;
    }

    public int getmaxiumid() {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor mCount = db.rawQuery("SELECT * \n" +
                "    FROM    qavan_TourPlanner\n" +
                "    WHERE   ID = (SELECT MAX(ID)  FROM qavan_TourPlanner);", null);
        int count = 0;
        if (mCount.moveToFirst()) count = mCount.getInt(0);

        mCount.close();
        db.close();

        return count;
    }

    public int checkofsent() {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor mCount = db.rawQuery("select count(*) from sentitems", null);
        int count = 0;
        if (mCount.moveToFirst()) count = mCount.getInt(0);

        mCount.close();
        db.close();
        return count;
    }

    public int GetMa_Tcp_Id(String id) {
        Log.d("Search Value", id);

        Cursor res = null;
        int list = 0;
        try {


            SQLiteDatabase db = this.getReadableDatabase();
            res = db.rawQuery("select * from ma_tcp WHERE Server_TCP_code='" + id + "'", null);
            //  Log.d("Query", String.valueOf(res));
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                list = res.getInt(res.getColumnIndex("id"));
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
        }
        return list;
    }

    public int GetMa_Tcp_Retailsite_Id(String id, String CostCentreID) {
        Log.d("Search Value", id);

        Cursor res = null;
        int list = 0;
        try {


            SQLiteDatabase db = this.getReadableDatabase();
            res = db.rawQuery("select * from ma_tcp_retailsites WHERE Server_TCP_code='" + id + "' and CostCentreID='" + CostCentreID + "'", null);
            //  Log.d("Query", String.valueOf(res));
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                list = res.getInt(res.getColumnIndex("id"));
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
        }
        return list;
    }


    //====================================================================================================
    //====================================================================================================


    //=======================================GET DATA FROM================================================


    //==============================================Get All Data=========================================

    /*

    public List<DropDownsModel> gettourterritory() {

        Cursor res = null;
        List<DropDownsModel> list = null;
        try {
            list = new ArrayList<DropDownsModel>();
            SQLiteDatabase db = this.getReadableDatabase();
            res = db.rawQuery("select * from dropdowns_Territory", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                DropDownsModel maDoctype = new DropDownsModel();
                maDoctype.setId(res.getInt(res.getColumnIndex("Territory_id")));
                maDoctype.setName(res.getString(res.getColumnIndex("Name")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
        }
        return list;
    }

    public List<DropDownsModel> gettourqavan() {

        Cursor res = null;
        List<DropDownsModel> list = null;
        try {
            list = new ArrayList<DropDownsModel>();
            SQLiteDatabase db = this.getReadableDatabase();
            res = db.rawQuery("select * from dropdowns_QAVan", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                DropDownsModel maDoctype = new DropDownsModel();
                maDoctype.setId(res.getInt(res.getColumnIndex("QAVan_id")));
                maDoctype.setName(res.getString(res.getColumnIndex("Name")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
        }
        return list;
    }

    public List<DropDownsModel> gettoursequence() {

        Cursor res = null;
        List<DropDownsModel> list = null;
        try {
            list = new ArrayList<DropDownsModel>();
            SQLiteDatabase db = this.getReadableDatabase();
            res = db.rawQuery("select * from dropdowns_Sequence", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                DropDownsModel maDoctype = new DropDownsModel();
                maDoctype.setId(res.getInt(res.getColumnIndex("Sequence_id")));
                maDoctype.setName(res.getString(res.getColumnIndex("Name")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
        }
        return list;
    }

    public List<DropDownsModel> gettourreason() {

        Cursor res = null;
        List<DropDownsModel> list = null;
        try {
            list = new ArrayList<DropDownsModel>();
            SQLiteDatabase db = this.getReadableDatabase();
            res = db.rawQuery("select * from dropdowns_VisitReason", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                DropDownsModel maDoctype = new DropDownsModel();
                maDoctype.setId(res.getInt(res.getColumnIndex("Reason_id")));
                maDoctype.setName(res.getString(res.getColumnIndex("Name")));

                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
        }
        return list;
    }*/

//======================================================================================================================================


    public Long SetStatusTCP(int TCPid, int sstatus) {
        String strStatus = "";
        if (CommonUtilities.getS_is_sync(sstatus) <= 0) {
            strStatus = strStatus + " and s_is_sync = -1 ";
        }
        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;
        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("Status", CommonUtilities.getStatusStr(sstatus));
            contentValues.put("s_status", sstatus);
            if (sstatus == 200) {
                contentValues.put("ApprovedComments", "");
                contentValues.put("ApprovedDate", "");
            }

            if (CommonUtilities.getS_is_sync(sstatus) <= 0) {
                contentValues.put("s_is_sync", "-1");
            } else {
                contentValues.put("s_is_sync", "1");
            }
            int NumOfRowsUpdated = db.update("ma_tcp", contentValues, "id =" + TCPid, null);
            if (NumOfRowsUpdated > 0) idInsert = new Long(TCPid);

            Log.d("", "");
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return idInsert;

    }

    public void SetsStatusTCPRetailSite(int MA_TCP_RetailSite_id, int sstatus) {
        String strStatus = "";
        SQLiteDatabase db = this.getReadableDatabase();

        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("s_status", sstatus);
            if (sstatus == TCP_STATUS_RETAIL_SITE.FINALIZED_SYNCED || sstatus == TCP_STATUS_RETAIL_SITE.FINALIZED_REVIEWED_SYNCED) {
                contentValues.put("s_is_sync", "1");
            }
            int NumOfRowsUpdated = db.update("ma_tcp_retailsites", contentValues, "id =" + MA_TCP_RetailSite_id, null);


            Log.d("SetsStatusTCPRetailSite", "NumofRowsUpdated=" + NumOfRowsUpdated);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }

    public void SetStatusTCPRetailSite(int MA_TCP_RetailSite_id, int status) {
        SQLiteDatabase db = this.getReadableDatabase();
        String s_status = status + "";
        try {
            //  if (status == TCP_STATUS_RETAIL_SITE.FINALIZED_SYNCED || status== TCP_STATUS_RETAIL_SITE.FINALIZED_REVIEWED_SYNCED)
            //     s_status = s_status + " AND s_is_sync = 1 ";

            String UpdateTCPStatus = "UPDATE ma_tcp_retailsites SET s_status = " + status + " and s_is_sync=1 WHERE id=" + MA_TCP_RetailSite_id + "";
            db.execSQL(UpdateTCPStatus);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }


    public void deleteTCP(int TCPid) {
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            String deleteQueryMetterReading = "DELETE FROM ma_meterreadings where MA_TCP_ID=" + TCPid + "";
            db.execSQL(deleteQueryMetterReading);
            String deleteQueryTankDips = "DELETE FROM ma_tankdips where MA_TCP_ID=" + TCPid + "";
            db.execSQL(deleteQueryTankDips);
            String deleteQueryTcpRetailsites = "DELETE FROM ma_tcp_retailsites where MA_TCP_ID=" + TCPid + "";
            db.execSQL(deleteQueryTcpRetailsites);
            String deleteQuerySalesData = "DELETE FROM ma_salesdata where MA_TCP_ID=" + TCPid + "";
            db.execSQL(deleteQuerySalesData);
            String deleteQueryStockReconsiliation = "DELETE FROM ma_stockreconciliation where MA_TCP_ID=" + TCPid + "";
            db.execSQL(deleteQueryStockReconsiliation);
            String deleteQueryGIMain = "DELETE FROM ma_GI_Main where MA_TCP_ID=" + TCPid + "";
            db.execSQL(deleteQueryGIMain);
            String deleteQueryGIStandard = "DELETE FROM ma_GI_Standard where MA_TCP_ID=" + TCPid + "";
            db.execSQL(deleteQueryGIStandard);
            String deleteQueryGIEqi = "DELETE FROM ma_GI_Equipment where MA_TCP_ID=" + TCPid + "";
            db.execSQL(deleteQueryGIEqi);
            String deleteQueryTCP = "DELETE FROM ma_tcp where id=" + TCPid + "";
            db.execSQL(deleteQueryTCP);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }

    public String getLogoutMsg() {
        String msg = "";
        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        try {


            res = db.rawQuery("select * from ma_tcp where s_is_sync < 0", null);
            res.moveToFirst();
            if (res.isAfterLast() == false) {
                msg = msg + "Pending TCPs \n";
            }

            res = db.rawQuery("select * from ma_tcp_retailsites where s_is_sync < 0", null);
            res.moveToFirst();
            if (res.isAfterLast() == false) {
                msg = msg + "Pending Records (Retail Sites) \n";
            }

            res = db.rawQuery("select * from ma_meterreadings where s_is_sync < 0", null);
            res.moveToFirst();
            if (res.isAfterLast() == false) {
                msg = msg + "Pending Records (Meter Readings)\n";
            }

            res = db.rawQuery("select * from ma_tankdips where s_is_sync < 0", null);
            res.moveToFirst();
            if (res.isAfterLast() == false) {
                msg = msg + "Pending Records (Tank Dips)\n";
            }

            res = db.rawQuery("select * from ma_salesdata where s_is_sync < 0", null);
            res.moveToFirst();
            if (res.isAfterLast() == false) {
                msg = msg + "Pending Records (Sales Records)\n";
            }

            res = db.rawQuery("select * from ma_GI_Main where s_is_sync < 0", null);
            res.moveToFirst();
            if (res.isAfterLast() == false) {
                msg = msg + "Pending Records (General Inspection)\n";
            }

            res = db.rawQuery("select * from ma_GI_Standard where s_is_sync < 0", null);
            res.moveToFirst();
            if (res.isAfterLast() == false) {
                msg = msg + "Pending Records (General Inspection - Standard) \n";
            }

            res = db.rawQuery("select * from ma_GI_Equipment where s_is_sync < 0", null);
            res.moveToFirst();
            if (res.isAfterLast() == false) {
                msg = msg + "Pending Records (General Inspection - Equipment) \n";
            }
            res = db.rawQuery("select * from FAMain where s_is_sync <= 0", null);
            res.moveToFirst();
            if (res.isAfterLast() == false) {
                msg = msg + "Pending Records (Fraudulent Activity) \n" + res.getColumnIndex("FANumber");
            }

            // TODO: All files are upload or Not

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            if (db != null)
                db.close();
        }
        return msg;
    }


    public void delMARetailSite_inspection(MA_TCP_RetailSites ma_tcp_retailSites) {
        Long rtsid = Long.parseLong(ma_tcp_retailSites.getId() + "");
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            String deleteQueryMetterReading = "UPDATE ma_meterreadings set Closing = '0' and s_status = 0 where MA_TCP_Retailsites_ID=" + rtsid + "";
            db.execSQL(deleteQueryMetterReading);
            String deleteQueryTankDips = "UPDATE ma_tankdips set Dip_Stock_M = '0' and Dip_Stock_L ='0' and s_status = 0  where MA_TCP_Retailsites_ID=" + rtsid + "";
            db.execSQL(deleteQueryTankDips);
            String deleteQuerySalesData = "UPDATE ma_salesdata set Selection = '0' and s_status = 0 where MA_TCP_Retailsites_ID=" + rtsid + "";
            db.execSQL(deleteQuerySalesData);
            String deleteQueryStockReconsiliation = "DELETE FROM ma_stockreconciliation where MA_TCP_Retailsites_ID=" + rtsid + "";
            db.execSQL(deleteQueryStockReconsiliation);
            String deleteQueryGIMain = "UPDATE ma_GI_Main SET Comments = '' and userAck = '' and s_status = 0  where MA_TCP_Retailsites_ID=" + rtsid + "";
            db.execSQL(deleteQueryGIMain);
            String deleteQueryGIStandard = "UPDATE ma_GI_Standard SET Points ='' and ConditionCode = '' and Condition = '' and ActionPlanCode = '' and ActionPlan='' and Remarks = '' and Att_path = '' and Att_server_path = ''  and s_status = 0  where MA_TCP_Retailsites_ID=" + rtsid + "";
            db.execSQL(deleteQueryGIStandard);
            String deleteQueryGIEqi = "UPDATE ma_GI_Equipment set FixAssetCode = ''  and FixAssetDesc = '' and Ownership = '' and ItemChecked= 'false' and Remarks = ''  and Att_path = '' and Att_server_path = '' and s_status = 0  where  MA_TCP_Retailsites_ID=" + rtsid + "";
            db.execSQL(deleteQueryGIEqi);
            String deleteQueryMATCP_Retail_Sites = "UPDATE ma_tcp_retailsites set Status_IE_1 =  0  and Status_IE_2 =  0  and Status_IE_3 =  0 and Status_IE_4 =  0 and Status_IE_5 =  0  and s_status = 100  where  id=" + rtsid + "";
            db.execSQL(deleteQueryGIEqi);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }

    public int checkAllreadyavailableTCP(String id) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor mCount = db.rawQuery("select count(*) from ma_tcp where Server_tcp_code='" + id + "'", null);
        int count = 0;
        if (mCount.moveToFirst()) count = mCount.getInt(0);

        mCount.close();
        db.close();

        return count;
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        // TODO Auto-generated method stub
        onCreate(db);
    }

    public void initDB() {
        SQLiteDatabase db = this.getReadableDatabase();

    }

    public ArrayList<Cursor> getData(String Query) {
        //get writable database
        SQLiteDatabase sqlDB = this.getWritableDatabase();
        String[] columns = new String[]{"message"};
        //an array list of cursor to save two cursors one has results from the query
        //other cursor stores error message if any errors are triggered
        ArrayList<Cursor> alc = new ArrayList<Cursor>(2);
        MatrixCursor Cursor2 = new MatrixCursor(columns);
        alc.add(null);
        alc.add(null);

        try {
            String maxQuery = Query;
            //execute the query results will be save in Cursor c
            Cursor c = sqlDB.rawQuery(maxQuery, null);

            //add value to cursor2
            Cursor2.addRow(new Object[]{"Success"});

            alc.set(1, Cursor2);
            if (null != c && c.getCount() > 0) {

                alc.set(0, c);
                c.moveToFirst();

                return alc;
            }
            return alc;
        } catch (SQLException sqlEx) {
            Log.d("printing exception", sqlEx.getMessage());
            //if any exceptions are triggered save the error message to cursor an return the arraylist
            Cursor2.addRow(new Object[]{"" + sqlEx.getMessage()});
            alc.set(1, Cursor2);
            return alc;
        } catch (Exception ex) {
            Log.d("printing exception", ex.getMessage());

            //if any exceptions are triggered save the error message to cursor an return the arraylist
            Cursor2.addRow(new Object[]{"" + ex.getMessage()});
            alc.set(1, Cursor2);
            return alc;
        } finally {
            if (sqlDB != null)
                sqlDB.close();
        }
    }

    public void insertDummyData() {

        insertDocTypesDummyData();
        insertMA_TCPDummyData();
        insertMA_TANKDIPSDummyData();
        insertMA_MeterReadingMDummyData();

        insertSalesDataDummyData();
        insertStockReceonciliationDummyData();
        insertDummyGeneralInspection();
    }

    public void insertDummyGeneralInspection() {


        MA_GI_Main ma_gi_main = new MA_GI_Main();
        ma_gi_main.setMA_TCP_ID(100);
        ma_gi_main.setServer_TCP_code("343");
        ma_gi_main.setMA_TCP_RetailSite_id(23232);
        ma_gi_main.setCostCentreID("ab123");
        ma_gi_main.setComments("in progress");
        insertGeneralInspection(ma_gi_main);


        for (int i = 0; i < 5; i++) {
            MA_GI_Standard ma_gi_standard = new MA_GI_Standard();

            ma_gi_standard.setMA_TCP_ID(ma_gi_main.getMA_TCP_ID());
            ma_gi_standard.setMA_TCP_RetailSite_id(ma_gi_main.getMA_TCP_RetailSite_id());
            ma_gi_standard.setPartName("101" + 1);
            ma_gi_standard.setCategoryName("");
            insertGeneralInspectionStandard(ma_gi_standard);
        }

        for (int i = 0; i < 5; i++) {
            MA_GI_Equipment ma_gi_equipment = new MA_GI_Equipment();
            ma_gi_equipment.setMA_TCP_ID(ma_gi_main.getMA_TCP_ID());
            ma_gi_equipment.setMainCode("1000");
            ma_gi_equipment.setMainDesc("main dec");
            ma_gi_equipment.setFixAssetCode("123");
            ma_gi_equipment.setFixAssetDesc("asset dec");
            ma_gi_equipment.setOwnership("own");
            ma_gi_equipment.setItemChecked("item checked");
            ma_gi_equipment.setRemarks("done");


            insertGeneralInspectionEquipment(ma_gi_equipment);
        }


    }

    public Long insertGeneralInspection(MA_GI_Main ma_gi_main) {


        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;
        try {

//            "CREATE TABLE `ma_GI_Main` (\n" +
//                    "  `id` INTEGER(10) NOT NULL PRIMARY KEY,\n" +
//                    "  `MA_TCP_ID` INTEGER(10) DEFAULT NULL,\n" +
//                    "  `Server_TCP_code` TEXT(20) DEFAULT NULL,\n" +
//                    "  `MA_TCP_RetailSite_id` INTEGER(20) DEFAULT NULL,\n" +
//                    "  `CostCentreID` TEXT(20) DEFAULT NULL,\n" +
//                    "  `Comments` TEXT(1000) DEFAULT NULL,\n" +
//                    "  `userAck` TEXT(1000) DEFAULT NULL,\n" +
//                    "  `UA_img_id` TEXT(50) DEFAULT NULL,\n" +
//                    "  `UA_img_file` TEXT(100) DEFAULT NULL,\n" +
//                    "  `UA_img_path` TEXT(200) DEFAULT NULL,\n" +
//                    "  `UA_server_id` TEXT(50) DEFAULT NULL,\n" +
//                    "  `UA_server_path` TEXT(200) DEFAULT NULL,\n" +
//                    "    \n" +
//                    "  `Status` TEXT(20) DEFAULT NULL,\n" +
//                    "  `s_date` DATETIME DEFAULT CURRENT_TIMESTAMP,\n" +
//                    "  `s_is_sync` INTEGER(20) DEFAULT NULL,\n" +
//                    "  `s_status` INTEGER(20) DEFAULT NULL,\n" +
//                    "  `s_long` TEXT(20) DEFAULT NULL,\n" +
//                    "  `s_lat` TEXT(20) DEFAULT NULL\n" +
//                    ") ;"
            ContentValues contentValues = new ContentValues();
            contentValues.put("MA_TCP_ID", ma_gi_main.getMA_TCP_ID());
            contentValues.put("Server_TCP_code", ma_gi_main.getServer_TCP_code());
            contentValues.put("MA_TCP_RetailSite_id", ma_gi_main.getMA_TCP_RetailSite_id());
            contentValues.put("CostCentreID", ma_gi_main.getCostCentreID());
            contentValues.put("Comments", ma_gi_main.getComments());
            contentValues.put("UA_img_id", ma_gi_main.getUA_img_id());
            contentValues.put("UA_img_file", ma_gi_main.getUA_img_file());
            contentValues.put("UA_img_path", ma_gi_main.getUA_img_path());
            contentValues.put("UA_server_id", ma_gi_main.getUA_server_id());
            contentValues.put("UA_server_path", ma_gi_main.getUA_server_path());
            contentValues.put("Status", ma_gi_main.getStatus());
            contentValues.put("s_date", ma_gi_main.getS_date());
            contentValues.put("s_is_sync", ma_gi_main.getS_is_sync());
            contentValues.put("s_status", ma_gi_main.getS_status());
            contentValues.put("s_long", ma_gi_main.getS_long());
            contentValues.put("s_lat", ma_gi_main.getS_lat());

            idInsert = db.insert("ma_GI_Main", null, contentValues);
            Log.d("", "");
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return idInsert;
    }

    public Long insertGeneralInspectionStandard(MA_GI_Standard ma_gi_standard) {

        Long idInsert = -1L;
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("MA_TCP_ID", ma_gi_standard.getMA_TCP_ID());
            contentValues.put("Server_TCP_code", ma_gi_standard.getServer_TCP_code());
            contentValues.put("MA_TCP_RetailSite_id", ma_gi_standard.getMA_TCP_RetailSite_id());
            contentValues.put("CostCentreID", ma_gi_standard.getCostCentreID());
            contentValues.put("MA_GI_id", ma_gi_standard.getMA_GI_id());
            contentValues.put("CategoryID", ma_gi_standard.getCategoryID());
            contentValues.put("CategoryName", ma_gi_standard.getCategoryName());
            contentValues.put("ParticularCode", ma_gi_standard.getParticularCode());
            contentValues.put("PartName", ma_gi_standard.getPartName());
            contentValues.put("Points", ma_gi_standard.getPoints());
            contentValues.put("Condition", ma_gi_standard.getCondition());
            contentValues.put("ActionPlan", ma_gi_standard.getActionPlan());
            contentValues.put("Remarks", ma_gi_standard.getRemarks());
            contentValues.put("Att_id", ma_gi_standard.getAtt_id());
            contentValues.put("Att_file", ma_gi_standard.getAtt_file());
            contentValues.put("Att_path", ma_gi_standard.getAtt_path());
            contentValues.put("Att_server_id", ma_gi_standard.getAtt_server_id());
            contentValues.put("Att_server_path", ma_gi_standard.getAtt_server_path());
            contentValues.put("Status", ma_gi_standard.getStatus());
            contentValues.put("s_date", ma_gi_standard.getS_date());
            contentValues.put("s_is_sync", ma_gi_standard.getS_is_sync());
            contentValues.put("s_status", ma_gi_standard.getS_status());
            contentValues.put("s_long", ma_gi_standard.getS_long());
            contentValues.put("s_lat", ma_gi_standard.getS_lat());

            idInsert = db.insert("ma_GI_Standard", null, contentValues);
            Log.d("", "");
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return idInsert;
    }


    public void insertGeneralInspectionEquipment(MA_GI_Equipment ma_gi_equipment) {


        SQLiteDatabase db = this.getReadableDatabase();
        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("MA_TCP_ID", ma_gi_equipment.getMA_TCP_ID());
            contentValues.put("Server_TCP_code", ma_gi_equipment.getServer_TCP_code());
            contentValues.put("MA_TCP_RetailSite_id", ma_gi_equipment.getMA_TCP_RetailSite_id());
            contentValues.put("CostCentreID", ma_gi_equipment.getCostCentreID());
            contentValues.put("MA_GI_id", ma_gi_equipment.getMA_GI_id());
            contentValues.put("MainCode", ma_gi_equipment.getMainCode());
            contentValues.put("MainDesc", ma_gi_equipment.getMainDesc());
            contentValues.put("FixAssetCode", ma_gi_equipment.getFixAssetCode());
            contentValues.put("FixAssetDesc", ma_gi_equipment.getFixAssetDesc());
            contentValues.put("Ownership", ma_gi_equipment.getOwnership());
            contentValues.put("ItemChecked", ma_gi_equipment.getItemChecked());
            contentValues.put("Remarks", ma_gi_equipment.getRemarks());
            contentValues.put("Att_id", ma_gi_equipment.getAtt_id());
            contentValues.put("Att_file", ma_gi_equipment.getAtt_file());
            contentValues.put("Att_path", ma_gi_equipment.getAtt_path());
            contentValues.put("Att_server_id", ma_gi_equipment.getAtt_server_id());
            contentValues.put("Att_server_path", ma_gi_equipment.getAtt_server_path());
            contentValues.put("SerialNo", ma_gi_equipment.getSerialNo());
            contentValues.put("Status", ma_gi_equipment.getStatus());
            contentValues.put("s_date", ma_gi_equipment.getS_date());
            contentValues.put("s_is_sync", ma_gi_equipment.getS_is_sync());
            contentValues.put("s_status", ma_gi_equipment.getS_status());
            contentValues.put("s_long", ma_gi_equipment.getS_long());
            contentValues.put("s_lat", ma_gi_equipment.getS_lat());

            Long idInsert = db.insert("ma_GI_Equipment", null, contentValues);
            Log.d("", "");
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }

    private void insertSalesDataDummyData() {

        SQLiteDatabase db = null;

        try {
            for (int i = 0; i < 5; i++) {
                db = this.getReadableDatabase();
                String insetDocType = "INSERT INTO `ma_salesdata` (\n" +
                        "  `MA_TCP_ID`,\n" +
                        "  `MA_TCP_Retailsites_id`,\n" +
                        "  `Type`,\n" +
                        "  `DocNo`,\n" +
                        "  `DocDate`,\n" +
                        "  `Product`,\n" +
                        "  `QTY`,\n" +
                        "  `TankLorryNo`,\n" +
                        "  `Selection`,\n" +
                        "  `Server_TCP_code`\n" +
                        ") \n" +
                        "VALUES\n" +
                        "  (\n" +
                        "    '50" + i + "',\n" +
                        "    '50" + i + "',\n" +
                        "    '001" + i + "',\n" +
                        "    '123" + i + "',\n" +
                        "    '2017-01-01',\n" +
                        "    'Petrol',\n" +
                        "    '5',\n" +
                        "    '50',\n" +
                        "    '0',\n" +
                        "    '123'\n" +
                        "  ) ;";
                Log.d(TAG, insetDocType);
                db.execSQL(insetDocType);
                db.close();
            }
        } catch (Exception e) {
            Log.e("DB", e.getMessage());
        } finally {

            if (db != null)
                db.close();
        }


    }

    private void insertStockReceonciliationDummyData() {

        SQLiteDatabase db = null;

        try {
            for (int i = 0; i < 5; i++) {
                db = this.getReadableDatabase();
                String insetDocType = "INSERT INTO `ma_stockreconciliation` (\n" +
                        "  `MA_TCP_ID`,\n" +
                        "  `MA_TCP_Retailsites_id`,\n" +
                        "  `Type`,\n" +
                        "  `OpeningStock`,\n" +
                        "  `StockRecept`,\n" +
                        "  `Sale`,\n" +
                        "  `BalanceStock`,\n" +
                        "  `DipStock`,\n" +
                        "  `GainLoss`,\n" +
                        "  `ReconciliationStatus`\n" +
                        ") \n" +
                        "VALUES\n" +
                        "  (\n" +
                        "    '50" + i + "',\n" +
                        "    '50" + i + "',\n" +
                        "    'Petrol',\n" +
                        "    '100" + i + "',\n" +
                        "    '200',\n" +
                        "    '50',\n" +
                        "    '150',\n" +
                        "    '50',\n" +
                        "    '50',\n" +
                        "    'Status'\n" +
                        "  ) ;";
                Log.d(TAG, insetDocType);
                db.execSQL(insetDocType);
                db.close();
            }
        } catch (Exception e) {
            Log.e("DB", e.getMessage());
        } finally {

            if (db != null)
                db.close();
        }


        try {
            for (int i = 0; i < 5; i++) {
                db = this.getReadableDatabase();
                String insetDocType = "INSERT INTO `ma_stockreconciliation` (\n" +
                        "  `MA_TCP_ID`,\n" +
                        "  `MA_TCP_Retailsites_id`,\n" +
                        "  `Type`,\n" +
                        "  `OpeningStock`,\n" +
                        "  `StockRecept`,\n" +
                        "  `Sale`,\n" +
                        "  `BalanceStock`,\n" +
                        "  `DipStock`,\n" +
                        "  `GainLoss`,\n" +
                        "  `ReconciliationStatus`\n" +
                        ") \n" +
                        "VALUES\n" +
                        "  (\n" +
                        "    '50" + i + "',\n" +
                        "    '50" + i + "',\n" +
                        "    'Diesel',\n" +
                        "    '100" + i + "',\n" +
                        "    '200',\n" +
                        "    '50',\n" +
                        "    '150',\n" +
                        "    '50',\n" +
                        "    '50',\n" +
                        "    'Status'\n" +
                        "  ) ;";
                Log.d(TAG, insetDocType);
                db.execSQL(insetDocType);
                db.close();
            }
        } catch (Exception e) {
            Log.e("DB", e.getMessage());
        } finally {

            if (db != null)
                db.close();
        }


        try {
            for (int i = 0; i < 5; i++) {
                db = this.getReadableDatabase();
                String insetDocType = "INSERT INTO `ma_stockreconciliation` (\n" +
                        "  `MA_TCP_ID`,\n" +
                        "  `MA_TCP_Retailsites_id`,\n" +
                        "  `Type`,\n" +
                        "  `OpeningStock`,\n" +
                        "  `StockRecept`,\n" +
                        "  `Sale`,\n" +
                        "  `BalanceStock`,\n" +
                        "  `DipStock`,\n" +
                        "  `GainLoss`,\n" +
                        "  `ReconciliationStatus`\n" +
                        ") \n" +
                        "VALUES\n" +
                        "  (\n" +
                        "    '50" + i + "',\n" +
                        "    '50" + i + "',\n" +
                        "    'High Octane',\n" +
                        "    '100" + i + "',\n" +
                        "    '200',\n" +
                        "    '50',\n" +
                        "    '150',\n" +
                        "    '50',\n" +
                        "    '50',\n" +
                        "    'Status'\n" +
                        "  ) ;";
                Log.d(TAG, insetDocType);
                db.execSQL(insetDocType);
                db.close();
            }
        } catch (Exception e) {
            Log.e("DB", e.getMessage());
        } finally {

            if (db != null)
                db.close();
        }


    }

    private void insertMA_TANKDIPSDummyData() {
        //inserting tank dips
        MA_TANKDIPS tankdips = new MA_TANKDIPS();
        tankdips.setMA_TCP_ID(100);
        tankdips.setMA_TCP_Retailsites_id("207");
        tankdips.setProduct_code("123");
        tankdips.setProduct_desc("Petrol");
        tankdips.setTank_code("222");
        tankdips.setTank_desc("Tank101");
        insertMA_TankDips(tankdips);

        tankdips = new MA_TANKDIPS();
        tankdips.setMA_TCP_ID(100);
        tankdips.setMA_TCP_Retailsites_id("207");
        tankdips.setProduct_code("123");
        tankdips.setProduct_desc("Petrol");
        tankdips.setTank_code("222");
        tankdips.setTank_desc("Tank101");
        insertMA_TankDips(tankdips);

        tankdips = new MA_TANKDIPS();
        tankdips.setMA_TCP_ID(100);
        tankdips.setMA_TCP_Retailsites_id("207");
        tankdips.setProduct_code("123");
        tankdips.setProduct_desc("Petrol");
        tankdips.setTank_code("223");
        tankdips.setTank_desc("Tank102");
        insertMA_TankDips(tankdips);


        tankdips = new MA_TANKDIPS();
        tankdips.setMA_TCP_ID(100);
        tankdips.setMA_TCP_Retailsites_id("207");
        tankdips.setProduct_code("567");
        tankdips.setProduct_desc("Diesel");
        tankdips.setTank_code("333");
        tankdips.setTank_desc("Tank102");
        insertMA_TankDips(tankdips);

        tankdips = new MA_TANKDIPS();
        tankdips.setMA_TCP_ID(100);
        tankdips.setMA_TCP_Retailsites_id("207");
        tankdips.setProduct_code("567");
        tankdips.setProduct_desc("Diesel");
        tankdips.setTank_code("333");
        tankdips.setTank_desc("Tank102");
        insertMA_TankDips(tankdips);

    }

    public void insertMA_TankDips(MA_TANKDIPS ma_tankdips) {

//        "CREATE TABLE IF NOT EXISTS `ma_tankdips` (\n" +
//                "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//                "  `MA_TCP_ID` Integer(10) DEFAULT NULL,\n" +
//                "  `Server_TCP_code` Text(20) DEFAULT NULL,\n" +
//                "  `MA_TCP_Retailsites_id` Text(20) DEFAULT NULL,\n" +
//                "  `CostCentreID` Text(20) DEFAULT NULL,\n" +
//                "  `Product_code` Text(20) DEFAULT NULL,\n" +
//                "  `Product_desc` Text(20) DEFAULT NULL,\n" +
//                "  `Tank_code` Text(20) DEFAULT NULL,\n" +
//                "  `Tank_desc` Text(20) DEFAULT NULL,\n" +
//                "  `Dip_Stock_M` Text(20) DEFAULT NULL,\n" +
//                "  `Dip_Stock_L` Text(20) DEFAULT NULL,\n" +
//                "  `StockType` Text(20) DEFAULT NULL,\n" +
//                "  `s_date` datetime DEFAULT CURRENT_TIMESTAMP,\n" +
//                "  `s_is_sync` Integer(20) DEFAULT NULL,\n" +
//                "  `s_status` Integer(20) DEFAULT NULL,\n" +
//                "  `s_long` Text(20) DEFAULT NULL,\n" +
//                "  `s_lat` Text(20) DEFAULT NULL\n" +
//                ") ;"


        SQLiteDatabase db = this.getReadableDatabase();
        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("MA_TCP_ID", ma_tankdips.getMA_TCP_ID());
            contentValues.put("Server_TCP_code", ma_tankdips.getServer_TCP_code());
            contentValues.put("MA_TCP_Retailsites_id", ma_tankdips.getMA_TCP_Retailsites_id());
            contentValues.put("CostCentreID", ma_tankdips.getCostCentreID());
            contentValues.put("Product_code", ma_tankdips.getProduct_code());
            contentValues.put("Product_desc", ma_tankdips.getProduct_desc());
            contentValues.put("Tank_code", ma_tankdips.getTank_code());
            contentValues.put("Tank_desc", ma_tankdips.getTank_desc());
            contentValues.put("Dip_Stock_M", ma_tankdips.getDip_Stock_M());
            contentValues.put("Dip_Stock_L", ma_tankdips.getDip_Stock_L());
            contentValues.put("StockType", ma_tankdips.getStockType());
            contentValues.put("s_date", ma_tankdips.getS_date());
            contentValues.put("s_is_sync", ma_tankdips.getS_is_sync());
            contentValues.put("s_status", ma_tankdips.getS_status());
            contentValues.put("s_long", ma_tankdips.getS_long());
            contentValues.put("s_lat", ma_tankdips.getS_lat());
            Long idInsert = db.insert("ma_tankdips", null, contentValues);
            Log.d("", "");
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }


    public void insertMA_MeterReading(MA_Meterreading ma_meterreading) {
//        "CREATE TABLE IF NOT EXISTS  `ma_meterreadings` (\n" +
//                "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//                "  `MA_TCP_ID` Integer(10) DEFAULT NULL,\n" +
//                "  `Server_tcp_code` Text(20) DEFAULT NULL,\n" +
//                "  `CostCentreID` Text(20) DEFAULT NULL,\n" +
//                "  `Product_code` Text(20) DEFAULT NULL,\n" +
//                "  `Product_desc` Text(20) DEFAULT NULL,\n" +
//                "  `Tank_code` Text(20) DEFAULT NULL,\n" +
//                "  `Tank_desc` Text(20) DEFAULT NULL,\n" +
//                "  `Nozzel_Meter_code` Text(20) DEFAULT NULL,\n" +
//                "  `Nozzel_Meter_desc` Text(50) DEFAULT NULL,\n" +
//                "  `Nozzel_code` Text(20) DEFAULT NULL,\n" +
//                "  `Nozzel_desc` Text(20) DEFAULT NULL,\n" +
//                "  `Opening` Text(20) DEFAULT NULL,\n" +
//                "  `Closing` Text(20) DEFAULT NULL,\n" +
//                "  `Sale` Text(20) DEFAULT NULL,\n" +
//                "  `To_date` date DEFAULT NULL,\n" +
//                "  `Status` Text(20) DEFAULT NULL,\n" +
//                "  `s_date` datetime DEFAULT CURRENT_TIMESTAMP,\n" +
//                "  `s_is_sync` Integer(20) DEFAULT NULL,\n" +
//                "  `s_status` Integer(20) DEFAULT NULL,\n" +
//                "  `s_long` Text(20) DEFAULT NULL,\n" +
//                "  `s_lat` Text(20) DEFAULT NULL\n" +
//                ") ;"


        SQLiteDatabase db = this.getReadableDatabase();
        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("MA_TCP_ID", ma_meterreading.getMA_TCP_ID());
            contentValues.put("Server_tcp_code", ma_meterreading.getServer_tcp_code());
            contentValues.put("MA_TCP_Retailsites_id", ma_meterreading.getMA_TCP_Retailsites_id());
            contentValues.put("CostCentreID", ma_meterreading.getCostCentreID());
            contentValues.put("Product_code", ma_meterreading.getProduct_code());
            contentValues.put("Product_desc", ma_meterreading.getProduct_desc());
            contentValues.put("Tank_code", ma_meterreading.getTank_code());
            contentValues.put("Tank_desc", ma_meterreading.getTank_desc());
            contentValues.put("Nozzel_Meter_code", ma_meterreading.getNozzel_Meter_code());
            contentValues.put("Nozzel_Meter_desc", ma_meterreading.getNozzel_Meter_desc());
            contentValues.put("Nozzel_code", ma_meterreading.getNozzel_code());
            contentValues.put("Nozzel_desc", ma_meterreading.getNozzel_desc());
            contentValues.put("Opening", ma_meterreading.getOpening());
            contentValues.put("Closing", ma_meterreading.getClosing());
            contentValues.put("s_date", ma_meterreading.getS_date());
            contentValues.put("Sale", ma_meterreading.getSale());
            contentValues.put("To_date", ma_meterreading.getTo_date());
            contentValues.put("Status", ma_meterreading.getStatus());
            contentValues.put("s_is_sync", ma_meterreading.getS_is_sync());
            contentValues.put("s_status", ma_meterreading.getS_status());
            contentValues.put("s_long", ma_meterreading.getS_long());
            contentValues.put("s_lat", ma_meterreading.getS_lat());
            Long idInsert = db.insert("ma_meterreadings", null, contentValues);
            Log.d("", "");
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }

    private void insertMA_MeterReadingMDummyData() {


        for (int i = 0; i < 5; i++) {

            //Diesel


            MA_Meterreading meterNozzleReading2 = new MA_Meterreading();
            meterNozzleReading2.setMA_TCP_ID(100);
            meterNozzleReading2.setProduct_code("567");
            meterNozzleReading2.setProduct_desc("Diesel");
            meterNozzleReading2.setTank_code("333");
            meterNozzleReading2.setTank_desc("Tank102");
            meterNozzleReading2.setNozzel_Meter_code("123");
            meterNozzleReading2.setNozzel_Meter_desc("Nozal Des 123");
            meterNozzleReading2.setNozzel_code("abc123");
            meterNozzleReading2.setNozzel_desc("abc123");
            meterNozzleReading2.setOpening("200" + i);
            meterNozzleReading2.setClosing("300" + i);
            meterNozzleReading2.setNozzel_code("nozzle 101");
            meterNozzleReading2.setSale("100" + i);
            meterNozzleReading2.setTo_date("18-8-2015");
            meterNozzleReading2.setStatus("New");
            insertMA_MeterReading(meterNozzleReading2);

            MA_Meterreading meterNozzleReading = new MA_Meterreading();
            meterNozzleReading.setMA_TCP_ID(100);
            meterNozzleReading.setProduct_code("567");
            meterNozzleReading.setProduct_desc("Diesel");
            meterNozzleReading.setTank_code("335");
            meterNozzleReading.setTank_desc("Tank105");
            meterNozzleReading.setNozzel_Meter_code("121");
            meterNozzleReading.setNozzel_Meter_desc("Nozal Des 121");
            meterNozzleReading.setNozzel_code("abc121");
            meterNozzleReading.setNozzel_desc("abc121");
            meterNozzleReading.setOpening("200");
            meterNozzleReading.setClosing("300");
            meterNozzleReading.setNozzel_code("nozzle 101");
            meterNozzleReading.setSale("100");
            meterNozzleReading.setTo_date("18-8-2015");
            meterNozzleReading.setStatus("New");
            insertMA_MeterReading(meterNozzleReading);

            //Petrol
            MA_Meterreading meterNozzleReading1 = new MA_Meterreading();
            meterNozzleReading1.setMA_TCP_ID(100);
            meterNozzleReading1.setProduct_code("789");
            meterNozzleReading1.setProduct_desc("Petrol");
            meterNozzleReading1.setTank_code("444");
            meterNozzleReading1.setTank_desc("Tank103");
            meterNozzleReading1.setNozzel_Meter_code("124");
            meterNozzleReading1.setNozzel_Meter_desc("Nozal Des 124");
            meterNozzleReading1.setNozzel_code("abc124");
            meterNozzleReading1.setNozzel_desc("abc124");
            meterNozzleReading1.setOpening("200");
            meterNozzleReading1.setClosing("300");
            meterNozzleReading1.setNozzel_code("nozzle 101");
            meterNozzleReading1.setSale("100");
            meterNozzleReading1.setTo_date("18-8-2015");
            meterNozzleReading1.setStatus("New");
            insertMA_MeterReading(meterNozzleReading1);
        }

    }


    private void insertMA_TCP_RetailsitesDummyData(SQLiteDatabase db, String MA_TCP_ID) {

        try {
            //db = this.getReadableDatabase();
            String insetMa_tcp_retailsites = "INSERT INTO `ma_tcp_retailsites` (\n" +
                    "  `MA_TCP_ID`,\n" +
                    "  `CostCentreDesc`,\n" +
                    "  `Location`,\n" +
                    "  `District`,\n" +
                    "  `LastinspDate`\n" +
                    ") \n" +
                    "VALUES\n" +
                    "  (\n" +
                    "    " + MA_TCP_ID + ",\n" +
                    "    'CostCentreDesc',\n" +
                    "    'Location',\n" +
                    "    'District',\n" +
                    "    '07/27/2017'\n" +
                    "  ) ;";
            Log.d(TAG, insetMa_tcp_retailsites);
            db.execSQL(insetMa_tcp_retailsites);
            //   db.close();


            insetMa_tcp_retailsites = "INSERT INTO `ma_tcp_retailsites` (\n" +
                    "  `MA_TCP_ID`,\n" +
                    "  `CostCentreDesc`,\n" +
                    "  `Location`,\n" +
                    "  `District`,\n" +
                    "  `LastinspDate`\n" +
                    ") \n" +
                    "VALUES\n" +
                    "  (\n" +
                    "    '102',\n" +
                    "    'CostCentreDesc',\n" +
                    "    'Location',\n" +
                    "    'District',\n" +
                    "    '07/27/2017'\n" +
                    "  ) ;";
            Log.d(TAG, insetMa_tcp_retailsites);
            db.execSQL(insetMa_tcp_retailsites);


            insetMa_tcp_retailsites = "INSERT INTO `ma_tcp_retailsites` (\n" +
                    "  `MA_TCP_ID`,\n" +
                    "  `CostCentreDesc`,\n" +
                    "  `Location`,\n" +
                    "  `District`,\n" +
                    "  `LastinspDate`\n" +
                    ") \n" +
                    "VALUES\n" +
                    "  (\n" +
                    "    '103',\n" +
                    "    'CostCentreDesc',\n" +
                    "    'Location',\n" +
                    "    'District',\n" +
                    "    '07/27/2017'\n" +
                    "  ) ;";
            Log.d(TAG, insetMa_tcp_retailsites);
            db.execSQL(insetMa_tcp_retailsites);

            insetMa_tcp_retailsites = "INSERT INTO `ma_tcp_retailsites` (\n" +
                    "  `MA_TCP_ID`,\n" +
                    "  `CostCentreDesc`,\n" +
                    "  `Location`,\n" +
                    "  `District`,\n" +
                    "  `LastinspDate`\n" +
                    ") \n" +
                    "VALUES\n" +
                    "  (\n" +
                    "    '104',\n" +
                    "    'CostCentreDesc',\n" +
                    "    'Location',\n" +
                    "    'District',\n" +
                    "    '07/27/2017'\n" +
                    "  ) ;";

            Log.d(TAG, insetMa_tcp_retailsites);
            db.execSQL(insetMa_tcp_retailsites);
            //  db.close();


        } catch (Exception e) {
            Log.e("DB", e.getMessage());
        } finally {

            //if (db != null)
            //     db.close();
        }
    }

    private void insertDocTypesDummyData() {
        SQLiteDatabase db = null;
        try {
            for (int i = 0; i < 3; i++) {
                db = this.getReadableDatabase();

                String insetDocType = "INSERT INTO `ma_doctype` (\n" +
                        "  `DocID`,\n" +
                        "  `DocName`,\n" +
                        "  `AreaInchargeID`,\n" +
                        "  `AreaInchargeDesc`,\n" +
                        "  `PrevTcpCode`,\n" +
                        "  `PrevTcpDate`,\n" +
                        "  `s_dt`,\n" +
                        "  `s_is_sync`,\n" +
                        "  `s_long`,\n" +
                        "  `s_lat`\n" +
                        ") \n" +
                        "VALUES\n" +
                        "  (\n" +
                        "    '" + (i + 555) + "',\n" +
                        "    'isb" + i + "',\n" +
                        "    'Nisar" + i + "',\n" +
                        "    'Nisar s" + i + "',\n" +
                        "    '234" + i + "',\n" +
                        "    '8383',\n" +
                        "    '74747',\n" +
                        "    'false',\n" +
                        "    '34.3425445',\n" +
                        "    '34.3434'\n" +
                        "  ) ;";
                Log.d(TAG, insetDocType);
                db.execSQL(insetDocType);


                db.close();
                insertRetailSitesDummyData(i + "");
            }
        } catch (Exception e) {
            Log.e("DB", e.getMessage());
        } finally {

            if (db != null)
                db.close();
        }
    }

    private void insertMA_TCPDummyData() {
        SQLiteDatabase db = null;
        try {
            db = this.getReadableDatabase();
            int id = 100;
            String insetDocType = "INSERT INTO `ma_tcp` ( id, \n" +
                    "  `TcpDesc`,\n" +
                    "  `TcpDate`,\n" +
                    "  `Server_tcp_code`,\n" +
                    "  `DocID`,\n" +
                    "  `DocName`,\n" +
                    "  `AreaInchargeID`,\n" +
                    "  `AreaInchargeDesc`,\n" +
                    "  `LastTcpCode`,\n" +
                    "  `LastTcpDate`,\n" +
                    "  `CreatedBy`,\n" +
                    "  `ApprovedBy`,\n" +
                    "  `ApprovedDate`,\n" +
                    "  `ApprovedComments`,\n" +
                    "  `RejectedBy`,\n" +
                    "  `RejectedDate`,\n" +
                    "  `RejectedComments`,\n" +
                    "  `Status`\n" +
                    ") \n" +
                    "VALUES\n" +
                    "  ( " + id + ",\n" +
                    "    'Inprogress',\n" +
                    "    '07/27/2017',\n" +
                    "    '200200',\n" +
                    "    '1',\n" +
                    "    'DocName1',\n" +
                    "    'InProgressID',\n" +
                    "    'InprogressDesc',\n" +
                    "    '12345',\n" +
                    "    '12345',\n" +
                    "    'ABC',\n" +
                    "    'Test',\n" +
                    "    '07/27/2017',\n" +
                    "    'TestComments',\n" +
                    "    'Test',\n" +
                    "    '07/27/2017',\n" +
                    "    'TestComments',\n" +
                    "    '200'\n" +
                    "  ) ;";
            Log.d(TAG, insetDocType);
            db.execSQL(insetDocType);
            //   db.close();

            insertMA_TCP_RetailsitesDummyData(db, id + "");
            id++;
            insetDocType = "INSERT INTO `ma_tcp` (id, \n" +
                    "  `TcpDesc`,\n" +
                    "  `TcpDate`,\n" +
                    "  `Server_tcp_code`,\n" +
                    "  `DocID`,\n" +
                    "  `DocName`,\n" +
                    "  `AreaInchargeID`,\n" +
                    "  `AreaInchargeDesc`,\n" +
                    "  `LastTcpCode`,\n" +
                    "  `LastTcpDate`,\n" +
                    "  `CreatedBy`,\n" +
                    "  `ApprovedBy`,\n" +
                    "  `ApprovedDate`,\n" +
                    "  `ApprovedComments`,\n" +
                    "  `RejectedBy`,\n" +
                    "  `RejectedDate`,\n" +
                    "  `RejectedComments`,\n" +
                    "  `Status`\n" +
                    ") \n" +
                    "VALUES\n" +
                    "  (" + id + ",\n" +
                    "    'Rejected',\n" +
                    "    '07/27/2017',\n" +
                    "    '-100100',\n" +
                    "    '2',\n" +
                    "    'DocName2',\n" +
                    "    'InProgressID',\n" +
                    "    'InprogressDesc',\n" +
                    "    '12345',\n" +
                    "    '12345',\n" +
                    "    'ABC',\n" +
                    "    'Test',\n" +
                    "    '07/27/2017',\n" +
                    "    'TestComments',\n" +
                    "    'Test',\n" +
                    "    '07/27/2017',\n" +
                    "    'TestComments',\n" +
                    "    '-100'\n" +
                    "  ) ;";

            Log.d(TAG, insetDocType);
            db.execSQL(insetDocType);
            //    db.close();
            insertMA_TCP_RetailsitesDummyData(db, id + "");
            id++;

            insetDocType = "INSERT INTO `ma_tcp` (id , \n" +
                    "  `TcpDesc`,\n" +
                    "  `TcpDate`,\n" +
                    "  `Server_tcp_code`,\n" +
                    "  `DocID`,\n" +
                    "  `DocName`,\n" +
                    "  `AreaInchargeID`,\n" +
                    "  `AreaInchargeDesc`,\n" +
                    "  `LastTcpCode`,\n" +
                    "  `LastTcpDate`,\n" +
                    "  `CreatedBy`,\n" +
                    "  `ApprovedBy`,\n" +
                    "  `ApprovedDate`,\n" +
                    "  `ApprovedComments`,\n" +
                    "  `RejectedBy`,\n" +
                    "  `RejectedDate`,\n" +
                    "  `RejectedComments`,\n" +
                    "  `Status`\n" +
                    ") \n" +
                    "VALUES\n" +
                    "  (" + id + ",\n" +
                    "    'Approved',\n" +
                    "    '07/27/2017',\n" +
                    "    '100100',\n" +
                    "    '3',\n" +
                    "    'DocName3',\n" +
                    "    'InProgressID',\n" +
                    "    'InprogressDesc',\n" +
                    "    '12345',\n" +
                    "    '12345',\n" +
                    "    'ABC',\n" +
                    "    'Test',\n" +
                    "    '07/27/2017',\n" +
                    "    'TestComments',\n" +
                    "    'Test',\n" +
                    "    '07/27/2017',\n" +
                    "    'TestComments',\n" +
                    "    '100'\n" +
                    "  ) ;";

            Log.d(TAG, insetDocType);
            db.execSQL(insetDocType);
            //  db.close();
            insertMA_TCP_RetailsitesDummyData(db, id + "");
            id++;


            insetDocType = "INSERT INTO `ma_tcp` (id , \n" +
                    "  `TcpDesc`,\n" +
                    "  `TcpDate`,\n" +
                    "  `Server_tcp_code`,\n" +
                    "  `DocID`,\n" +
                    "  `DocName`,\n" +
                    "  `AreaInchargeID`,\n" +
                    "  `AreaInchargeDesc`,\n" +
                    "  `LastTcpCode`,\n" +
                    "  `LastTcpDate`,\n" +
                    "  `CreatedBy`,\n" +
                    "  `ApprovedBy`,\n" +
                    "  `ApprovedDate`,\n" +
                    "  `ApprovedComments`,\n" +
                    "  `RejectedBy`,\n" +
                    "  `RejectedDate`,\n" +
                    "  `RejectedComments`,\n" +
                    "  `Status`\n" +
                    ") \n" +
                    "VALUES\n" +
                    "  (" + id + ",\n" +
                    "    'Pending',\n" +
                    "    '07/27/2017',\n" +
                    "    '5050',\n" +
                    "    '4',\n" +
                    "    'DocName4',\n" +
                    "    'InProgressID',\n" +
                    "    'InprogressDesc',\n" +
                    "    '12345',\n" +
                    "    '12345',\n" +
                    "    'ABC',\n" +
                    "    'Test',\n" +
                    "    '07/27/2017',\n" +
                    "    'TestComments',\n" +
                    "    'Test',\n" +
                    "    '07/27/2017',\n" +
                    "    'TestComments',\n" +
                    "    '50'\n" +
                    "  ) ;";

            Log.d(TAG, insetDocType);
            db.execSQL(insetDocType);
            insertMA_TCP_RetailsitesDummyData(db, id + "");
            id++;

            db.close();


        } catch (Exception e) {
            Log.e("DB", e.getMessage());
        } finally {

            if (db != null)
                db.close();
        }
    }

    public void setValueOnChangeCreateTour(MA_TCP ma_tcp) {

        SQLiteDatabase db = this.getReadableDatabase();
        try {

            Long temp = createTCP_SUB(db, ma_tcp, true, 0);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null) {
                db.close();
            }
        }

    }

    private void insertRetailSitesDummyData(String doc_id) {
        SQLiteDatabase db = null;
        try {
            for (int i = 0; i < 5; i++) {
                db = this.getReadableDatabase();
                String insetDocType = "INSERT INTO `ma_retailsites` (\n" +
                        "  `MA_DocType_id`,\n" +
                        "  `DocID`,\n" +
                        "  `CostCentreID`,\n" +
                        "  `CostCentreDesc`,\n" +
                        "  `Location`,\n" +
                        "  `District`,\n" +
                        "  `LastInspDate`,\n" +
                        "  `s_date`,\n" +
                        "  `s_is_sync`,\n" +
                        "  `s_status`,\n" +
                        "  `s_long`,\n" +
                        "  `s_lat`\n" +
                        ") \n" +
                        "VALUES\n" +
                        "  (\n" +
                        "    '" + doc_id + "',\n" +
                        "    '" + doc_id + "',\n" +
                        "    'CostCentreID" + doc_id + i + "',\n" +
                        "    'CostCentreDesc" + doc_id + i + "',\n" +
                        "    'Location" + doc_id + i + "',\n" +
                        "    'District" + doc_id + i + "',\n" +
                        "    '2017-01-01',\n" +
                        "    '2017-01-01',\n" +
                        "    '100',\n" +
                        "    '100',\n" +
                        "    '34.34',\n" +
                        "    '72.72'\n" +
                        "  ) ;";
                Log.d(TAG, insetDocType);
                db.execSQL(insetDocType);
                db.close();
            }
        } catch (Exception e) {
            Log.e("DB", e.getMessage());
        } finally {

            if (db != null)
                db.close();
        }
    }

    public List<MADoctype> getMADocType(String userID) {
//        "CREATE TABLE IF NOT EXISTS  `ma_doctype` (\n" +
//                "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
//                "  `DocID` Text(20) DEFAULT NULL,\n" +
//                "  `DocName` Text(50) DEFAULT NULL,\n" +
//                "  `AreaInchargeID` Text(20) DEFAULT NULL,\n" +
//                "  `AreaInchargeDesc` Text(50) DEFAULT NULL,\n" +
//                "  `PrevTcpCode` Text(20) DEFAULT NULL,\n" +
//                "  `PrevTcpDate` date DEFAULT NULL,\n" +
//                "  `s_dt` datetime DEFAULT CURRENT_TIMESTAMP,\n" +
//                "  `s_is_sync` Integer(20) DEFAULT NULL,\n" +
//                "  `s_long` Text(20) DEFAULT NULL,\n" +
//                "  `s_lat` Text(20) DEFAULT NULL\n" +
//                ") ;"


        Cursor res = null;
        List<MADoctype> list = null;
        try {
            list = new ArrayList<MADoctype>();
            SQLiteDatabase db = this.getReadableDatabase();
            res = db.rawQuery("select * from ma_doctype", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {
                MADoctype maDoctype = new MADoctype();
                maDoctype.setId(res.getInt(res.getColumnIndex("id")));
                maDoctype.setDocID(res.getString(res.getColumnIndex("DocID")));
                maDoctype.setDocName(res.getString(res.getColumnIndex("DocName")));
                maDoctype.setAreaInchargeID(res.getString(res.getColumnIndex("AreaInchargeID")));
                maDoctype.setAreaInchargeDesc(res.getString(res.getColumnIndex("AreaInchargeDesc")));
                maDoctype.setPrevTcpCode(res.getString(res.getColumnIndex("PrevTcpCode")));
                maDoctype.setPrevTcpDate(res.getString(res.getColumnIndex("PrevTcpDate")));
                list.add(maDoctype);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
        }
        return list;
    }

    public long save_TCP_Retailsites(long tcpID, List<MA_TCP_RetailSites> list) {
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            Long i = createTCP_SUB_RetailSites(db, Integer.parseInt(tcpID + ""), list, true);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return tcpID;
    }

    public Long getTempTCPID() {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor res = null;
        Long tcpID = -1L;
        try {

            String checkQuery = "Select id from ma_tcp where s_Status = -50";
            res = db.rawQuery(checkQuery, null);
            if (res != null) {
                if (res.moveToFirst()) {
                    tcpID = Long.valueOf(res.getInt(res.getColumnIndex("id")));
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return tcpID;
    }


    public List<MA_TCP_RetailSites> getRetailSiteTempFromTCPID() {

        Long tcpID = getTempTCPID();

        SQLiteDatabase db = this.getReadableDatabase();
        List<MA_TCP_RetailSites> retailSitesList = new ArrayList<MA_TCP_RetailSites>();
        Cursor res = null;
        try {

            String checkQuery = "Select * from ma_tcp_retailsites where MA_TCP_ID = " + tcpID + " AND  TourPlanning > -1";
            res = db.rawQuery(checkQuery, null);
            if (res != null) {

                res.moveToFirst();

                while (res.isAfterLast() == false) {

                    MA_TCP_RetailSites maTCPRetailSites = new MA_TCP_RetailSites();
                    maTCPRetailSites.setId(res.getInt(res.getColumnIndex("id")));
                    maTCPRetailSites.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
                    maTCPRetailSites.setServer_TCP_code(res.getString(res.getColumnIndex("Server_TCP_code")));
                    maTCPRetailSites.setMA_RetailSites_id(res.getInt(res.getColumnIndex("MA_RetailSites_id")));
                    maTCPRetailSites.setDocID(res.getString(res.getColumnIndex("DocID")));
                    maTCPRetailSites.setDocName(res.getString(res.getColumnIndex("DocName")));
                    maTCPRetailSites.setCostCentreID(res.getString(res.getColumnIndex("CostCentreID")));
                    maTCPRetailSites.setCostCentreDesc(res.getString(res.getColumnIndex("CostCentreDesc")));
                    maTCPRetailSites.setDistrict(res.getString(res.getColumnIndex("District")));
                    maTCPRetailSites.setLocation(res.getString(res.getColumnIndex("Location")));
                    maTCPRetailSites.setLastinspDate(res.getString(res.getColumnIndex("LastinspDate")));
                    maTCPRetailSites.setLastInspCode(res.getString(res.getColumnIndex("LastInspCode")));
                    maTCPRetailSites.setTourPlanning(res.getString(res.getColumnIndex("TourPlanning")));
                    maTCPRetailSites.setVisitDate(res.getString(res.getColumnIndex("visitDate")));
                    maTCPRetailSites.setTravelTime(res.getString(res.getColumnIndex("TravelTime")));
                    maTCPRetailSites.setInspTime(res.getString(res.getColumnIndex("InspTime")));
                    maTCPRetailSites.setKMs(res.getString(res.getColumnIndex("KMs")));
                    maTCPRetailSites.setVisitPurpose(res.getString(res.getColumnIndex("VisitPurpose")));
                    maTCPRetailSites.setTourOrderNo(res.getString(res.getColumnIndex("TourOrderNo")));
                    maTCPRetailSites.setCocoSite(res.getString(res.getColumnIndex("CocoSite")));
                    maTCPRetailSites.setInspectionDate(res.getString(res.getColumnIndex("InspectionDate")));
                    maTCPRetailSites.setStatus(res.getString(res.getColumnIndex("Status")));
                    maTCPRetailSites.setStatus_IE_1(res.getInt(res.getColumnIndex("Status_IE_1")));
                    maTCPRetailSites.setStatus_IE_2(res.getInt(res.getColumnIndex("Status_IE_2")));
                    maTCPRetailSites.setStatus_IE_3(res.getInt(res.getColumnIndex("Status_IE_3")));
                    maTCPRetailSites.setStatus_IE_4(res.getInt(res.getColumnIndex("Status_IE_4")));
                    maTCPRetailSites.setStatus_IE_5(res.getInt(res.getColumnIndex("Status_IE_5")));


                    maTCPRetailSites.setS_date(res.getString(res.getColumnIndex("s_date")));
                    maTCPRetailSites.setS_status(res.getInt(res.getColumnIndex("s_status")));
                    maTCPRetailSites.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                    maTCPRetailSites.setS_long(res.getString(res.getColumnIndex("s_long")));
                    maTCPRetailSites.setS_lat(res.getString(res.getColumnIndex("s_lat")));

                    //TODO add all fields (SARFRAZ UPDATE)
                    retailSitesList.add(maTCPRetailSites);
                    res.moveToNext();
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return retailSitesList;
    }


    public List<MA_TCP> getTCPAll(int type) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor res = null;
        List<MA_TCP> ma_tcp_record = new ArrayList<MA_TCP>();

        try {

            String checkQuery = "";
            String orderby = " order by TcpDate desc , Server_tcp_code desc";
            if (type == 1) {
                checkQuery = "Select * from ma_tcp where (s_Status >= 0 and s_Status <= 300) or (s_Status=-100)  AND isCalledFrQA=0" + orderby; // All FOR PENDING TAB
            } else if (type == 2) {
                checkQuery = "Select * from ma_tcp where s_Status >= 400 AND isCalledFrQA=0" + orderby; // FOR EXECUTION TAB
            } else if (type == 3) {
                checkQuery = "Select * from ma_tcp where s_Status <= -200 AND isCalledFrQA=0" + orderby; // FOR REJECTED TAB
            }

            res = db.rawQuery(checkQuery, null);

            if (res != null) {
                res.moveToFirst();
                while (res.isAfterLast() == false) {

                    MA_TCP ma_tcp = new MA_TCP();

                    ma_tcp.setId(res.getInt(res.getColumnIndex("id")));
                    ma_tcp.setServer_tcp_code(res.getString(res.getColumnIndex("Server_tcp_code")));
                    ma_tcp.setTcpDesc(res.getString(res.getColumnIndex("TcpDesc")));
                    ma_tcp.setTcpDate(res.getString(res.getColumnIndex("TcpDate")));
                    ma_tcp.setDocName(res.getString(res.getColumnIndex("DocName")));
                    ma_tcp.setDocID(res.getString(res.getColumnIndex("DocID")));
                    ma_tcp.setStatus(res.getString(res.getColumnIndex("Status")));

                    ma_tcp.setAreaInchargeDesc(res.getString(res.getColumnIndex("AreaInchargeDesc")));
                    ma_tcp.setAreaInchargeID(res.getString(res.getColumnIndex("AreaInchargeID")));
                    ma_tcp.setLastTcpCode(res.getString(res.getColumnIndex("LastTcpCode")));
                    ma_tcp.setLastTcpDate(res.getString(res.getColumnIndex("LastTcpDate")));
                    ma_tcp.setApprovedBy(res.getString(res.getColumnIndex("ApprovedBy")));
                    ma_tcp.setApprovedDate(res.getString(res.getColumnIndex("ApprovedDate")));
                    ma_tcp.setApprovedComments(res.getString(res.getColumnIndex("ApprovedComments")));

                    ma_tcp.setS_status(res.getInt(res.getColumnIndex("s_status")));
                    ma_tcp.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                    ma_tcp.setS_date(res.getString(res.getColumnIndex("s_date")));
                    ma_tcp.setS_long(res.getString(res.getColumnIndex("s_long")));
                    ma_tcp.setS_lat(res.getString(res.getColumnIndex("s_lat")));


                    ma_tcp_record.add(ma_tcp);
                    res.moveToNext();
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return ma_tcp_record;
    }


    public List<MA_TCP> getAllTCPS() {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor res = null;
        List<MA_TCP> ma_tcp_record = new ArrayList<MA_TCP>();

        try {

            String checkQuery = "Select * from ma_tcp ";
            // String orderby = " order by TCPDate desc";

            res = db.rawQuery(checkQuery, null);

            if (res != null) {
                res.moveToFirst();
                while (res.isAfterLast() == false) {

                    MA_TCP ma_tcp = new MA_TCP();

                    ma_tcp.setId(res.getInt(res.getColumnIndex("id")));
                    ma_tcp.setTcpDesc(res.getString(res.getColumnIndex("TcpDesc")));
                    ma_tcp.setTcpDate(res.getString(res.getColumnIndex("TcpDate")));
                    ma_tcp.setDocName(res.getString(res.getColumnIndex("DocName")));
                    ma_tcp.setStatus(res.getString(res.getColumnIndex("Status")));
                    ma_tcp.setServer_tcp_code(res.getString(res.getColumnIndex("Server_tcp_code")));
                    ma_tcp.setAreaInchargeDesc(res.getString(res.getColumnIndex("AreaInchargeDesc")));
                    //TODO: Add remaining fields of MA_TCP

                    ma_tcp_record.add(ma_tcp);
                    res.moveToNext();
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return ma_tcp_record;
    }

    public List<MA_TCP> getTCPSbyStatus(int tcp_status_value) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor res = null;
        List<MA_TCP> ma_tcp_record = new ArrayList<MA_TCP>();

        try {

            String checkQuery = "Select * from ma_tcp where s_status = " + tcp_status_value;
            // String orderby = " order by TCPDate desc";

            res = db.rawQuery(checkQuery, null);

            if (res != null) {
                res.moveToFirst();
                while (res.isAfterLast() == false) {

                    MA_TCP ma_tcp = new MA_TCP();

                    ma_tcp.setId(res.getInt(res.getColumnIndex("id")));
                    ma_tcp.setServer_tcp_code(res.getString(res.getColumnIndex("Server_tcp_code")));
                    ma_tcp.setTcpDesc(res.getString(res.getColumnIndex("TcpDesc")));
                    ma_tcp.setTcpDate(res.getString(res.getColumnIndex("TcpDate")));
                    ma_tcp.setDocName(res.getString(res.getColumnIndex("DocName")));
                    ma_tcp.setDocID(res.getString(res.getColumnIndex("DocID")));
                    ma_tcp.setStatus(res.getString(res.getColumnIndex("Status")));
                    ma_tcp.setServer_tcp_code(res.getString(res.getColumnIndex("Server_tcp_code")));
                    ma_tcp.setAreaInchargeDesc(res.getString(res.getColumnIndex("AreaInchargeDesc")));
                    ma_tcp.setAreaInchargeID(res.getString(res.getColumnIndex("AreaInchargeID")));
                    ma_tcp.setLastTcpCode(res.getString(res.getColumnIndex("LastTcpCode")));
                    ma_tcp.setLastTcpDate(res.getString(res.getColumnIndex("LastTcpDate")));
                    ma_tcp.setApprovedBy(res.getString(res.getColumnIndex("ApprovedBy")));
                    ma_tcp.setApprovedComments(res.getString(res.getColumnIndex("ApprovedComments")));
                    ma_tcp.setStatus(res.getString(res.getColumnIndex("Status")));

                    ma_tcp.setS_status(res.getInt(res.getColumnIndex("s_status")));
                    ma_tcp.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                    ma_tcp.setS_date(res.getString(res.getColumnIndex("s_date")));
                    ma_tcp.setS_long(res.getString(res.getColumnIndex("s_long")));
                    ma_tcp.setS_lat(res.getString(res.getColumnIndex("s_lat")));
                    //TODO: Add remaining fields of MA_TCP

                    ma_tcp_record.add(ma_tcp);
                    res.moveToNext();
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return ma_tcp_record;
    }


    public MA_TCP getTCP(Long tcpID) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor res = null;
        MA_TCP ma_tcp_record = new MA_TCP();

        try {

            String checkQuery = "Select * from ma_tcp where id = " + tcpID + "";
            res = db.rawQuery(checkQuery, null);

            if (res != null) {
                if (res.moveToFirst()) {

                    ma_tcp_record.setId(res.getInt(res.getColumnIndex("id")));
                    ma_tcp_record.setServer_tcp_code(res.getString(res.getColumnIndex("Server_tcp_code")));

                    ma_tcp_record.setTcpDesc(res.getString(res.getColumnIndex("TcpDesc")));

                    ma_tcp_record.setTcpDate(res.getString(res.getColumnIndex("TcpDate")));

                    ma_tcp_record.setDocID(res.getString(res.getColumnIndex("DocID")));

                    ma_tcp_record.setDocName(res.getString(res.getColumnIndex("DocName")));

                    ma_tcp_record.setMA_DocType_id(res.getInt(res.getColumnIndex("MA_DocType_id")));

                    ma_tcp_record.setAreaInchargeID(res.getString(res.getColumnIndex("AreaInchargeID")));

                    ma_tcp_record.setAreaInchargeDesc(res.getString(res.getColumnIndex("AreaInchargeDesc")));

                    ma_tcp_record.setLastTcpCode(res.getString(res.getColumnIndex("LastTcpCode")));

                    ma_tcp_record.setLastTcpDate(res.getString(res.getColumnIndex("LastTcpDate")));
                    ma_tcp_record.setCreatedBy(res.getString(res.getColumnIndex("CreatedBy")));
                    ma_tcp_record.setApprovedBy(res.getString(res.getColumnIndex("ApprovedBy")));
                    ma_tcp_record.setApprovedDate(res.getString(res.getColumnIndex("ApprovedDate")));
                    ma_tcp_record.setApprovedComments(res.getString(res.getColumnIndex("ApprovedComments")));


                    ma_tcp_record.setStatus(res.getString(res.getColumnIndex("Status")));
                    ma_tcp_record.setS_status(res.getInt(res.getColumnIndex("s_status")));
                    ma_tcp_record.setS_date(res.getString(res.getColumnIndex("s_date")));
                    ma_tcp_record.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));

                    ma_tcp_record.setS_long(res.getString(res.getColumnIndex("s_long")));
                    ma_tcp_record.setS_lat(res.getString(res.getColumnIndex("s_lat")));


                    //TODO: Add remaining fields of MA_TCP

                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return ma_tcp_record;
    }

    public MA_TCP getTCPbyServerCode(String ServertcpCode) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor res = null;
        MA_TCP ma_tcp_record = new MA_TCP();

        try {

            String checkQuery = "Select * from ma_tcp where server_tcp_code = '" + ServertcpCode + "'";
            res = db.rawQuery(checkQuery, null);

            if (res != null) {
                if (res.moveToFirst()) {

                    ma_tcp_record.setId(res.getInt(res.getColumnIndex("id")));
                    ma_tcp_record.setServer_tcp_code(res.getString(res.getColumnIndex("Server_tcp_code")));
                    ma_tcp_record.setTcpDesc(res.getString(res.getColumnIndex("TcpDesc")));
                    ma_tcp_record.setTcpDate(res.getString(res.getColumnIndex("TcpDate")));
                    ma_tcp_record.setDocID(res.getString(res.getColumnIndex("DocID")));
                    ma_tcp_record.setDocName(res.getString(res.getColumnIndex("DocName")));
                    ma_tcp_record.setMA_DocType_id(res.getInt(res.getColumnIndex("MA_DocType_id")));
                    ma_tcp_record.setAreaInchargeID(res.getString(res.getColumnIndex("AreaInchargeID")));
                    ma_tcp_record.setAreaInchargeDesc(res.getString(res.getColumnIndex("AreaInchargeDesc")));
                    ma_tcp_record.setLastTcpCode(res.getString(res.getColumnIndex("LastTcpCode")));
                    ma_tcp_record.setLastTcpDate(res.getString(res.getColumnIndex("LastTcpDate")));
                    ma_tcp_record.setCreatedBy(res.getString(res.getColumnIndex("CreatedBy")));
                    ma_tcp_record.setApprovedBy(res.getString(res.getColumnIndex("ApprovedBy")));
                    ma_tcp_record.setApprovedDate(res.getString(res.getColumnIndex("ApprovedDate")));
                    ma_tcp_record.setApprovedComments(res.getString(res.getColumnIndex("ApprovedComments")));

                    ma_tcp_record.setRejectedBy(res.getString(res.getColumnIndex("RejectedBy")));
                    ma_tcp_record.setRejectedDate(res.getString(res.getColumnIndex("RejectedDate")));
                    ma_tcp_record.setRejectedComments(res.getString(res.getColumnIndex("RejectedComments")));

                    ma_tcp_record.setStatus(res.getString(res.getColumnIndex("Status")));
                    ma_tcp_record.setS_status(res.getInt(res.getColumnIndex("s_status")));
                    ma_tcp_record.setS_date(res.getString(res.getColumnIndex("s_date")));
                    ma_tcp_record.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                    ma_tcp_record.setS_long(res.getString(res.getColumnIndex("s_long")));
                    ma_tcp_record.setS_lat(res.getString(res.getColumnIndex("s_lat")));

                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return ma_tcp_record;
    }

    public Long createTempTCP(MA_TCP ma_tcp, List<MA_TCP_RetailSites> list) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor res = null;
        Long tcpID = -1L;
        try {

            String checkQuery = "Select id from ma_tcp where s_Status = -50";
            res = db.rawQuery(checkQuery, null);

            if (res.moveToFirst()) {
                MADoctype maDoctype = new MADoctype();
                tcpID = Long.valueOf(res.getInt(res.getColumnIndex("id")));
            }


            if (tcpID < 0L) {
                tcpID = createTCP_SUB(db, ma_tcp, false, 0);
                Long tcpSiteID = createTCP_SUB_RetailSites(db, Integer.parseInt(tcpID + ""), list, false);
            } else {
                ma_tcp.setId(Integer.parseInt(tcpID + "")); ///As the record is for update not new.
                tcpID = createTCP_SUB(db, ma_tcp, true, 0);
                Long tcpSiteID = createTCP_SUB_RetailSites(db, Integer.parseInt(tcpID + ""), list, true);
            }


        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return tcpID;
    }

    private Long createTCP_SUB_RetailSites(SQLiteDatabase db, int ma_tcpId, List<MA_TCP_RetailSites> list, boolean isUpdate) {
        //Inserting Temp MA_TCP_RetailSites
        //TODO if update is true then we may delete all the previous entries of that specific MA_TCP_ID (for example there are
        // Four rows and then insert all the rows from List object MA_TCP_RetailSites

        // delete all previous records from MA_TCP_RETAILSITES
        String deleteQuery = "DELETE FROM MA_TCP_Retailsites where MA_TCP_ID = " + ma_tcpId;
        db.execSQL(deleteQuery);
        isUpdate = false; /// We dont have to update now as previous entries are deleted and now new entries will be inserted.


        Long id = -1L;
        try {
            for (int i = 0; i < list.size(); i++) {
                ContentValues contentValues1 = new ContentValues();
                contentValues1.put("MA_TCP_ID", Integer.parseInt(ma_tcpId + ""));
                contentValues1.put("Server_TCP_code", list.get(i).getServer_TCP_code() + "");
                contentValues1.put("MA_RetailSites_id", list.get(i).getMA_RetailSites_id() + "");
                contentValues1.put("DocID", list.get(i).getDocID() + "");
                contentValues1.put("DocName", list.get(i).getDocName() + "");
                contentValues1.put("CostCentreID", list.get(i).getCostCentreID() + "");
                contentValues1.put("CostCentreDesc", list.get(i).getCostCentreDesc() + "");
                contentValues1.put("Location", list.get(i).getLocation() + "");
                contentValues1.put("District", list.get(i).getDistrict() + "");
                contentValues1.put("LastInspCode", list.get(i).getLastInspCode() + "");
                contentValues1.put("LastinspDate", list.get(i).getLastinspDate() + "");
                contentValues1.put("TourPlanning", list.get(i).getTourPlanning() + "");
                contentValues1.put("visitDate", list.get(i).getVisitDate() + "");
                contentValues1.put("TravelTime", list.get(i).getTravelTime() + "");
                contentValues1.put("InspTime", list.get(i).getInspTime() + "");
                contentValues1.put("KMs", list.get(i).getKMs() + "");
                contentValues1.put("VisitPurpose", list.get(i).getVisitPurpose() + "");
                contentValues1.put("TourOrderNo", list.get(i).getTourOrderNo() + "");
                contentValues1.put("CocoSite", list.get(i).getCocoSite() + "");
                contentValues1.put("InspectionDate", list.get(i).getInspectionDate() + "");
                contentValues1.put("Status", list.get(i).getStatus() + "");
                contentValues1.put("Status_IE_1", list.get(i).getStatus_IE_1() + "");
                contentValues1.put("Status_IE_2", list.get(i).getStatus_IE_2() + "");
                contentValues1.put("Status_IE_3", list.get(i).getStatus_IE_3() + "");
                contentValues1.put("Status_IE_4", list.get(i).getStatus_IE_4() + "");
                contentValues1.put("Status_IE_5", list.get(i).getStatus_IE_5() + "");
                contentValues1.put("s_date", list.get(i).getS_date() + "");
                contentValues1.put("s_is_sync", list.get(i).getS_is_sync() + "");
                contentValues1.put("s_status", list.get(i).getS_status() + "");
                contentValues1.put("s_long", list.get(i).getS_long() + "");
                contentValues1.put("s_lat", list.get(i).getS_lat() + "");
                if (isUpdate == false) {
                    id = db.insert("ma_tcp_retailsites", null, contentValues1);
                } else {
                    id = new Long(db.update("ma_tcp_retailsites", contentValues1, "id =" + list.get(i).getId(), null));
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        } finally {
            // if (db != null) {
            //     db.close();
            //}
        }
        return id;
    }

    public boolean IsUnderExecution(int tcpid) {

        SQLiteDatabase db = this.getReadableDatabase();
        Cursor res = null;
        try {
            String checkQuery = "Select * from MA_TCP_RetailSites where (Status_IE_1 > 0 OR " +
                    "Status_IE_2 > 0 OR " +
                    "Status_IE_3 > 0 OR " +
                    "Status_IE_4 > 0 OR " +
                    "Status_IE_5 > 0 ) and MA_TCP_ID=" + tcpid + " and " +
                    " ( s_Status=0 OR " +
                    "s_Status= 400 OR " +
                    "s_Status= 500) ";

            res = db.rawQuery(checkQuery, null);
            if (res != null && res.moveToFirst()) return true;
            else return false;


        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return false;
    }


    public Long addMA_TCP(MA_TCP ma_tcp, int isCalledFrQA) {
        SQLiteDatabase db = this.getReadableDatabase();
        // String checkSQLServerTCPCode = "Select id from ma_tcp where Server_tcp_code ='" + ma_tcp.getServer_tcp_code() + "'";
        Long id = -1L;
        //  Cursor res = null;
        try {
          /*  res = db.rawQuery(checkSQLServerTCPCode, null);
            if (res != null && res.moveToFirst()) {
                ma_tcp.setId(res.getInt(res.getColumnIndex("id")));
                id = createTCP_SUB(db, ma_tcp, true, isCalledFrQA);
            }
            else*/
            id = createTCP_SUB(db, ma_tcp, false, isCalledFrQA);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return id;
    }

    private Long createTCP_SUB(SQLiteDatabase db, MA_TCP ma_tcp, boolean isUpdate, int isCalledFrQA) {
        //Inserting Temp MA_TCP
        Long id = -1L;
        try {
            ContentValues contentValues = new ContentValues();

            contentValues.put("Server_tcp_code", ma_tcp.getServer_tcp_code());
            contentValues.put("TcpDesc", ma_tcp.getTcpDesc());
            contentValues.put("TcpDate", ma_tcp.getTcpDate());
            contentValues.put("DocID", ma_tcp.getDocID());//getMA_DocType_id
            contentValues.put("DocName", ma_tcp.getDocName());//getMA_DocType_id
            contentValues.put("MA_DocType_id", ma_tcp.getMA_DocType_id());
            contentValues.put("AreaInchargeID", ma_tcp.getAreaInchargeID());
            contentValues.put("AreaInchargeDesc", ma_tcp.getAreaInchargeDesc());
            contentValues.put("LastTcpCode", ma_tcp.getLastTcpCode());
            contentValues.put("LastTcpDate", ma_tcp.getLastTcpDate());
            contentValues.put("CreatedBy", ma_tcp.getCreatedBy());
            contentValues.put("ApprovedBy", ma_tcp.getApprovedBy());
            contentValues.put("ApprovedDate", ma_tcp.getApprovedDate());
            contentValues.put("ApprovedComments", ma_tcp.getApprovedComments());
            contentValues.put("RejectedBy", ma_tcp.getRejectedBy());
            contentValues.put("RejectedDate", ma_tcp.getRejectedDate());
            contentValues.put("RejectedComments", ma_tcp.getRejectedComments());
            contentValues.put("Status", ma_tcp.getStatus());
            contentValues.put("s_date", ma_tcp.getS_date());
            contentValues.put("s_is_sync", ma_tcp.getS_is_sync());
            contentValues.put("s_status", ma_tcp.getS_status());
            contentValues.put("s_long", ma_tcp.getS_long());
            contentValues.put("s_lat", ma_tcp.getS_lat());
            contentValues.put("isCalledFrQA", isCalledFrQA);
            if (isUpdate == false) {
                id = db.insert("ma_tcp", null, contentValues);
            } else {
                int NumOfRowsUpdated = db.update("ma_tcp", contentValues, "id =" + ma_tcp.getId(), null);
                if (NumOfRowsUpdated > 0) id = new Long(ma_tcp.getId());
                //TODO else throw exception OR we need to check fromwhere this method is called that return value should not be -1L;

            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            //if (db != null) {
            //    db.close();
            //}
        }
        return id;

    }

    private Long createTCP_SUB_ForQA(SQLiteDatabase db, MA_TCP ma_tcp, boolean isUpdate) {
        //Inserting Temp MA_TCP
        Long id = -1L;
        try {
            ContentValues contentValues = new ContentValues();

            contentValues.put("Server_tcp_code", ma_tcp.getServer_tcp_code());
            contentValues.put("TcpDesc", ma_tcp.getTcpDesc());
            contentValues.put("TcpDate", ma_tcp.getTcpDate());
            contentValues.put("DocID", ma_tcp.getDocID());//getMA_DocType_id
            contentValues.put("DocName", ma_tcp.getDocName());//getMA_DocType_id
            contentValues.put("MA_DocType_id", ma_tcp.getMA_DocType_id());
            contentValues.put("AreaInchargeID", ma_tcp.getAreaInchargeID());
            contentValues.put("AreaInchargeDesc", ma_tcp.getAreaInchargeDesc());
            contentValues.put("LastTcpCode", ma_tcp.getLastTcpCode());
            contentValues.put("LastTcpDate", ma_tcp.getLastTcpDate());
            contentValues.put("CreatedBy", ma_tcp.getCreatedBy());
            contentValues.put("ApprovedBy", ma_tcp.getApprovedBy());
            contentValues.put("ApprovedDate", ma_tcp.getApprovedDate());
            contentValues.put("ApprovedComments", ma_tcp.getApprovedComments());
            contentValues.put("RejectedBy", ma_tcp.getRejectedBy());
            contentValues.put("RejectedDate", ma_tcp.getRejectedDate());
            contentValues.put("RejectedComments", ma_tcp.getRejectedComments());
            contentValues.put("Status", ma_tcp.getStatus());
            contentValues.put("s_date", ma_tcp.getS_date());
            contentValues.put("s_is_sync", ma_tcp.getS_is_sync());
            contentValues.put("s_status", ma_tcp.getS_status());
            contentValues.put("s_long", ma_tcp.getS_long());
            contentValues.put("s_lat", ma_tcp.getS_lat());
            if (isUpdate == false) {
                id = db.insert("ma_tcp", null, contentValues);
            } else {
                int NumOfRowsUpdated = db.update("ma_tcp", contentValues, "id =" + ma_tcp.getId(), null);
                if (NumOfRowsUpdated > 0) id = new Long(ma_tcp.getId());
                //TODO else throw exception OR we need to check fromwhere this method is called that return value should not be -1L;

            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            //if (db != null) {
            //    db.close();
            //}
        }
        return id;

    }


    public Long addMA_TCP_RetailSite(MA_TCP_RetailSites list, boolean isUpdate) {
        //Inserting Temp MA_TCP_RetailSites
        //TODO if update is true then we may delete all the previous entries of that specific MA_TCP_ID (for example there are
        // Four rows and then insert all the rows from List object MA_TCP_RetailSites

        SQLiteDatabase db = this.getReadableDatabase();

        Long id = -1L;
        try {
            ContentValues contentValues1 = new ContentValues();
            contentValues1.put("MA_TCP_ID", list.getMA_TCP_ID() + "");
            contentValues1.put("Server_TCP_code", list.getServer_TCP_code() + "");
            contentValues1.put("MA_RetailSites_id", list.getMA_RetailSites_id() + "");
            contentValues1.put("DocID", list.getDocID() + "");
            contentValues1.put("DocName", list.getDocName() + "");
            contentValues1.put("CostCentreID", list.getCostCentreID() + "");
            contentValues1.put("CostCentreDesc", list.getCostCentreDesc() + "");
            contentValues1.put("Location", list.getLocation() + "");
            contentValues1.put("District", list.getDistrict() + "");
            contentValues1.put("LastInspCode", list.getLastInspCode() + "");
            contentValues1.put("LastinspDate", list.getLastinspDate() + "");
            contentValues1.put("TourPlanning", list.getTourPlanning() + "");
            contentValues1.put("visitDate", list.getVisitDate() + "");
            contentValues1.put("TravelTime", list.getTravelTime() + "");
            contentValues1.put("InspTime", list.getInspTime() + "");
            contentValues1.put("KMs", list.getKMs() + "");
            contentValues1.put("VisitPurpose", list.getVisitPurpose() + "");
            contentValues1.put("TourOrderNo", list.getTourOrderNo() + "");
            contentValues1.put("CocoSite", list.getCocoSite() + "");
            contentValues1.put("InspectionDate", list.getInspectionDate() + "");
            contentValues1.put("Status", list.getStatus() + "");
            contentValues1.put("CommentedBy", list.getCommentedBy() + "");
            contentValues1.put("Comment", list.getComment() + "");
            contentValues1.put("CommentedDate", list.getCommentedDate() + "");
            contentValues1.put("Status_IE_1", list.getStatus_IE_1() + "");
            contentValues1.put("Status_IE_2", list.getStatus_IE_2() + "");
            contentValues1.put("Status_IE_3", list.getStatus_IE_3() + "");
            contentValues1.put("Status_IE_4", list.getStatus_IE_4() + "");
            contentValues1.put("Status_IE_5", list.getStatus_IE_5() + "");
            contentValues1.put("s_date", list.getS_date() + "");
            contentValues1.put("s_is_sync", list.getS_is_sync() + "");
            contentValues1.put("s_status", list.getS_status() + "");
            contentValues1.put("s_long", list.getS_long() + "");
            contentValues1.put("s_lat", list.getS_lat() + "");

            if (isUpdate == false) {
                id = db.insert("ma_tcp_retailsites", null, contentValues1);
            } else {
                id = new Long(db.update("ma_tcp_retailsites", contentValues1, "id =" + list.getId(), null));
            }

        } catch (NumberFormatException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return id;
    }


    public MA_TCP getMARetailSits(String tcpID) {

        Cursor res = null;
        MA_TCP ma_tcp_obj = null;
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            ma_tcp_obj = new MA_TCP();

            res = db.rawQuery("select * from ma_tcp where id = " + tcpID, null);
            res.moveToFirst();
            if (res.isAfterLast() == false) {
//            while (res.isAfterLast() == false) {

//                itemViewHolder.circularTextView.setText(position + 1 + "");
//                itemViewHolder.tvSiteName.setText(maRetailSites.getCostCentreDesc());
//                itemViewHolder.tvDate.setText(maRetailSites.getLastInspDate());
//                itemViewHolder.tvSiteAddress.setText(maRetailSites.getLocation());
//                itemViewHolder.tvCity.setText(maRetailSites.getDistrict());


                ma_tcp_obj.setStatus(res.getString(res.getColumnIndex("Status")));
                ma_tcp_obj.setId(res.getInt(res.getColumnIndex("id")));
                ma_tcp_obj.setDocID(res.getString(res.getColumnIndex("DocID")));
                ma_tcp_obj.setDocName(res.getString(res.getColumnIndex("DocName")));
                ma_tcp_obj.setServer_tcp_code(res.getString(res.getColumnIndex("Server_tcp_code")));
                ma_tcp_obj.setLastTcpDate(res.getString(res.getColumnIndex("LastTcpDate")));
                ma_tcp_obj.setLastTcpCode(res.getString(res.getColumnIndex("LastTcpCode")));
                ma_tcp_obj.setAreaInchargeID(res.getString(res.getColumnIndex("AreaInchargeID")));
                ma_tcp_obj.setAreaInchargeDesc(res.getString(res.getColumnIndex("AreaInchargeDesc")));
                ma_tcp_obj.setTcpDesc(res.getString(res.getColumnIndex("TcpDesc")));
                ma_tcp_obj.setTcpDate(res.getString(res.getColumnIndex("TcpDate")));

            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            if (db != null) {
                db.close();
            }
        }
        return ma_tcp_obj;
    }

    public List<MARetailSites> getMARetailSits(String docID, String userID) {
//        "CREATE TABLE IF NOT EXISTS `ma_retailsites` (\n" +
//                "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//                "  `MA_DocType_id` Integer(20) DEFAULT NULL,\n" +
//                "  `DocID` Text(20) DEFAULT NULL,\n" +
//                "  `CostCentreID` Text(20) DEFAULT NULL,\n" +
//                "  `CostCentreDesc` Text(200) DEFAULT NULL,\n" +
//                "  `Location` Text(200) DEFAULT NULL,\n" +
//                "  `District` Text(100) DEFAULT NULL,\n" +
//                "  `LastInspDate` date DEFAULT NULL,\n" +
//                "  `s_date` datetime DEFAULT CURRENT_TIMESTAMP,\n" +
//                "  `s_is_sync` Integer(20) DEFAULT NULL,\n" +
//                "  `s_status` Integer(20) DEFAULT NULL,\n" +
//                "  `s_long` Text(20) DEFAULT NULL,\n" +
//                "  `s_lat` Text(20) DEFAULT NULL\n" +
//                ") ;"


        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<MARetailSites> list = null;
        try {
            list = new ArrayList<MARetailSites>();

            res = db.rawQuery("select * from ma_retailsites where DocID = " + docID, null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

//                itemViewHolder.circularTextView.setText(position + 1 + "");
//                itemViewHolder.tvSiteName.setText(maRetailSites.getCostCentreDesc());
//                itemViewHolder.tvDate.setText(maRetailSites.getLastInspDate());
//                itemViewHolder.tvSiteAddress.setText(maRetailSites.getLocation());
//                itemViewHolder.tvCity.setText(maRetailSites.getDistrict());


                MARetailSites maRetailSites = new MARetailSites();
                maRetailSites.setId(res.getInt(res.getColumnIndex("id")));
                maRetailSites.setDocID(res.getString(res.getColumnIndex("DocID")));
                maRetailSites.setCostCentreID(res.getString(res.getColumnIndex("CostCentreID")));
                maRetailSites.setCostCentreDesc(res.getString(res.getColumnIndex("CostCentreDesc")));
                maRetailSites.setLastInspDate(res.getString(res.getColumnIndex("LastInspDate")));
                maRetailSites.setDistrict(res.getString(res.getColumnIndex("District")));
                maRetailSites.setLocation(res.getString(res.getColumnIndex("Location")));

                list.add(maRetailSites);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            if (db != null) {
                db.close();
            }
        }
        return list;
    }

    public List<MA_TCP_RetailSites> getMATCPRetailSitsByStatus(Long tcpID, int status) {

        Cursor res = null;
        List<MA_TCP_RetailSites> list = null;
        try {
            list = new ArrayList<MA_TCP_RetailSites>();
            SQLiteDatabase db = this.getReadableDatabase();
            res = db.rawQuery("select * from ma_tcp_retailsites where MA_TCP_ID = " + tcpID + " and status =" + status + "", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                MA_TCP_RetailSites maTCPRetailSites = new MA_TCP_RetailSites();
                maTCPRetailSites.setId(res.getInt(res.getColumnIndex("id")));
                maTCPRetailSites.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
                maTCPRetailSites.setServer_TCP_code(res.getString(res.getColumnIndex("Server_TCP_code")));
                maTCPRetailSites.setMA_RetailSites_id(res.getInt(res.getColumnIndex("MA_RetailSites_id")));
                maTCPRetailSites.setDocID(res.getString(res.getColumnIndex("DocID")));
                maTCPRetailSites.setDocName(res.getString(res.getColumnIndex("DocName")));
                maTCPRetailSites.setCostCentreID(res.getString(res.getColumnIndex("CostCentreID")));
                maTCPRetailSites.setCostCentreDesc(res.getString(res.getColumnIndex("CostCentreDesc")));
                maTCPRetailSites.setDistrict(res.getString(res.getColumnIndex("District")));
                maTCPRetailSites.setLocation(res.getString(res.getColumnIndex("Location")));
                maTCPRetailSites.setLastinspDate(res.getString(res.getColumnIndex("LastinspDate")));
                maTCPRetailSites.setLastInspCode(res.getString(res.getColumnIndex("LastInspCode")));
                maTCPRetailSites.setTourPlanning(res.getString(res.getColumnIndex("TourPlanning")));
                maTCPRetailSites.setVisitDate(res.getString(res.getColumnIndex("visitDate")));
                maTCPRetailSites.setTravelTime(res.getString(res.getColumnIndex("TravelTime")));
                maTCPRetailSites.setInspTime(res.getString(res.getColumnIndex("InspTime")));
                maTCPRetailSites.setKMs(res.getString(res.getColumnIndex("KMs")));
                maTCPRetailSites.setVisitPurpose(res.getString(res.getColumnIndex("VisitPurpose")));
                maTCPRetailSites.setTourOrderNo(res.getString(res.getColumnIndex("TourOrderNo")));
                maTCPRetailSites.setCocoSite(res.getString(res.getColumnIndex("CocoSite")));
                maTCPRetailSites.setInspectionDate(res.getString(res.getColumnIndex("InspectionDate")));
                maTCPRetailSites.setStatus(res.getString(res.getColumnIndex("Status")));
                maTCPRetailSites.setStatus_IE_1(res.getInt(res.getColumnIndex("Status_IE_1")));
                maTCPRetailSites.setStatus_IE_2(res.getInt(res.getColumnIndex("Status_IE_2")));
                maTCPRetailSites.setStatus_IE_3(res.getInt(res.getColumnIndex("Status_IE_3")));
                maTCPRetailSites.setStatus_IE_4(res.getInt(res.getColumnIndex("Status_IE_4")));
                maTCPRetailSites.setStatus_IE_5(res.getInt(res.getColumnIndex("Status_IE_5")));


                maTCPRetailSites.setS_date(res.getString(res.getColumnIndex("s_date")));
                maTCPRetailSites.setS_status(res.getInt(res.getColumnIndex("s_status")));
                maTCPRetailSites.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                maTCPRetailSites.setS_long(res.getString(res.getColumnIndex("s_long")));
                maTCPRetailSites.setS_lat(res.getString(res.getColumnIndex("s_lat")));

                //TODO add all fields (SARFRAZ UPDATE)
                list.add(maTCPRetailSites);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
        }
        return list;
    }

    public boolean getAnySiteInspected(Long tcpID, String userID) {

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        boolean inspected = false;
        try {

            res = db.rawQuery("select * from ma_tcp_retailsites where MA_TCP_ID = " + tcpID + " and InspectionDate is not null and InspectionDate != '' ", null);
            //res = db.rawQuery("select * from ma_tcp_retailsites where MA_TCP_ID = " + tcpID + " and s_status >=450 ", null);
            res.moveToFirst();

            if (res.isAfterLast() == false) {
                inspected = true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            if (db != null) {
                db.close();
            }
        }
        return inspected;
    }

    public List<MA_TCP_RetailSites> getMATCPRetailSits(Long tcpID, String userID) {

//        "CREATE TABLE IF NOT EXISTS  `ma_tcp_retailsites` (\n" +
//                "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//                "  `MA_TCP_ID` Integer(10) DEFAULT NULL,\n" +
//                "  `Server_TCP_code` Text(20) DEFAULT NULL,\n" +
//                "  `MA_RetailSites_id` Integer(20) DEFAULT NULL,\n" +
//                "  `CostCentreID` Text(20) DEFAULT NULL,\n" +
//                "  `CostCentreDesc` Text(200) DEFAULT NULL,\n" +
//                "  `Location` Text(200) DEFAULT NULL,\n" +
//                "  `District` Text(100) DEFAULT NULL,\n" +
//                "  `LastInspCode` Text(20) DEFAULT NULL,\n" +
//                "  `LastinspDate` date DEFAULT NULL,\n" +
//                "  `TourPlanning` Integer(2) DEFAULT NULL,\n" +
//                "  `visitDate` date DEFAULT NULL,\n" +
//                "  `TravelTime` Text(20) DEFAULT NULL,\n" +
//                "  `InspTime` Text(20) DEFAULT NULL,\n" +
//                "  `KMs` Text(10) DEFAULT NULL,\n" +
//                "  `VisitPurpose` Text(100) DEFAULT NULL,\n" +
//                "  `TourOrderNo` Integer(10) DEFAULT NULL,\n" +
//                "  `Status` Text(20) DEFAULT NULL,\n" +
//                "  `Status_IE_1` Integer(2) DEFAULT NULL,\n" +
//                "  `Status_IE_2` Integer(2) DEFAULT NULL,\n" +
//                "  `Status_IE_3` Integer(2) DEFAULT NULL,\n" +
//                "  `Status_IE_4` Integer(2) DEFAULT NULL,\n" +
//                "  `Status_IE_5` Integer(2) DEFAULT NULL,\n" +
//                "  `s_date` datetime DEFAULT CURRENT_TIMESTAMP,\n" +
//                "  `s_is_sync` Integer(20) DEFAULT NULL,\n" +
//                "  `s_status` Integer(20) DEFAULT NULL,\n" +
//                "  `s_long` Text(20) DEFAULT NULL,\n" +
//                "  `s_lat` Text(20) DEFAULT NULL\n" +
//                ") ;"

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<MA_TCP_RetailSites> list = null;
        try {
            list = new ArrayList<MA_TCP_RetailSites>();

            res = db.rawQuery("select * from ma_tcp_retailsites where MA_TCP_ID = " + tcpID + " order by TourPlanning desc, TourOrderNo asc", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

//                itemViewHolder.circularTextView.setText(position + 1 + "");
//                itemViewHolder.tvSiteName.setText(maRetailSites.getCostCentreDesc());
//                itemViewHolder.tvDate.setText(maRetailSites.getLastInspDate());
//                itemViewHolder.tvSiteAddress.setText(maRetailSites.getLocation());
//                itemViewHolder.tvCity.setText(maRetailSites.getDistrict());


                MA_TCP_RetailSites maTCPRetailSites = new MA_TCP_RetailSites();
                maTCPRetailSites.setId(res.getInt(res.getColumnIndex("id")));
                maTCPRetailSites.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
                maTCPRetailSites.setServer_TCP_code(res.getString(res.getColumnIndex("Server_TCP_code")));
                maTCPRetailSites.setMA_RetailSites_id(res.getInt(res.getColumnIndex("MA_RetailSites_id")));
                maTCPRetailSites.setDocID(res.getString(res.getColumnIndex("DocID")));
                maTCPRetailSites.setDocName(res.getString(res.getColumnIndex("DocName")));
                maTCPRetailSites.setCostCentreID(res.getString(res.getColumnIndex("CostCentreID")));
                maTCPRetailSites.setCostCentreDesc(res.getString(res.getColumnIndex("CostCentreDesc")));
                maTCPRetailSites.setDistrict(res.getString(res.getColumnIndex("District")));
                maTCPRetailSites.setLocation(res.getString(res.getColumnIndex("Location")));
                maTCPRetailSites.setLastinspDate(res.getString(res.getColumnIndex("LastinspDate")));
                maTCPRetailSites.setLastInspCode(res.getString(res.getColumnIndex("LastInspCode")));
                maTCPRetailSites.setTourPlanning(res.getString(res.getColumnIndex("TourPlanning")));
                maTCPRetailSites.setVisitDate(res.getString(res.getColumnIndex("visitDate")));
                maTCPRetailSites.setTravelTime(res.getString(res.getColumnIndex("TravelTime")));
                maTCPRetailSites.setInspTime(res.getString(res.getColumnIndex("InspTime")));
                maTCPRetailSites.setKMs(res.getString(res.getColumnIndex("KMs")));
                maTCPRetailSites.setVisitPurpose(res.getString(res.getColumnIndex("VisitPurpose")));
                maTCPRetailSites.setTourOrderNo(res.getString(res.getColumnIndex("TourOrderNo")));
                maTCPRetailSites.setCocoSite(res.getString(res.getColumnIndex("CocoSite")));
                maTCPRetailSites.setInspectionDate(res.getString(res.getColumnIndex("InspectionDate")));
                maTCPRetailSites.setStatus(res.getString(res.getColumnIndex("Status")));

                maTCPRetailSites.setComment(res.getString(res.getColumnIndex("Comment")));
                maTCPRetailSites.setCommentedDate(res.getString(res.getColumnIndex("CommentedDate")));
                maTCPRetailSites.setCommentedBy(res.getString(res.getColumnIndex("CommentedBy")));

                maTCPRetailSites.setStatus_IE_1(res.getInt(res.getColumnIndex("Status_IE_1")));
                maTCPRetailSites.setStatus_IE_2(res.getInt(res.getColumnIndex("Status_IE_2")));
                maTCPRetailSites.setStatus_IE_3(res.getInt(res.getColumnIndex("Status_IE_3")));
                maTCPRetailSites.setStatus_IE_4(res.getInt(res.getColumnIndex("Status_IE_4")));
                maTCPRetailSites.setStatus_IE_5(res.getInt(res.getColumnIndex("Status_IE_5")));


                maTCPRetailSites.setS_date(res.getString(res.getColumnIndex("s_date")));
                maTCPRetailSites.setS_status(res.getInt(res.getColumnIndex("s_status")));
                maTCPRetailSites.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                maTCPRetailSites.setS_long(res.getString(res.getColumnIndex("s_long")));
                maTCPRetailSites.setS_lat(res.getString(res.getColumnIndex("s_lat")));

                //TODO add all fields (SARFRAZ UPDATE)
                list.add(maTCPRetailSites);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            if (db != null) {
                db.close();
            }
        }
        return list;
    }

    public List<MA_TCP_RetailSites> getMATCPRetailSitsPlannedByStatus(long id) {

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<MA_TCP_RetailSites> list = null;
        try {
            list = new ArrayList<MA_TCP_RetailSites>();

            res = db.rawQuery("select * from ma_tcp_retailsites where MA_TCP_ID = " + id + " and TourPlanning = 1", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                MA_TCP_RetailSites maTCPRetailSites = new MA_TCP_RetailSites();
                maTCPRetailSites.setId(res.getInt(res.getColumnIndex("id")));
                maTCPRetailSites.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
                maTCPRetailSites.setServer_TCP_code(res.getString(res.getColumnIndex("Server_TCP_code")));
                maTCPRetailSites.setMA_RetailSites_id(res.getInt(res.getColumnIndex("MA_RetailSites_id")));
                maTCPRetailSites.setDocID(res.getString(res.getColumnIndex("DocID")));
                maTCPRetailSites.setDocName(res.getString(res.getColumnIndex("DocName")));
                maTCPRetailSites.setCostCentreID(res.getString(res.getColumnIndex("CostCentreID")));
                maTCPRetailSites.setCostCentreDesc(res.getString(res.getColumnIndex("CostCentreDesc")));
                maTCPRetailSites.setDistrict(res.getString(res.getColumnIndex("District")));
                maTCPRetailSites.setLocation(res.getString(res.getColumnIndex("Location")));
                maTCPRetailSites.setLastinspDate(res.getString(res.getColumnIndex("LastinspDate")));
                maTCPRetailSites.setLastInspCode(res.getString(res.getColumnIndex("LastInspCode")));
                maTCPRetailSites.setTourPlanning(res.getString(res.getColumnIndex("TourPlanning")));
                maTCPRetailSites.setVisitDate(res.getString(res.getColumnIndex("visitDate")));
                maTCPRetailSites.setTravelTime(res.getString(res.getColumnIndex("TravelTime")));
                maTCPRetailSites.setInspTime(res.getString(res.getColumnIndex("InspTime")));
                maTCPRetailSites.setKMs(res.getString(res.getColumnIndex("KMs")));
                maTCPRetailSites.setVisitPurpose(res.getString(res.getColumnIndex("VisitPurpose")));
                maTCPRetailSites.setTourOrderNo(res.getString(res.getColumnIndex("TourOrderNo")));
                maTCPRetailSites.setCocoSite(res.getString(res.getColumnIndex("CocoSite")));
                maTCPRetailSites.setInspectionDate(res.getString(res.getColumnIndex("InspectionDate")));
                maTCPRetailSites.setStatus(res.getString(res.getColumnIndex("Status")));
                maTCPRetailSites.setStatus_IE_1(res.getInt(res.getColumnIndex("Status_IE_1")));
                maTCPRetailSites.setStatus_IE_2(res.getInt(res.getColumnIndex("Status_IE_2")));
                maTCPRetailSites.setStatus_IE_3(res.getInt(res.getColumnIndex("Status_IE_3")));
                maTCPRetailSites.setStatus_IE_4(res.getInt(res.getColumnIndex("Status_IE_4")));
                maTCPRetailSites.setStatus_IE_5(res.getInt(res.getColumnIndex("Status_IE_5")));


                maTCPRetailSites.setS_date(res.getString(res.getColumnIndex("s_date")));
                maTCPRetailSites.setS_status(res.getInt(res.getColumnIndex("s_status")));
                maTCPRetailSites.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                maTCPRetailSites.setS_long(res.getString(res.getColumnIndex("s_long")));
                maTCPRetailSites.setS_lat(res.getString(res.getColumnIndex("s_lat")));

                //TODO add all fields (SARFRAZ UPDATE)
                list.add(maTCPRetailSites);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            if (db != null) {
                db.close();
            }
        }
        return list;
    }


    public List<MA_TCP_RetailSites> getMATCPRetailSitsTemp(long id) {

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<MA_TCP_RetailSites> list = null;
        try {
            list = new ArrayList<MA_TCP_RetailSites>();

            res = db.rawQuery("select * from ma_tcp_retailsites where MA_TCP_ID = " + id + " order by TourOrderNo", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                MA_TCP_RetailSites maTCPRetailSites = new MA_TCP_RetailSites();
                maTCPRetailSites.setId(res.getInt(res.getColumnIndex("id")));
                maTCPRetailSites.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
                maTCPRetailSites.setServer_TCP_code(res.getString(res.getColumnIndex("Server_TCP_code")));
                maTCPRetailSites.setMA_RetailSites_id(res.getInt(res.getColumnIndex("MA_RetailSites_id")));
                maTCPRetailSites.setDocID(res.getString(res.getColumnIndex("DocID")));
                maTCPRetailSites.setDocName(res.getString(res.getColumnIndex("DocName")));
                maTCPRetailSites.setCostCentreID(res.getString(res.getColumnIndex("CostCentreID")));
                maTCPRetailSites.setCostCentreDesc(res.getString(res.getColumnIndex("CostCentreDesc")));
                maTCPRetailSites.setDistrict(res.getString(res.getColumnIndex("District")));
                maTCPRetailSites.setLocation(res.getString(res.getColumnIndex("Location")));
                maTCPRetailSites.setLastinspDate(res.getString(res.getColumnIndex("LastinspDate")));
                maTCPRetailSites.setLastInspCode(res.getString(res.getColumnIndex("LastInspCode")));
                maTCPRetailSites.setTourPlanning(res.getString(res.getColumnIndex("TourPlanning")));
                maTCPRetailSites.setVisitDate(res.getString(res.getColumnIndex("visitDate")));
                maTCPRetailSites.setTravelTime(res.getString(res.getColumnIndex("TravelTime")));
                maTCPRetailSites.setInspTime(res.getString(res.getColumnIndex("InspTime")));
                maTCPRetailSites.setKMs(res.getString(res.getColumnIndex("KMs")));
                maTCPRetailSites.setVisitPurpose(res.getString(res.getColumnIndex("VisitPurpose")));
                maTCPRetailSites.setTourOrderNo(res.getString(res.getColumnIndex("TourOrderNo")));
                maTCPRetailSites.setCocoSite(res.getString(res.getColumnIndex("CocoSite")));
                maTCPRetailSites.setInspectionDate(res.getString(res.getColumnIndex("InspectionDate")));
                maTCPRetailSites.setStatus(res.getString(res.getColumnIndex("Status")));
                maTCPRetailSites.setStatus_IE_1(res.getInt(res.getColumnIndex("Status_IE_1")));
                maTCPRetailSites.setStatus_IE_2(res.getInt(res.getColumnIndex("Status_IE_2")));
                maTCPRetailSites.setStatus_IE_3(res.getInt(res.getColumnIndex("Status_IE_3")));
                maTCPRetailSites.setStatus_IE_4(res.getInt(res.getColumnIndex("Status_IE_4")));
                maTCPRetailSites.setStatus_IE_5(res.getInt(res.getColumnIndex("Status_IE_5")));


                maTCPRetailSites.setComment(res.getString(res.getColumnIndex("Comment")));
                maTCPRetailSites.setCommentedDate(res.getString(res.getColumnIndex("CommentedDate")));
                maTCPRetailSites.setCommentedBy(res.getString(res.getColumnIndex("CommentedBy")));

                maTCPRetailSites.setS_date(res.getString(res.getColumnIndex("s_date")));
                maTCPRetailSites.setS_status(res.getInt(res.getColumnIndex("s_status")));
                maTCPRetailSites.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                maTCPRetailSites.setS_long(res.getString(res.getColumnIndex("s_long")));
                maTCPRetailSites.setS_lat(res.getString(res.getColumnIndex("s_lat")));

                //TODO add all fields (SARFRAZ UPDATE)
                list.add(maTCPRetailSites);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            if (db != null) {
                db.close();
            }
        }
        return list;
    }


    public MA_TCP_RetailSites getMA_TCPRetailSitsTemp(int id) {

        Cursor res = null;
        MA_TCP_RetailSites maTCPRetailSites = new MA_TCP_RetailSites();
        try {

            SQLiteDatabase db = this.getReadableDatabase();
            res = db.rawQuery("select * from ma_tcp_retailsites where MA_TCP_ID = " + id, null);


            if (res != null && res.moveToFirst()) {


                maTCPRetailSites.setId(res.getInt(res.getColumnIndex("id")));
                maTCPRetailSites.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
                maTCPRetailSites.setServer_TCP_code(res.getString(res.getColumnIndex("Server_TCP_code")));
                maTCPRetailSites.setMA_RetailSites_id(res.getInt(res.getColumnIndex("MA_RetailSites_id")));
                maTCPRetailSites.setDocID(res.getString(res.getColumnIndex("DocID")));
                maTCPRetailSites.setDocName(res.getString(res.getColumnIndex("DocName")));
                maTCPRetailSites.setCostCentreID(res.getString(res.getColumnIndex("CostCentreID")));
                maTCPRetailSites.setCostCentreDesc(res.getString(res.getColumnIndex("CostCentreDesc")));
                maTCPRetailSites.setDistrict(res.getString(res.getColumnIndex("District")));
                maTCPRetailSites.setLocation(res.getString(res.getColumnIndex("Location")));
                maTCPRetailSites.setLastinspDate(res.getString(res.getColumnIndex("LastinspDate")));
                maTCPRetailSites.setLastInspCode(res.getString(res.getColumnIndex("LastInspCode")));
                maTCPRetailSites.setTourPlanning(res.getString(res.getColumnIndex("TourPlanning")));
                maTCPRetailSites.setVisitDate(res.getString(res.getColumnIndex("visitDate")));
                maTCPRetailSites.setTravelTime(res.getString(res.getColumnIndex("TravelTime")));
                maTCPRetailSites.setInspTime(res.getString(res.getColumnIndex("InspTime")));
                maTCPRetailSites.setKMs(res.getString(res.getColumnIndex("KMs")));
                maTCPRetailSites.setVisitPurpose(res.getString(res.getColumnIndex("VisitPurpose")));
                maTCPRetailSites.setTourOrderNo(res.getString(res.getColumnIndex("TourOrderNo")));
                maTCPRetailSites.setCocoSite(res.getString(res.getColumnIndex("CocoSite")));
                maTCPRetailSites.setInspectionDate(res.getString(res.getColumnIndex("InspectionDate")));
                maTCPRetailSites.setStatus(res.getString(res.getColumnIndex("Status")));
                maTCPRetailSites.setStatus_IE_1(res.getInt(res.getColumnIndex("Status_IE_1")));
                maTCPRetailSites.setStatus_IE_2(res.getInt(res.getColumnIndex("Status_IE_2")));
                maTCPRetailSites.setStatus_IE_3(res.getInt(res.getColumnIndex("Status_IE_3")));
                maTCPRetailSites.setStatus_IE_4(res.getInt(res.getColumnIndex("Status_IE_4")));
                maTCPRetailSites.setStatus_IE_5(res.getInt(res.getColumnIndex("Status_IE_5")));


                maTCPRetailSites.setS_date(res.getString(res.getColumnIndex("s_date")));
                maTCPRetailSites.setS_status(res.getInt(res.getColumnIndex("s_status")));
                maTCPRetailSites.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                maTCPRetailSites.setS_long(res.getString(res.getColumnIndex("s_long")));
                maTCPRetailSites.setS_lat(res.getString(res.getColumnIndex("s_lat")));

                //TODO add all fields (SARFRAZ UPDATE)
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
        }
        return maTCPRetailSites;
    }


    public List<MA_TCP_RetailSites> getMA_TCPRetailSitsByStatusOffline(int s_status) {

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<MA_TCP_RetailSites> listMATCPRetailSites = new ArrayList<>();
        MA_TCP_RetailSites maTCPRetailSites = new MA_TCP_RetailSites();
        try {


            res = db.rawQuery("select * from ma_tcp_retailsites where s_status = " + s_status + " and s_is_sync = -1", null);


            if (res != null && res.moveToFirst()) {

                while (res.isAfterLast() == false) {

                    maTCPRetailSites.setId(res.getInt(res.getColumnIndex("id")));
                    maTCPRetailSites.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
                    maTCPRetailSites.setServer_TCP_code(res.getString(res.getColumnIndex("Server_TCP_code")));
                    maTCPRetailSites.setMA_RetailSites_id(res.getInt(res.getColumnIndex("MA_RetailSites_id")));
                    maTCPRetailSites.setDocID(res.getString(res.getColumnIndex("DocID")));
                    maTCPRetailSites.setDocName(res.getString(res.getColumnIndex("DocName")));
                    maTCPRetailSites.setCostCentreID(res.getString(res.getColumnIndex("CostCentreID")));
                    maTCPRetailSites.setCostCentreDesc(res.getString(res.getColumnIndex("CostCentreDesc")));
                    maTCPRetailSites.setDistrict(res.getString(res.getColumnIndex("District")));
                    maTCPRetailSites.setLocation(res.getString(res.getColumnIndex("Location")));
                    maTCPRetailSites.setLastinspDate(res.getString(res.getColumnIndex("LastinspDate")));
                    maTCPRetailSites.setLastInspCode(res.getString(res.getColumnIndex("LastInspCode")));
                    maTCPRetailSites.setTourPlanning(res.getString(res.getColumnIndex("TourPlanning")));
                    maTCPRetailSites.setVisitDate(res.getString(res.getColumnIndex("visitDate")));
                    maTCPRetailSites.setTravelTime(res.getString(res.getColumnIndex("TravelTime")));
                    maTCPRetailSites.setInspTime(res.getString(res.getColumnIndex("InspTime")));
                    maTCPRetailSites.setKMs(res.getString(res.getColumnIndex("KMs")));
                    maTCPRetailSites.setComment(res.getString(res.getColumnIndex("Comment")));
                    maTCPRetailSites.setVisitPurpose(res.getString(res.getColumnIndex("VisitPurpose")));
                    maTCPRetailSites.setTourOrderNo(res.getString(res.getColumnIndex("TourOrderNo")));
                    maTCPRetailSites.setCocoSite(res.getString(res.getColumnIndex("CocoSite")));
                    maTCPRetailSites.setInspectionDate(res.getString(res.getColumnIndex("InspectionDate")));
                    maTCPRetailSites.setStatus(res.getString(res.getColumnIndex("Status")));
                    maTCPRetailSites.setStatus_IE_1(res.getInt(res.getColumnIndex("Status_IE_1")));
                    maTCPRetailSites.setStatus_IE_2(res.getInt(res.getColumnIndex("Status_IE_2")));
                    maTCPRetailSites.setStatus_IE_3(res.getInt(res.getColumnIndex("Status_IE_3")));
                    maTCPRetailSites.setStatus_IE_4(res.getInt(res.getColumnIndex("Status_IE_4")));
                    maTCPRetailSites.setStatus_IE_5(res.getInt(res.getColumnIndex("Status_IE_5")));


                    maTCPRetailSites.setS_date(res.getString(res.getColumnIndex("s_date")));
                    maTCPRetailSites.setS_status(res.getInt(res.getColumnIndex("s_status")));
                    maTCPRetailSites.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                    maTCPRetailSites.setS_long(res.getString(res.getColumnIndex("s_long")));
                    maTCPRetailSites.setS_lat(res.getString(res.getColumnIndex("s_lat")));

                    listMATCPRetailSites.add(maTCPRetailSites);
                    res.moveToNext();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            if (db != null) {
                db.close();
            }
        }
        return listMATCPRetailSites;
    }

    public MA_TCP_RetailSites getMA_TCPRetailSitsTempFromID(int id) {

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        MA_TCP_RetailSites maTCPRetailSites = new MA_TCP_RetailSites();
        try {


            res = db.rawQuery("select * from ma_tcp_retailsites where id = " + id, null);


            if (res != null && res.moveToFirst()) {


                maTCPRetailSites.setId(res.getInt(res.getColumnIndex("id")));
                maTCPRetailSites.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
                maTCPRetailSites.setServer_TCP_code(res.getString(res.getColumnIndex("Server_TCP_code")));
                maTCPRetailSites.setMA_RetailSites_id(res.getInt(res.getColumnIndex("MA_RetailSites_id")));
                maTCPRetailSites.setDocID(res.getString(res.getColumnIndex("DocID")));
                maTCPRetailSites.setDocName(res.getString(res.getColumnIndex("DocName")));
                maTCPRetailSites.setCostCentreID(res.getString(res.getColumnIndex("CostCentreID")));
                maTCPRetailSites.setCostCentreDesc(res.getString(res.getColumnIndex("CostCentreDesc")));
                maTCPRetailSites.setDistrict(res.getString(res.getColumnIndex("District")));
                maTCPRetailSites.setLocation(res.getString(res.getColumnIndex("Location")));
                maTCPRetailSites.setLastinspDate(res.getString(res.getColumnIndex("LastinspDate")));
                maTCPRetailSites.setLastInspCode(res.getString(res.getColumnIndex("LastInspCode")));
                maTCPRetailSites.setTourPlanning(res.getString(res.getColumnIndex("TourPlanning")));
                maTCPRetailSites.setVisitDate(res.getString(res.getColumnIndex("visitDate")));
                maTCPRetailSites.setTravelTime(res.getString(res.getColumnIndex("TravelTime")));
                maTCPRetailSites.setInspTime(res.getString(res.getColumnIndex("InspTime")));
                maTCPRetailSites.setKMs(res.getString(res.getColumnIndex("KMs")));
                maTCPRetailSites.setVisitPurpose(res.getString(res.getColumnIndex("VisitPurpose")));
                maTCPRetailSites.setTourOrderNo(res.getString(res.getColumnIndex("TourOrderNo")));
                maTCPRetailSites.setCocoSite(res.getString(res.getColumnIndex("CocoSite")));
                maTCPRetailSites.setInspectionDate(res.getString(res.getColumnIndex("InspectionDate")));
                maTCPRetailSites.setStatus(res.getString(res.getColumnIndex("Status")));
                maTCPRetailSites.setStatus_IE_1(res.getInt(res.getColumnIndex("Status_IE_1")));
                maTCPRetailSites.setStatus_IE_2(res.getInt(res.getColumnIndex("Status_IE_2")));
                maTCPRetailSites.setStatus_IE_3(res.getInt(res.getColumnIndex("Status_IE_3")));
                maTCPRetailSites.setStatus_IE_4(res.getInt(res.getColumnIndex("Status_IE_4")));
                maTCPRetailSites.setStatus_IE_5(res.getInt(res.getColumnIndex("Status_IE_5")));


                maTCPRetailSites.setS_date(res.getString(res.getColumnIndex("s_date")));
                maTCPRetailSites.setS_status(res.getInt(res.getColumnIndex("s_status")));
                maTCPRetailSites.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                maTCPRetailSites.setS_long(res.getString(res.getColumnIndex("s_long")));
                maTCPRetailSites.setS_lat(res.getString(res.getColumnIndex("s_lat")));

                //TODO add all fields (SARFRAZ UPDATE)
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            if (db != null) {
                db.close();
            }
        }
        return maTCPRetailSites;
    }

    public MA_TCP_RetailSites getMA_TCPRetailSitsfromTCPandCostCentreID(String Server_TCP_code, String CostCentreID) {

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        MA_TCP_RetailSites maTCPRetailSites = new MA_TCP_RetailSites();
        try {


            res = db.rawQuery("select * from ma_tcp_retailsites where Server_TCP_code = '" + Server_TCP_code + "' AND  CostCentreID = '" + CostCentreID + "'", null);


            if (res != null && res.moveToFirst()) {


                maTCPRetailSites.setId(res.getInt(res.getColumnIndex("id")));
                maTCPRetailSites.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
                maTCPRetailSites.setServer_TCP_code(res.getString(res.getColumnIndex("Server_TCP_code")));
                maTCPRetailSites.setMA_RetailSites_id(res.getInt(res.getColumnIndex("MA_RetailSites_id")));
                maTCPRetailSites.setDocID(res.getString(res.getColumnIndex("DocID")));
                maTCPRetailSites.setDocName(res.getString(res.getColumnIndex("DocName")));
                maTCPRetailSites.setCostCentreID(res.getString(res.getColumnIndex("CostCentreID")));
                maTCPRetailSites.setCostCentreDesc(res.getString(res.getColumnIndex("CostCentreDesc")));
                maTCPRetailSites.setDistrict(res.getString(res.getColumnIndex("District")));
                maTCPRetailSites.setLocation(res.getString(res.getColumnIndex("Location")));
                maTCPRetailSites.setLastinspDate(res.getString(res.getColumnIndex("LastinspDate")));
                maTCPRetailSites.setLastInspCode(res.getString(res.getColumnIndex("LastInspCode")));
                maTCPRetailSites.setTourPlanning(res.getString(res.getColumnIndex("TourPlanning")));
                maTCPRetailSites.setVisitDate(res.getString(res.getColumnIndex("visitDate")));
                maTCPRetailSites.setTravelTime(res.getString(res.getColumnIndex("TravelTime")));
                maTCPRetailSites.setInspTime(res.getString(res.getColumnIndex("InspTime")));
                maTCPRetailSites.setKMs(res.getString(res.getColumnIndex("KMs")));
                maTCPRetailSites.setVisitPurpose(res.getString(res.getColumnIndex("VisitPurpose")));
                maTCPRetailSites.setTourOrderNo(res.getString(res.getColumnIndex("TourOrderNo")));
                maTCPRetailSites.setCocoSite(res.getString(res.getColumnIndex("CocoSite")));
                maTCPRetailSites.setInspectionDate(res.getString(res.getColumnIndex("InspectionDate")));
                maTCPRetailSites.setStatus(res.getString(res.getColumnIndex("Status")));
                maTCPRetailSites.setStatus_IE_1(res.getInt(res.getColumnIndex("Status_IE_1")));
                maTCPRetailSites.setStatus_IE_2(res.getInt(res.getColumnIndex("Status_IE_2")));
                maTCPRetailSites.setStatus_IE_3(res.getInt(res.getColumnIndex("Status_IE_3")));
                maTCPRetailSites.setStatus_IE_4(res.getInt(res.getColumnIndex("Status_IE_4")));
                maTCPRetailSites.setStatus_IE_5(res.getInt(res.getColumnIndex("Status_IE_5")));


                maTCPRetailSites.setS_date(res.getString(res.getColumnIndex("s_date")));
                maTCPRetailSites.setS_status(res.getInt(res.getColumnIndex("s_status")));
                maTCPRetailSites.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                maTCPRetailSites.setS_long(res.getString(res.getColumnIndex("s_long")));
                maTCPRetailSites.setS_lat(res.getString(res.getColumnIndex("s_lat")));

                //TODO add all fields (SARFRAZ UPDATE)
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            if (db != null) {
                db.close();
            }
        }
        return maTCPRetailSites;
    }

    public List<Product> getProductList(int MA_TCP_ID, int MA_TCP_Retailsites_id) {

        //        "CREATE TABLE IF NOT EXISTS `ma_tankdips` (\n" +
//                "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//                "  `MA_TCP_ID` Integer(10) DEFAULT NULL,\n" +
//                "  `Server_TCP_code` Text(20) DEFAULT NULL,\n" +
//                "  `MA_TCP_Retailsites_id` Text(20) DEFAULT NULL,\n" +
//                "  `CostCentreID` Text(20) DEFAULT NULL,\n" +
//                "  `Product_code` Text(20) DEFAULT NULL,\n" +
//                "  `Product_desc` Text(20) DEFAULT NULL,\n" +
//                "  `Tank_code` Text(20) DEFAULT NULL,\n" +
//                "  `Tank_desc` Text(20) DEFAULT NULL,\n" +
//                "  `Dip_Stock_M` Text(20) DEFAULT NULL,\n" +
//                "  `Dip_Stock_L` Text(20) DEFAULT NULL,\n" +
//                "  `StockType` Text(20) DEFAULT NULL,\n" +
//                "  `s_date` datetime DEFAULT CURRENT_TIMESTAMP,\n" +
//                "  `s_is_sync` Integer(20) DEFAULT NULL,\n" +
//                "  `s_status` Integer(20) DEFAULT NULL,\n" +
//                "  `s_long` Text(20) DEFAULT NULL,\n" +
//                "  `s_lat` Text(20) DEFAULT NULL\n" +
//                ") ;"

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<Product> list = null;
        try {
            list = new ArrayList<Product>();

            res = db.rawQuery("select Distinct Product_code, Product_desc from ma_tankdips where MA_TCP_ID = '" + MA_TCP_ID + "' and MA_TCP_Retailsites_id = '" + MA_TCP_Retailsites_id + "'", null);
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                Product product = new Product();
                product.setProductCode(res.getString(res.getColumnIndex("Product_code")));
                product.setProductDesc(res.getString(res.getColumnIndex("Product_desc")));
                list.add(product);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return list;
    }

    public List<MA_TANKDIPS> getTankDipList(int MA_TCP_ID, int MA_TCP_Retailsites_id, String Product_code) {
        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<MA_TANKDIPS> list = null;
        try {
            list = new ArrayList<MA_TANKDIPS>();

            //TODO
//            "CREATE TABLE IF NOT EXISTS `ma_tankdips` (\n" +
//                    "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//                    "  `MA_TCP_ID` Integer(10) DEFAULT NULL,\n" +
//                    "  `Server_TCP_code` Text(20) DEFAULT NULL,\n" +
//                    "  `MA_TCP_Retailsites_id` Text(20) DEFAULT NULL,\n" +
//                    "  `CostCentreID` Text(20) DEFAULT NULL,\n" +
//                    "  `Product_code` Text(20) DEFAULT NULL,\n" +
//                    "  `Product_desc` Text(20) DEFAULT NULL,\n" +
//                    "  `Tank_code` Text(20) DEFAULT NULL,\n" +
//                    "  `Tank_desc` Text(20) DEFAULT NULL,\n" +
//                    "  `Dip_Stock_M` Text(20) DEFAULT NULL,\n" +
//                    "  `Dip_Stock_L` Text(20) DEFAULT NULL,\n" +
//                    "  `StockType` Text(20) DEFAULT NULL,\n" +
//                    "  `s_date` datetime DEFAULT CURRENT_TIMESTAMP,\n" +
//                    "  `s_is_sync` Integer(20) DEFAULT NULL,\n" +
//                    "  `s_status` Integer(20) DEFAULT NULL,\n" +
//                    "  `s_long` Text(20) DEFAULT NULL,\n" +
//                    "  `s_lat` Text(20) DEFAULT NULL\n" +
//                    ") ;"

            res = db.rawQuery("select Distinct Tank_code, Tank_desc, id, MA_TCP_ID, Server_TCP_code , MA_TCP_Retailsites_id , CostCentreID," +
                    " Product_code, Product_desc , Dip_Stock_M , Dip_Stock_L , StockType , s_date , s_is_sync , s_status , s_long , s_lat  from ma_tankdips where MA_TCP_ID = '" + MA_TCP_ID + "' and MA_TCP_Retailsites_id = '" + MA_TCP_Retailsites_id + "' and Product_code = '" + Product_code + "'", null);
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                MA_TANKDIPS tankDip = new MA_TANKDIPS();
                tankDip.setId(res.getInt(res.getColumnIndex("id")));
                tankDip.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
                tankDip.setServer_TCP_code(res.getString(res.getColumnIndex("Server_TCP_code")));
                tankDip.setMA_TCP_Retailsites_id(res.getString(res.getColumnIndex("MA_TCP_Retailsites_id")));
                tankDip.setCostCentreID(res.getString(res.getColumnIndex("CostCentreID")));
                tankDip.setProduct_code(res.getString(res.getColumnIndex("Product_code")));
                tankDip.setProduct_desc(res.getString(res.getColumnIndex("Product_desc")));
                tankDip.setDip_Stock_M(res.getString(res.getColumnIndex("Dip_Stock_M")));
                tankDip.setDip_Stock_L(res.getString(res.getColumnIndex("Dip_Stock_L")));
                tankDip.setStockType(res.getString(res.getColumnIndex("StockType")));
                tankDip.setS_date(res.getString(res.getColumnIndex("s_date")));
                tankDip.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                tankDip.setS_status(res.getInt(res.getColumnIndex("s_status")));
                tankDip.setS_long(res.getString(res.getColumnIndex("s_long")));
                tankDip.setS_lat(res.getString(res.getColumnIndex("s_lat")));

                tankDip.setTank_code(res.getString(res.getColumnIndex("Tank_code")));
                tankDip.setTank_desc(res.getString(res.getColumnIndex("Tank_desc")));
                list.add(tankDip);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return list;
    }


    public List<MA_TANKDIPS> getTankDipListFromID(int MA_TCP_Retailsites_id) {
        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<com.t4s.apl.Models.MA_TANKDIPS> list = null;
        try {
            list = new ArrayList<com.t4s.apl.Models.MA_TANKDIPS>();

            //TODO
//            "CREATE TABLE IF NOT EXISTS `ma_tankdips` (\n" +
//                    "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//                    "  `MA_TCP_ID` Integer(10) DEFAULT NULL,\n" +
//                    "  `Server_TCP_code` Text(20) DEFAULT NULL,\n" +
//                    "  `MA_TCP_Retailsites_id` Text(20) DEFAULT NULL,\n" +
//                    "  `CostCentreID` Text(20) DEFAULT NULL,\n" +
//                    "  `Product_code` Text(20) DEFAULT NULL,\n" +
//                    "  `Product_desc` Text(20) DEFAULT NULL,\n" +
//                    "  `Tank_code` Text(20) DEFAULT NULL,\n" +
//                    "  `Tank_desc` Text(20) DEFAULT NULL,\n" +
//                    "  `Dip_Stock_M` Text(20) DEFAULT NULL,\n" +
//                    "  `Dip_Stock_L` Text(20) DEFAULT NULL,\n" +
//                    "  `StockType` Text(20) DEFAULT NULL,\n" +
//                    "  `s_date` datetime DEFAULT CURRENT_TIMESTAMP,\n" +
//                    "  `s_is_sync` Integer(20) DEFAULT NULL,\n" +
//                    "  `s_status` Integer(20) DEFAULT NULL,\n" +
//                    "  `s_long` Text(20) DEFAULT NULL,\n" +
//                    "  `s_lat` Text(20) DEFAULT NULL\n" +
//                    ") ;"

            res = db.rawQuery("select *  from ma_tankdips where  MA_TCP_Retailsites_id = " + MA_TCP_Retailsites_id, null);
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                com.t4s.apl.Models.MA_TANKDIPS tankDip = new com.t4s.apl.Models.MA_TANKDIPS();
                tankDip.setId(res.getInt(res.getColumnIndex("id")));
                tankDip.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
                tankDip.setServer_TCP_code(res.getString(res.getColumnIndex("Server_TCP_code")));
                tankDip.setMA_TCP_Retailsites_id(res.getString(res.getColumnIndex("MA_TCP_Retailsites_id")));
                tankDip.setCostCentreID(res.getString(res.getColumnIndex("CostCentreID")));
                tankDip.setProduct_code(res.getString(res.getColumnIndex("Product_code")));
                tankDip.setProduct_desc(res.getString(res.getColumnIndex("Product_desc")));
                tankDip.setDip_Stock_M(res.getString(res.getColumnIndex("Dip_Stock_M")));
                tankDip.setDip_Stock_L(res.getString(res.getColumnIndex("Dip_Stock_L")));
                tankDip.setStockType(res.getString(res.getColumnIndex("StockType")));
                tankDip.setS_date(res.getString(res.getColumnIndex("s_date")));
                tankDip.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                tankDip.setS_status(res.getInt(res.getColumnIndex("s_status")));
                tankDip.setS_long(res.getString(res.getColumnIndex("s_long")));
                tankDip.setS_lat(res.getString(res.getColumnIndex("s_lat")));

                tankDip.setTank_code(res.getString(res.getColumnIndex("Tank_code")));
                tankDip.setTank_desc(res.getString(res.getColumnIndex("Tank_desc")));
                list.add(tankDip);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return list;
    }


    public List<Product> getProductListMeterReading(int ma_tcp_id, int rtsid) {

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<Product> list = null;
        try {
            list = new ArrayList<Product>();

            res = db.rawQuery("select Distinct Product_code, Product_desc from ma_meterreadings where MA_TCP_ID = '" + ma_tcp_id + "' and MA_TCP_Retailsites_id = " + rtsid, null);
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                Product product = new Product();
                product.setProductCode(res.getString(res.getColumnIndex("Product_code")));
                product.setProductDesc(res.getString(res.getColumnIndex("Product_desc")));
                list.add(product);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return list;
    }

    public void updateMA_TCP(MA_TCP ma_tcp) {
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            Long temp = createTCP_SUB(db, ma_tcp, true, 0);
        } catch (Exception e) {
        } finally {
            if (db != null) {
                db.close();
            }
        }
    }

    public void updateMA_TCPANDSITES(MA_TCP ma_tcp, List<MA_TCP_RetailSites> ma_tcp_retailSitesList) {
        SQLiteDatabase db = this.getReadableDatabase();
        try {

            Long temp = createTCP_SUB(db, ma_tcp, true, 0);
            temp = createTCP_SUB_RetailSites(db, ma_tcp.getId(), ma_tcp_retailSitesList, true);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }

    public List<Tank> getMA_MeterreadingTankList(int ma_tcp_id, String product_code, int rtsid) {
        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<Tank> list = null;
        try {
            list = new ArrayList<Tank>();
            res = db.rawQuery("select Distinct Tank_code, Tank_desc from ma_meterreadings where MA_TCP_ID = '" + ma_tcp_id + "' and Product_code ='" + product_code + "' and MA_TCP_Retailsites_id = '" + rtsid + "' ", null);
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                Tank tank = new Tank();
                tank.setTankCode(res.getString(res.getColumnIndex("Tank_code")));
                tank.setTankDesc(res.getString(res.getColumnIndex("Tank_desc")));
                list.add(tank);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return list;
    }


    public List<Nozzle> getMA_MeterreadingNozzelList(int ma_tcp_id, String product_code, String tankCode) {

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<Nozzle> list = null;
        try {
            list = new ArrayList<Nozzle>();
            res = db.rawQuery("select Distinct Nozzel_Meter_desc  from ma_meterreadings where MA_TCP_ID = '" + ma_tcp_id + "' and Product_code = '" + product_code + "' and Tank_code= '" + tankCode + "'", null);
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                Nozzle nozzle = new Nozzle();
                nozzle.setNozzel_Meter_desc(res.getString(res.getColumnIndex("Nozzel_Meter_desc")));
                list.add(nozzle);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return list;
    }

    public List<MA_Meterreading> getMA_MeterreadingList(int ma_tcp_id, String product_code, String tank_code, String Nozzel_Meter_code, int rtsid) {

//        "CREATE TABLE IF NOT EXISTS  `ma_meterreadings` (\n" +
//                "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//                "  `MA_TCP_ID` Integer(10) DEFAULT NULL,\n" +
//                "  `Server_tcp_code` Text(20) DEFAULT NULL,\n" +
//                "  `CostCentreID` Text(20) DEFAULT NULL,\n" +
//                "  `Product_code` Text(20) DEFAULT NULL,\n" +
//                "  `Product_desc` Text(20) DEFAULT NULL,\n" +
//                "  `Tank_code` Text(20) DEFAULT NULL,\n" +
//                "  `Tank_desc` Text(20) DEFAULT NULL,\n" +
//                "  `Nozzel_Meter_code` Text(20) DEFAULT NULL,\n" +
//                "  `Nozzel_Meter_desc` Text(50) DEFAULT NULL,\n" +
//                "  `Nozzel_code` Text(20) DEFAULT NULL,\n" +
//                "  `Nozzel_desc` Text(20) DEFAULT NULL,\n" +
//                "  `Opening` Text(20) DEFAULT NULL,\n" +
//                "  `Closing` Text(20) DEFAULT NULL,\n" +
//                "  `Sale` Text(20) DEFAULT NULL,\n" +
//                "  `To_date` date DEFAULT NULL,\n" +
//                "  `Status` Text(20) DEFAULT NULL,\n" +
//                "  `s_date` datetime DEFAULT CURRENT_TIMESTAMP,\n" +
//                "  `s_is_sync` Integer(20) DEFAULT NULL,\n" +
//                "  `s_status` Integer(20) DEFAULT NULL,\n" +
//                "  `s_long` Text(20) DEFAULT NULL,\n" +
//                "  `s_lat` Text(20) DEFAULT NULL\n" +
//                ") ;"
        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<MA_Meterreading> list = null;
        try {
            list = new ArrayList<MA_Meterreading>();


            res = db.rawQuery("select * from ma_meterreadings where MA_TCP_ID = '" + ma_tcp_id + "' and Product_code = '" + product_code + "' and Tank_code= '" + tank_code + "' and Nozzel_Meter_code= '" + Nozzel_Meter_code + "'", null);
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                MA_Meterreading ma_meterreading = new MA_Meterreading();
                ma_meterreading.setId(res.getInt(res.getColumnIndex("id")));
                ma_meterreading.setOpening(res.getString(res.getColumnIndex("Opening")));
                ma_meterreading.setClosing(res.getString(res.getColumnIndex("Closing")));
                ma_meterreading.setNozzel_code(res.getString(res.getColumnIndex("Nozzel_code")));
                ma_meterreading.setNozzel_Meter_code(res.getString(res.getColumnIndex("Nozzel_Meter_code")));
                ma_meterreading.setSale(res.getString(res.getColumnIndex("Sale")));
                ma_meterreading.setTo_date(res.getString(res.getColumnIndex("To_date")));
                ma_meterreading.setStatus(res.getString(res.getColumnIndex("Status")));
                ma_meterreading.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
                list.add(ma_meterreading);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return list;
    }

    public List<MA_Meterreading> getMA_MeterreadingListOnDesc(int ma_tcp_id, String product_code, String tank_code, String Nozzel_Meter_desc, int rtsid) {

//        "CREATE TABLE IF NOT EXISTS  `ma_meterreadings` (\n" +
//                "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//                "  `MA_TCP_ID` Integer(10) DEFAULT NULL,\n" +
//                "  `Server_tcp_code` Text(20) DEFAULT NULL,\n" +
//                "  `CostCentreID` Text(20) DEFAULT NULL,\n" +
//                "  `Product_code` Text(20) DEFAULT NULL,\n" +
//                "  `Product_desc` Text(20) DEFAULT NULL,\n" +
//                "  `Tank_code` Text(20) DEFAULT NULL,\n" +
//                "  `Tank_desc` Text(20) DEFAULT NULL,\n" +
//                "  `Nozzel_Meter_code` Text(20) DEFAULT NULL,\n" +
//                "  `Nozzel_Meter_desc` Text(50) DEFAULT NULL,\n" +
//                "  `Nozzel_code` Text(20) DEFAULT NULL,\n" +
//                "  `Nozzel_desc` Text(20) DEFAULT NULL,\n" +
//                "  `Opening` Text(20) DEFAULT NULL,\n" +
//                "  `Closing` Text(20) DEFAULT NULL,\n" +
//                "  `Sale` Text(20) DEFAULT NULL,\n" +
//                "  `To_date` date DEFAULT NULL,\n" +
//                "  `Status` Text(20) DEFAULT NULL,\n" +
//                "  `s_date` datetime DEFAULT CURRENT_TIMESTAMP,\n" +
//                "  `s_is_sync` Integer(20) DEFAULT NULL,\n" +
//                "  `s_status` Integer(20) DEFAULT NULL,\n" +
//                "  `s_long` Text(20) DEFAULT NULL,\n" +
//                "  `s_lat` Text(20) DEFAULT NULL\n" +
//                ") ;"
        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<MA_Meterreading> list = null;
        try {
            list = new ArrayList<MA_Meterreading>();
            res = db.rawQuery("select * from ma_meterreadings where MA_TCP_ID = '" + ma_tcp_id + "' and Product_code = '" + product_code + "' and Tank_code= '" + tank_code + "' and Nozzel_Meter_desc= '" + Nozzel_Meter_desc + "'", null);
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                MA_Meterreading ma_meterreading = new MA_Meterreading();
                ma_meterreading.setId(res.getInt(res.getColumnIndex("id")));
                ma_meterreading.setOpening(res.getString(res.getColumnIndex("Opening")));
                ma_meterreading.setClosing(res.getString(res.getColumnIndex("Closing")));
                ma_meterreading.setNozzel_code(res.getString(res.getColumnIndex("Nozzel_code")));
                ma_meterreading.setNozzel_Meter_code(res.getString(res.getColumnIndex("Nozzel_Meter_code")));
                ma_meterreading.setNozzel_Meter_desc(res.getString(res.getColumnIndex("Nozzel_Meter_desc")));
                ma_meterreading.setSale(res.getString(res.getColumnIndex("Sale")));
                ma_meterreading.setTo_date(res.getString(res.getColumnIndex("To_date")));
                ma_meterreading.setStatus(res.getString(res.getColumnIndex("Status")));
                ma_meterreading.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
                list.add(ma_meterreading);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return list;
    }

    public void dummyupdate() {
        SQLiteDatabase db = this.getReadableDatabase();

        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("Nozzel_Meter_desc", "Dispenser 1-Nozzle 1");

            int NumOfRowsUpdated = db.update("ma_meterreadings", contentValues, "id = 2", null);
            Log.d("rows updated:", NumOfRowsUpdated + "");
            //   res = db.rawQuery("update ma_meterreadings set Nozzel_Meter_desc = 'Dispenser 1-Nozzle 1' where id = 2", null);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

    }

    public List<MA_Meterreading> getMA_MeterreadingListFromID(int ma_tcp_id) {

//        "CREATE TABLE IF NOT EXISTS  `ma_meterreadings` (\n" +
//                "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//                "  `MA_TCP_ID` Integer(10) DEFAULT NULL,\n" +
//                "  `Server_tcp_code` Text(20) DEFAULT NULL,\n" +
//                "  `CostCentreID` Text(20) DEFAULT NULL,\n" +
//                "  `Product_code` Text(20) DEFAULT NULL,\n" +
//                "  `Product_desc` Text(20) DEFAULT NULL,\n" +
//                "  `Tank_code` Text(20) DEFAULT NULL,\n" +
//                "  `Tank_desc` Text(20) DEFAULT NULL,\n" +
//                "  `Nozzel_Meter_code` Text(20) DEFAULT NULL,\n" +
//                "  `Nozzel_Meter_desc` Text(50) DEFAULT NULL,\n" +
//                "  `Nozzel_code` Text(20) DEFAULT NULL,\n" +
//                "  `Nozzel_desc` Text(20) DEFAULT NULL,\n" +
//                "  `Opening` Text(20) DEFAULT NULL,\n" +
//                "  `Closing` Text(20) DEFAULT NULL,\n" +
//                "  `Sale` Text(20) DEFAULT NULL,\n" +
//                "  `To_date` date DEFAULT NULL,\n" +
//                "  `Status` Text(20) DEFAULT NULL,\n" +
//                "  `s_date` datetime DEFAULT CURRENT_TIMESTAMP,\n" +
//                "  `s_is_sync` Integer(20) DEFAULT NULL,\n" +
//                "  `s_status` Integer(20) DEFAULT NULL,\n" +
//                "  `s_long` Text(20) DEFAULT NULL,\n" +
//                "  `s_lat` Text(20) DEFAULT NULL\n" +
//                ") ;"
        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<MA_Meterreading> list = null;
        try {
            list = new ArrayList<MA_Meterreading>();

            res = db.rawQuery("select * from ma_meterreadings where MA_TCP_Retailsites_id = " + ma_tcp_id, null);
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                MA_Meterreading ma_meterreading = new MA_Meterreading();
                ma_meterreading.setId(res.getInt(res.getColumnIndex("id")));
                ma_meterreading.setOpening(res.getString(res.getColumnIndex("Opening")));
                ma_meterreading.setClosing(res.getString(res.getColumnIndex("Closing")));
                ma_meterreading.setProduct_code(res.getString(res.getColumnIndex("Product_code")));
                ma_meterreading.setProduct_desc(res.getString(res.getColumnIndex("Product_desc")));
                ma_meterreading.setTank_code(res.getString(res.getColumnIndex("Tank_code")));
                ma_meterreading.setTank_desc(res.getString(res.getColumnIndex("Tank_desc")));

                ma_meterreading.setNozzel_code(res.getString(res.getColumnIndex("Nozzel_code")));
                ma_meterreading.setNozzel_Meter_code(res.getString(res.getColumnIndex("Nozzel_Meter_code")));
                ma_meterreading.setNozzel_Meter_desc(res.getString(res.getColumnIndex("Nozzel_Meter_desc")));
                ma_meterreading.setSale(res.getString(res.getColumnIndex("Sale")));
                ma_meterreading.setTo_date(res.getString(res.getColumnIndex("To_date")));
                ma_meterreading.setStatus(res.getString(res.getColumnIndex("Status")));
                ma_meterreading.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
                ma_meterreading.setS_long(res.getString(res.getColumnIndex("s_long")));
                ma_meterreading.setS_lat(res.getString(res.getColumnIndex("s_lat")));


                list.add(ma_meterreading);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return list;
    }


    public List<MA_Meterreading> getMA_MeterreadingListFromRetailSiteID(int retailSiteID) {


//        "CREATE TABLE IF NOT EXISTS  `ma_meterreadings` (\n" +
//                "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//                "  `MA_TCP_ID` Integer(10) DEFAULT NULL,\n" +
//                "  `Server_tcp_code` Text(20) DEFAULT NULL,\n" +
//                "  `CostCentreID` Text(20) DEFAULT NULL,\n" +
//                "  `Product_code` Text(20) DEFAULT NULL,\n" +
//                "  `Product_desc` Text(20) DEFAULT NULL,\n" +
//                "  `Tank_code` Text(20) DEFAULT NULL,\n" +
//                "  `Tank_desc` Text(20) DEFAULT NULL,\n" +
//                "  `Nozzel_Meter_code` Text(20) DEFAULT NULL,\n" +
//                "  `Nozzel_Meter_desc` Text(50) DEFAULT NULL,\n" +
//                "  `Nozzel_code` Text(20) DEFAULT NULL,\n" +
//                "  `Nozzel_desc` Text(20) DEFAULT NULL,\n" +
//                "  `Opening` Text(20) DEFAULT NULL,\n" +
//                "  `Closing` Text(20) DEFAULT NULL,\n" +
//                "  `Sale` Text(20) DEFAULT NULL,\n" +
//                "  `To_date` date DEFAULT NULL,\n" +
//                "  `Status` Text(20) DEFAULT NULL,\n" +
//                "  `s_date` datetime DEFAULT CURRENT_TIMESTAMP,\n" +
//                "  `s_is_sync` Integer(20) DEFAULT NULL,\n" +
//                "  `s_status` Integer(20) DEFAULT NULL,\n" +
//                "  `s_long` Text(20) DEFAULT NULL,\n" +
//                "  `s_lat` Text(20) DEFAULT NULL\n" +
//                ") ;"
        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<MA_Meterreading> list = null;
        try {
            list = new ArrayList<MA_Meterreading>();


            res = db.rawQuery("select * from ma_meterreadings where MA_TCP_RETAILSITES_ID =  " + retailSiteID + " ", null);
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                MA_Meterreading ma_meterreading = new MA_Meterreading();
                ma_meterreading.setId(res.getInt(res.getColumnIndex("id")));
                ma_meterreading.setOpening(res.getString(res.getColumnIndex("Opening")));
                ma_meterreading.setClosing(res.getString(res.getColumnIndex("Closing")));
                ma_meterreading.setNozzel_code(res.getString(res.getColumnIndex("Nozzel_code")));
                ma_meterreading.setNozzel_Meter_code(res.getString(res.getColumnIndex("Nozzel_Meter_code")));
                ma_meterreading.setProduct_code(res.getString(res.getColumnIndex("Product_code")));
                ma_meterreading.setProduct_desc(res.getString(res.getColumnIndex("Product_desc")));
                ma_meterreading.setSale(res.getString(res.getColumnIndex("Sale")));
                ma_meterreading.setTo_date(res.getString(res.getColumnIndex("To_date")));
                ma_meterreading.setStatus(res.getString(res.getColumnIndex("Status")));
                ma_meterreading.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
                list.add(ma_meterreading);
                res.moveToNext();

            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return list;
    }


    public List<MA_SalesData> getSalesDataFromID(int retailSiteID) {

        Cursor res = null;
        List<MA_SalesData> list = null;
        try {
            list = new ArrayList<MA_SalesData>();
            SQLiteDatabase db = this.getReadableDatabase();
            //res = db.rawQuery("select * from ma_salesdata where MA_TCP_Retailsites_id = "+retailSiteID +" and Selection = 1", null);
            res = db.rawQuery("select * from ma_salesdata where MA_TCP_Retailsites_id = " + retailSiteID, null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                MA_SalesData maSalesData = new MA_SalesData();
                maSalesData.setId(res.getInt(res.getColumnIndex("id")));
                maSalesData.setServer_TCP_code(res.getString(res.getColumnIndex("Server_TCP_code")));

                maSalesData.setMA_TCP_Retailsites_id(res.getString(res.getColumnIndex("MA_TCP_Retailsites_id")));

                maSalesData.setCostCentreID(res.getString(res.getColumnIndex("CostCentreID")));
                maSalesData.setProductCode(res.getString(res.getColumnIndex("ProductCode")));

                maSalesData.setType(res.getString(res.getColumnIndex("Type")));
                maSalesData.setDocNo(res.getString(res.getColumnIndex("DocNo")));
                maSalesData.setDocDate(res.getString(res.getColumnIndex("DocDate")));
                maSalesData.setProduct(res.getString(res.getColumnIndex("Product")));
                maSalesData.setQTY(res.getString(res.getColumnIndex("QTY")));
                maSalesData.setTankLorryNo(res.getString(res.getColumnIndex("TankLorryNo")));
                maSalesData.setSelection(res.getInt(res.getColumnIndex("Selection")));

                //TODO add all fields (SARFRAZ UPDATE)
                list.add(maSalesData);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
        }
        return list;
    }


    public List<MA_SalesData> getSalesGroupDataFromID(int retailSiteID, String productCode) {

        Cursor res = null;
        List<MA_SalesData> list = null;
        try {
            list = new ArrayList<MA_SalesData>();
            SQLiteDatabase db = this.getReadableDatabase();
            //res = db.rawQuery("select * from ma_salesdata where MA_TCP_Retailsites_id = "+retailSiteID +" and Selection = 1", null);
            res = db.rawQuery("select MA_TCP_ID , Server_TCP_code , MA_TCP_Retailsites_id , CostCentreID , Product , ProductCode , Selection , Sum(QTY) as sumQTY  from ma_salesdata where Selection = 1 and MA_TCP_Retailsites_id = " + retailSiteID + " and ProductCode = '" + productCode + "' Group by MA_TCP_ID , Server_TCP_code , MA_TCP_Retailsites_id , CostCentreID , Product , ProductCode , Selection", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                MA_SalesData maSalesData = new MA_SalesData();
                // maSalesData.setId(res.getInt(res.getColumnIndex("id")));
                maSalesData.setServer_TCP_code(res.getString(res.getColumnIndex("Server_TCP_code")));

                maSalesData.setMA_TCP_Retailsites_id(res.getString(res.getColumnIndex("MA_TCP_Retailsites_id")));

                maSalesData.setCostCentreID(res.getString(res.getColumnIndex("CostCentreID")));
                maSalesData.setProductCode(res.getString(res.getColumnIndex("ProductCode")));

                //maSalesData.setType(res.getString(res.getColumnIndex("Type")));
                //maSalesData.setDocNo(res.getString(res.getColumnIndex("DocNo")));
                //maSalesData.setDocDate(res.getString(res.getColumnIndex("DocDate")));
                maSalesData.setProduct(res.getString(res.getColumnIndex("Product")));
                BigDecimal QTY = BigDecimal.valueOf(Double.valueOf(res.getString(res.getColumnIndex("sumQTY"))));
                maSalesData.setQTY(QTY.toString());
                //maSalesData.setTankLorryNo(res.getString(res.getColumnIndex("TankLorryNo")));
                maSalesData.setSelection(res.getInt(res.getColumnIndex("Selection")));

                //TODO add all fields (SARFRAZ UPDATE)
                list.add(maSalesData);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
        }
        return list;
    }

    public List<MA_SalesData> getSalesMeterreadingGroupDataFromID(int retailSiteID) {

        Cursor res = null;
        List<MA_SalesData> list = null;
        try {
            list = new ArrayList<MA_SalesData>();
            SQLiteDatabase db = this.getReadableDatabase();
            //res = db.rawQuery("select * from ma_salesdata where MA_TCP_Retailsites_id = "+retailSiteID +" and Selection = 1", null);
            String qry = "SELECT CostCentreID , product_code as productcode,product_desc as product FROM ma_meterreadings where MA_TCP_Retailsites_id = '" + retailSiteID + "'  UNION SELECT CostCentreID , productcode ,product  FROM ma_salesdata WHERE selection = 1 and MA_TCP_Retailsites_id = '" + retailSiteID + "' ";
            res = db.rawQuery(qry, null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                MA_SalesData maSalesData = new MA_SalesData();
                // maSalesData.setId(res.getInt(res.getColumnIndex("id")));
                //maSalesData.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
                //maSalesData.setServer_TCP_code(res.getString(res.getColumnIndex("Server_TCP_code")));

                maSalesData.setMA_TCP_Retailsites_id(retailSiteID + "");

                maSalesData.setCostCentreID(res.getString(res.getColumnIndex("CostCentreID")));
                maSalesData.setProductCode(res.getString(res.getColumnIndex("productcode")));

                //maSalesData.setType(res.getString(res.getColumnIndex("Type")));
                //maSalesData.setDocNo(res.getString(res.getColumnIndex("DocNo")));
                //maSalesData.setDocDate(res.getString(res.getColumnIndex("DocDate")));
                maSalesData.setProduct(res.getString(res.getColumnIndex("product")));
                //maSalesData.setQTY(res.getString(res.getColumnIndex("sumQTY")));
                //maSalesData.setTankLorryNo(res.getString(res.getColumnIndex("TankLorryNo")));
                //maSalesData.setSelection(res.getInt(res.getColumnIndex("Selection")));

                //TODO add all fields (SARFRAZ UPDATE)
                list.add(maSalesData);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
        }
        return list;
    }

    public List<MA_StockReconciliation> getStockRecDataFromSalesData(int ma_tcpRetailSiteID) {


        List<MA_StockReconciliation> maStockReconciliationList = new ArrayList<MA_StockReconciliation>();
        //List<MA_SalesData> maSalesDataList = getSalesGroupDataFromID(ma_tcpRetailSiteID);
        List<MA_SalesData> maSalesDataList = new ArrayList<>();

        for (int i = 0; i < maSalesDataList.size(); i++) {
            if (maSalesDataList.get(i).getSelection() == 1) {
                double totalOpening = 0, totalClosing = 0, totalSale = 0, balanceStock = 0, gainLoss = 0;
                double totalDipStockL = 0, diffPer = 0, difference = 0;

                MA_StockReconciliation maStockReconciliation = new MA_StockReconciliation();

                String stockReconOpeningQuery = "select openingstock from ma_stockreconciliation where ma_tcp_retailsites_id = " + ma_tcpRetailSiteID + " and productcode =  '" + maSalesDataList.get(i).getProductCode() + "'";
                String meterReadingQuery = "select coalesce(sum(Opening),0) as totalopening, coalesce(sum(Closing),0) as totalclosing , coalesce(sum(Sale),0) as totalsale from ma_meterreadings where ma_tcp_retailsites_id = " + ma_tcpRetailSiteID + " and product_code =  " + maSalesDataList.get(i).getProductCode();
                String tankDipsQuery = "select coalesce(sum(dip_stock_L),0) as totaldipstockL from ma_tankdips where ma_tcp_retailsites_id = " + ma_tcpRetailSiteID + " and product_code =  " + maSalesDataList.get(i).getProductCode();

                Cursor res = null;
                SQLiteDatabase db = this.getReadableDatabase();
                try {
                    res = db.rawQuery(stockReconOpeningQuery, null);
                    if (res != null) {
                        res.moveToFirst();
                        if (res.isAfterLast() == false)
                            totalOpening = Double.parseDouble(res.getString(res.getColumnIndex("OpeningStock")));

                    }
                    res = db.rawQuery(meterReadingQuery, null);
                    if (res != null) {
                        res.moveToFirst();
                        if (res.isAfterLast() == false) {
                            totalClosing = Double.parseDouble(res.getString(res.getColumnIndex("totalclosing")));
                            totalSale = Double.parseDouble(res.getString(res.getColumnIndex("totalsale")));
                        }
                    }

                    res = db.rawQuery(tankDipsQuery, null);
                    if (res != null) {
                        res.moveToFirst();
                        if (res.isAfterLast() == false) {
                            totalDipStockL = Double.parseDouble(res.getString(res.getColumnIndex("totaldipstockL")));
                        }
                    }

                    maStockReconciliation.setCostCentreID(maSalesDataList.get(i).getCostCentreID());
                    maStockReconciliation.setMA_TCP_Retailsites_id(maSalesDataList.get(i).getMA_TCP_Retailsites_id());
                    maStockReconciliation.setProductDesc(maSalesDataList.get(i).getProduct());
                    maStockReconciliation.setProductCode(maSalesDataList.get(i).getProductCode());

                    // maStockReconciliation.setProductCode(maSalesDataList.get(i).getProductCode());
                    // maStockReconciliation.setProduct(maSalesDataList.get(i).getProduct());

                    maStockReconciliation.setOpeningStock(totalOpening + "");
                    maStockReconciliation.setStockRecept(maSalesDataList.get(i).getQTY());
                    maStockReconciliation.setSale(totalSale + "");

                    balanceStock = totalOpening + Double.parseDouble(maSalesDataList.get(i).getQTY()) - totalSale;

                    maStockReconciliation.setBalanceStock(balanceStock + "");
                    maStockReconciliation.setDipStock(totalDipStockL + "");

                    difference = totalDipStockL - balanceStock;
                    maStockReconciliation.setGainLoss(difference + "");

                    diffPer = difference * 100 / totalSale;

                    if (diffPer > 1) {
                        maStockReconciliation.setReconciliationStatus("OSP");
                    } else if (diffPer < -1) {
                        maStockReconciliation.setReconciliationStatus("Dumped");
                    } else {
                        maStockReconciliation.setReconciliationStatus("Normal");
                    }

                    maStockReconciliationList.add(maStockReconciliation);
                } catch (Exception e) {
                } finally {
                    if (res != null)
                        res.close();
                    if (db != null) {
                        db.close();
                    }
                }
            }

        }

        if (maSalesDataList.size() <= 0) {
            List<MA_Meterreading> maMeterReadings = getMA_MeterreadingListFromRetailSiteID(ma_tcpRetailSiteID);
            for (int i = 0; i < maMeterReadings.size(); i++) {
                double totalOpening = 0, totalClosing = 0, totalSale = 0, balanceStock = 0, gainLoss = 0;
                double totalDipStockL = 0, diffPer = 0, difference = 0;

                MA_StockReconciliation maStockReconciliation = new MA_StockReconciliation();

                String stockReconOpeningQuery = "select openingstock from ma_stockreconciliation where ma_tcp_retailsites_id = " + ma_tcpRetailSiteID + " and productcode =  '" + maMeterReadings.get(i).getProduct_code() + "'";
                String meterReadingQuery = "select coalesce(sum(Opening),0) as totalopening, coalesce(sum(Closing),0) as totalclosing , coalesce(sum(Sale),0) as totalsale from ma_meterreadings where ma_tcp_retailsites_id = " + ma_tcpRetailSiteID + " and product_code =  " + maMeterReadings.get(i).getProduct_code();
                String tankDipsQuery = "select coalesce(sum(dip_stock_L),0) as totaldipstockL from ma_tankdips where ma_tcp_retailsites_id = " + ma_tcpRetailSiteID + " and product_code =  " + maMeterReadings.get(i).getProduct_code();

                Cursor res = null;
                SQLiteDatabase db = this.getReadableDatabase();
                try {
                    res = db.rawQuery(stockReconOpeningQuery, null);
                    if (res != null) {
                        res.moveToFirst();
                        if (res.isAfterLast() == false)
                            totalOpening = Double.parseDouble(res.getString(res.getColumnIndex("OpeningStock")));

                    }
                    res = db.rawQuery(meterReadingQuery, null);
                    if (res != null) {
                        res.moveToFirst();
                        if (res.isAfterLast() == false) {
                            totalClosing = Double.parseDouble(res.getString(res.getColumnIndex("totalclosing")));
                            totalSale = Double.parseDouble(res.getString(res.getColumnIndex("totalsale")));
                        }
                    }

                    res = db.rawQuery(tankDipsQuery, null);
                    if (res != null) {
                        res.moveToFirst();
                        if (res.isAfterLast() == false) {
                            totalDipStockL = Double.parseDouble(res.getString(res.getColumnIndex("totaldipstockL")));
                        }
                    }

                    maStockReconciliation.setCostCentreID(maMeterReadings.get(i).getCostCentreID());
                    maStockReconciliation.setMA_TCP_Retailsites_id(maMeterReadings.get(i).getMA_TCP_Retailsites_id());
                    maStockReconciliation.setProductDesc(maMeterReadings.get(i).getProduct_desc());
                    maStockReconciliation.setProductCode(maMeterReadings.get(i).getProduct_code());

                    // maStockReconciliation.setProductCode(maMeterReadings.get(i).getProductCode());
                    // maStockReconciliation.setProduct(maMeterReadings.get(i).getProduct());

                    maStockReconciliation.setOpeningStock(totalOpening + "");
                    maStockReconciliation.setStockRecept("0"); /// As Sales data is not available thats why code here.
                    maStockReconciliation.setSale(totalSale + "");
                    //balanceStock = totalOpening + Double.parseDouble(maMeterReadings.get(i).getQTY())  - totalSale;
                    balanceStock = totalOpening + 0 - totalSale; /// as the sales data is not available otherwise we should replace 0

                    maStockReconciliation.setBalanceStock(balanceStock + "");
                    maStockReconciliation.setDipStock(totalDipStockL + "");

                    difference = totalDipStockL - balanceStock;
                    maStockReconciliation.setGainLoss(difference + "");

                    diffPer = difference * 100 / totalSale;

                    if (diffPer > 1) {
                        maStockReconciliation.setReconciliationStatus("OSP");
                    } else if (diffPer < -1) {
                        maStockReconciliation.setReconciliationStatus("Dumped");
                    } else {
                        maStockReconciliation.setReconciliationStatus("Normal");
                    }

                    maStockReconciliationList.add(maStockReconciliation);
                } catch (Exception e) {
                } finally {
                    if (res != null)
                        res.close();
                    if (db != null) {
                        db.close();
                    }
                }
            }

        }

//    "select sum(Opening) as totalopening,sum(closing) as totalclosing,sum(sales) as totalsales from ma_meterreadings where ma_tcp_retailsites_id = '" + ma_tcpRetailSiteID + "' and product_code = '" + + "'"
//    "select sum(dip_stock_L) as totaldipstockL from ma_tankdips where ma_tcp_retailsites_id = '" + ma_tcpRetailSiteID + "' and product_code = '" + + "'"

        // difference = balanace - totaldipstockL
        // diffper = difference * 100 / balance
        /// if diffper > 1 then
        // else < 1
        // else
        // Normal GAIN/LOSS

        return maStockReconciliationList;
    }

    public List<MA_StockReconciliation> getStockRecData(int ma_tcpRetailSiteID, String Server_TCP_code, int ma_tcp_id) {

        List<MA_StockReconciliation> maStockReconciliationList = new ArrayList<MA_StockReconciliation>();
        //   List<MA_SalesData> maSalesDataList = getSalesGroupDataFromID(ma_tcpRetailSiteID );
        List<MA_SalesData> maSalesDataList = getSalesMeterreadingGroupDataFromID(ma_tcpRetailSiteID);

        for (int i = 0; i < maSalesDataList.size(); i++) {
            //if (maSalesDataList.get(i).getSelection() == 1) {
            String userObservation = "";
            String reason = "";
            String remarks = "";
            String reasonDesc = "";
            BigDecimal totalOpening = BigDecimal.valueOf(0), totalClosing = BigDecimal.valueOf(0),
                    totalSale = BigDecimal.valueOf(0), balanceStock = BigDecimal.valueOf(0), gainLoss = BigDecimal.valueOf(0);
            BigDecimal totalDipStockL = BigDecimal.valueOf(0), diffPer = BigDecimal.valueOf(0), difference = BigDecimal.valueOf(0);
            int MA_TCP_ID = 0;
            List<MA_SalesData> maSalesDataforProduct = getSalesGroupDataFromID(ma_tcpRetailSiteID, maSalesDataList.get(i).getProductCode());
            MA_StockReconciliation maStockReconciliation = new MA_StockReconciliation();
//MA_TCP_ID
//Server_TCP_code
            String stockReconOpeningQuery = "select openingstock,userobservation,reason,remarks,reasonDesc from ma_stockreconciliation where Server_TCP_code = '" + Server_TCP_code + "' AND ma_tcp_retailsites_id = " + ma_tcpRetailSiteID + " and productcode =  '" + maSalesDataList.get(i).getProductCode() + "'";
            String meterReadingQuery = "select coalesce(sum(Opening),0) as totalopening, coalesce(sum(Closing),0) as totalclosing , coalesce(sum(Sale),0) as totalsale from ma_meterreadings where  Server_TCP_code = '" + Server_TCP_code + "' AND ma_tcp_retailsites_id = " + ma_tcpRetailSiteID + " and product_code =  " + maSalesDataList.get(i).getProductCode();
            String tankDipsQuery = "select coalesce(sum(dip_stock_L),0) as totaldipstockL from ma_tankdips where  Server_TCP_code = '" + Server_TCP_code + "' AND  ma_tcp_retailsites_id = " + ma_tcpRetailSiteID + " and product_code =  " + maSalesDataList.get(i).getProductCode();

            Cursor res = null;
            SQLiteDatabase db = this.getReadableDatabase();
            try {
                res = db.rawQuery(stockReconOpeningQuery, null);
                if (res != null) {
                    res.moveToFirst();
                    if (res.isAfterLast() == false) {

                        totalOpening = BigDecimal.valueOf(Double.parseDouble(res.getString(res.getColumnIndex("OpeningStock"))));
                        userObservation = res.getString(res.getColumnIndex("UserObservation"));
                        reason = res.getString(res.getColumnIndex("reason"));
                        remarks = res.getString(res.getColumnIndex("remarks"));
                        reasonDesc = res.getString(res.getColumnIndex("reasonDesc"));
                    }
                }
                res = db.rawQuery(meterReadingQuery, null);
                if (res != null) {
                    res.moveToFirst();
                    if (res.isAfterLast() == false) {
                        totalClosing = BigDecimal.valueOf(Double.parseDouble(res.getString(res.getColumnIndex("totalclosing"))));
                        totalSale = BigDecimal.valueOf(Double.parseDouble(res.getString(res.getColumnIndex("totalsale"))));
                    }
                }

                res = db.rawQuery(tankDipsQuery, null);
                if (res != null) {
                    res.moveToFirst();
                    if (res.isAfterLast() == false) {
                        totalDipStockL = BigDecimal.valueOf(Double.parseDouble(res.getString(res.getColumnIndex("totaldipstockL"))));
                    }
                }

                //maStockReconciliation.setMA_TCP_ID();
                maStockReconciliation.setMA_TCP_ID(ma_tcp_id);
                maStockReconciliation.setServer_TCP_code(Server_TCP_code);
                maStockReconciliation.setCostCentreID(maSalesDataList.get(i).getCostCentreID());
                maStockReconciliation.setMA_TCP_Retailsites_id(maSalesDataList.get(i).getMA_TCP_Retailsites_id());
                maStockReconciliation.setProductDesc(maSalesDataList.get(i).getProduct());
                maStockReconciliation.setProductCode(maSalesDataList.get(i).getProductCode());

                // maStockReconciliation.setProductCode(maSalesDataList.get(i).getProductCode());
                // maStockReconciliation.setProduct(maSalesDataList.get(i).getProduct());

                maStockReconciliation.setOpeningStock(totalOpening + "");
                if (maSalesDataforProduct.size() > 0) {
                    maStockReconciliation.setStockRecept(maSalesDataforProduct.get(0).getQTY());
                    balanceStock = totalOpening.add(BigDecimal.valueOf(Double.parseDouble(maSalesDataforProduct.get(0).getQTY()))).subtract(totalSale);
                } else {
                    maStockReconciliation.setStockRecept("0");
                    balanceStock = totalOpening.subtract(totalSale);
                }

                maStockReconciliation.setSale(totalSale + "");


                maStockReconciliation.setBalanceStock(balanceStock + "");
                maStockReconciliation.setDipStock(totalDipStockL + "");

                difference = totalDipStockL.subtract(balanceStock);
                maStockReconciliation.setGainLoss(difference + "");

                if (totalSale.intValue() == 0) diffPer = BigDecimal.valueOf(0);
                else
                    diffPer = difference.multiply(BigDecimal.valueOf(100)).divide(totalSale);

                if (diffPer.intValue() > 1) {  //if (diffPer > 1) {
                    maStockReconciliation.setReconciliationStatus("OSP");
                } else if (diffPer.intValue() < -1) { //else if (diffPer < -1) {
                    maStockReconciliation.setReconciliationStatus("Dumped");
                } else {
                    maStockReconciliation.setReconciliationStatus("Normal");
                }

                maStockReconciliation.setUserObservation(userObservation + "");
                maStockReconciliation.setReason(reason + "");
                maStockReconciliation.setRemarks(remarks + "");

                maStockReconciliationList.add(maStockReconciliation);
            } catch (Exception e) {
                Log.d("DBHelper:", "Error inserting Stock Reconciliation " + e.getMessage());
            } finally {
                if (res != null)
                    res.close();
                if (db != null) {
                    db.close();
                }
            }
            //}
        }


//    "select sum(Opening) as totalopening,sum(closing) as totalclosing,sum(sales) as totalsales from ma_meterreadings where ma_tcp_retailsites_id = '" + ma_tcpRetailSiteID + "' and product_code = '" + + "'"
//    "select sum(dip_stock_L) as totaldipstockL from ma_tankdips where ma_tcp_retailsites_id = '" + ma_tcpRetailSiteID + "' and product_code = '" + + "'"

        // difference = balanace - totaldipstockL
        // diffper = difference * 100 / balance
        /// if diffper > 1 then
        // else < 1
        // else
        // Normal GAIN/LOSS

        return maStockReconciliationList;
    }

    public List<MA_SalesData> getSalesData(int ma_retailsiteid) {

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<MA_SalesData> list = null;
        try {
            list = new ArrayList<MA_SalesData>();

            res = db.rawQuery("select * from ma_salesdata where MA_TCP_Retailsites_id =" + ma_retailsiteid + "", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                MA_SalesData maSalesData = new MA_SalesData();
                maSalesData.setId(res.getInt(res.getColumnIndex("id")));
                maSalesData.setServer_TCP_code(res.getString(res.getColumnIndex("Server_TCP_code")));

                maSalesData.setType(res.getString(res.getColumnIndex("Type")));
                maSalesData.setDocNo(res.getString(res.getColumnIndex("DocNo")));
                maSalesData.setDocDate(res.getString(res.getColumnIndex("DocDate")));
                maSalesData.setProduct(res.getString(res.getColumnIndex("Product")));
                maSalesData.setQTY(res.getString(res.getColumnIndex("QTY")));
                maSalesData.setTankLorryNo(res.getString(res.getColumnIndex("TankLorryNo")));
                maSalesData.setSelection(res.getInt(res.getColumnIndex("Selection")));

                //TODO add all fields (SARFRAZ UPDATE)
                list.add(maSalesData);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
        }
        if (db != null) {
            db.close();
        }
        return list;
    }

    public List<MA_StockReconciliation> getStockReconciliation(int type) {

        String typ = "";
        if (type == 1) {
            typ = "Petrol";
        } else if (type == 2) {
            typ = "Diesel";
        } else {
            typ = "High Octane";
        }

        Cursor res = null;
        List<MA_StockReconciliation> list = null;
        try {
            list = new ArrayList<MA_StockReconciliation>();
            SQLiteDatabase db = this.getReadableDatabase();
            res = db.rawQuery("select * from ma_stockreconciliation where Type = '" + typ + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                MA_StockReconciliation maSalesData = new MA_StockReconciliation();
                maSalesData.setId(res.getInt(res.getColumnIndex("id")));

                maSalesData.setOpeningStock(res.getString(res.getColumnIndex("OpeningStock")));
                maSalesData.setStockRecept(res.getString(res.getColumnIndex("StockRecept")));
                maSalesData.setSale(res.getString(res.getColumnIndex("Sale")));
                maSalesData.setBalanceStock(res.getString(res.getColumnIndex("BalanceStock")));
                maSalesData.setDipStock(res.getString(res.getColumnIndex("DipStock")));
                maSalesData.setGainLoss(res.getString(res.getColumnIndex("GainLoss")));
                maSalesData.setReconciliationStatus(res.getString(res.getColumnIndex("ReconciliationStatus")));

                //TODO add all fields (SARFRAZ UPDATE)
                list.add(maSalesData);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
        }
        return list;

    }

    public void updateSaleData(MA_SalesData maSalesData) {


        SQLiteDatabase db = this.getReadableDatabase();

        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("Server_TCP_code", maSalesData.getServer_TCP_code());
            contentValues.put("Type", maSalesData.getType());
            contentValues.put("DocNo", maSalesData.getDocNo());
            contentValues.put("DocDate", maSalesData.getDocDate());//getMA_DocType_id
            contentValues.put("Product", maSalesData.getProduct());//getMA_DocType_id
            contentValues.put("QTY", maSalesData.getQTY());
            contentValues.put("TankLorryNo", maSalesData.getTankLorryNo());
            contentValues.put("Selection", maSalesData.getSelection());
            contentValues.put("s_long", maSalesData.getS_long());
            contentValues.put("s_lat", maSalesData.getS_lat());

            int NumOfRowsUpdated = db.update("ma_salesdata", contentValues, "id =" + maSalesData.getId(), null);
            // if (NumOfRowsUpdated > 0) id = new Long(ma_tcp.getId());
            //TODO else throw exception OR we need to check fromwhere this method is called that return value should not be -1L;

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }

    public void upateMA_TCP_RetailSites(MA_TCP_RetailSites ma_tcp_retailSites) {

        SQLiteDatabase db = this.getReadableDatabase();

        try {
            ContentValues contentValues1 = new ContentValues();
            contentValues1.put("MA_TCP_ID", Integer.parseInt(ma_tcp_retailSites.getMA_TCP_ID() + ""));
            contentValues1.put("Server_TCP_code", ma_tcp_retailSites.getServer_TCP_code() + "");
            contentValues1.put("MA_RetailSites_id", ma_tcp_retailSites.getMA_RetailSites_id() + "");
            contentValues1.put("DocID", ma_tcp_retailSites.getDocID() + "");
            contentValues1.put("DocName", ma_tcp_retailSites.getDocName() + "");
            contentValues1.put("CostCentreID", ma_tcp_retailSites.getCostCentreID() + "");
            contentValues1.put("CostCentreDesc", ma_tcp_retailSites.getCostCentreDesc() + "");
            contentValues1.put("Location", ma_tcp_retailSites.getLocation() + "");
            contentValues1.put("District", ma_tcp_retailSites.getDistrict() + "");
            contentValues1.put("LastInspCode", ma_tcp_retailSites.getLastInspCode() + "");
            contentValues1.put("LastinspDate", ma_tcp_retailSites.getLastinspDate() + "");
            contentValues1.put("TourPlanning", ma_tcp_retailSites.getTourPlanning() + "");
            contentValues1.put("visitDate", ma_tcp_retailSites.getVisitDate() + "");
            contentValues1.put("TravelTime", ma_tcp_retailSites.getTravelTime() + "");
            contentValues1.put("InspTime", ma_tcp_retailSites.getInspTime() + "");
            contentValues1.put("KMs", ma_tcp_retailSites.getKMs() + "");
            contentValues1.put("VisitPurpose", ma_tcp_retailSites.getVisitPurpose() + "");
            contentValues1.put("TourOrderNo", ma_tcp_retailSites.getTourOrderNo() + "");
            contentValues1.put("CocoSite", ma_tcp_retailSites.getCocoSite() + "");
            contentValues1.put("InspectionDate", ma_tcp_retailSites.getInspectionDate() + "");

            contentValues1.put("Status", ma_tcp_retailSites.getStatus() + "");
            contentValues1.put("Status_IE_1", ma_tcp_retailSites.getStatus_IE_1());
            contentValues1.put("Status_IE_2", ma_tcp_retailSites.getStatus_IE_2());
            contentValues1.put("Status_IE_3", ma_tcp_retailSites.getStatus_IE_3());
            contentValues1.put("Status_IE_4", ma_tcp_retailSites.getStatus_IE_4());
            contentValues1.put("Status_IE_5", ma_tcp_retailSites.getStatus_IE_5());
            contentValues1.put("s_date", ma_tcp_retailSites.getS_date() + "");
            contentValues1.put("s_is_sync", ma_tcp_retailSites.getS_is_sync() + "");
            contentValues1.put("s_status", ma_tcp_retailSites.getS_status() + "");
            contentValues1.put("s_long", ma_tcp_retailSites.getS_long() + "");
            contentValues1.put("s_lat", ma_tcp_retailSites.getS_lat() + "");

            db.update("ma_tcp_retailsites", contentValues1, "id =" + ma_tcp_retailSites.getId(), null);


        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null) {
                db.close();
            }
        }
    }

    public void setMA_SalesData(MA_SalesData salesDataList) {

        SQLiteDatabase db = this.getReadableDatabase();

        Long id = -1L;
        try {
            ContentValues contentValues1 = new ContentValues();
            contentValues1.put("MA_TCP_ID", salesDataList.getMA_TCP_ID() + "");
            contentValues1.put("Server_TCP_code", salesDataList.getServer_TCP_code() + "");
            contentValues1.put("MA_TCP_Retailsites_id", salesDataList.getMA_TCP_Retailsites_id() + "");
            contentValues1.put("CostCentreID", salesDataList.getCostCentreID() + "");
            contentValues1.put("Type", salesDataList.getType() + "");
            contentValues1.put("DocNo", salesDataList.getDocNo() + "");
            contentValues1.put("DocDate", salesDataList.getDocDate() + "");
            contentValues1.put("ProductCode", salesDataList.getProductCode() + "");
            contentValues1.put("Product", salesDataList.getProduct() + "");
            contentValues1.put("QTY", salesDataList.getQTY() + "");
            contentValues1.put("TankLorryNo", salesDataList.getTankLorryNo() + "");
            contentValues1.put("Selection", salesDataList.getSelection() + "");
            contentValues1.put("s_date", salesDataList.getS_date() + "");
            contentValues1.put("s_is_sync", salesDataList.getS_is_sync() + "");
            contentValues1.put("s_status", salesDataList.getS_status() + "");
            contentValues1.put("s_long", salesDataList.getS_long() + "");
            contentValues1.put("s_lat", salesDataList.getS_lat() + "");

            id = db.insert("ma_salesdata", null, contentValues1);
        } catch (NumberFormatException e) {
            e.printStackTrace();
        } finally {
            if (db != null) {
                db.close();
            }
        }

        // return id;
    }

    public Long setMA_StockReconciliation(List<MA_StockReconciliation> ma_stockReconciliationList) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long id = -1L;
        try {
            for (int i = 0; i < ma_stockReconciliationList.size(); i++) {
                ContentValues contentValues1 = new ContentValues();
                contentValues1.put("MA_TCP_ID", ma_stockReconciliationList.get(i).getMA_TCP_ID() + "");
                contentValues1.put("Server_TCP_code", ma_stockReconciliationList.get(i).getServer_TCP_code() + "");
                contentValues1.put("MA_TCP_Retailsites_id", ma_stockReconciliationList.get(i).getMA_TCP_Retailsites_id() + "");
                contentValues1.put("CostCentreID", ma_stockReconciliationList.get(i).getCostCentreID() + "");
                contentValues1.put("ProductCode", ma_stockReconciliationList.get(i).getProductCode() + "");
                contentValues1.put("ProductDesc", ma_stockReconciliationList.get(i).getProductDesc() + "");
                contentValues1.put("Type", ma_stockReconciliationList.get(i).getType() + "");
                contentValues1.put("OpeningStock", ma_stockReconciliationList.get(i).getOpeningStock() + "");
                contentValues1.put("StockRecept", ma_stockReconciliationList.get(i).getStockRecept() + "");
                contentValues1.put("Sale", ma_stockReconciliationList.get(i).getSale() + "");
                contentValues1.put("BalanceStock", ma_stockReconciliationList.get(i).getBalanceStock() + "");
                contentValues1.put("DipStock", ma_stockReconciliationList.get(i).getDipStock() + "");
                contentValues1.put("GainLoss", ma_stockReconciliationList.get(i).getGainLoss() + "");
                contentValues1.put("ReconciliationStatus", "0");
                contentValues1.put("UserObservation", ma_stockReconciliationList.get(i).getUserObservation() + "");
                contentValues1.put("s_date", ma_stockReconciliationList.get(i).getS_date() + "");
                contentValues1.put("s_is_sync", ma_stockReconciliationList.get(i).getS_is_sync() + "");
                contentValues1.put("s_status", ma_stockReconciliationList.get(i).getS_status() + "");
                contentValues1.put("s_long", ma_stockReconciliationList.get(i).getS_long() + "");
                contentValues1.put("s_lat", ma_stockReconciliationList.get(i).getS_lat() + "");
                contentValues1.put("remarks", ma_stockReconciliationList.get(i).getRemarks() + "");
                contentValues1.put("reason", ma_stockReconciliationList.get(i).getReason() + "");
                contentValues1.put("reasonDesc", ma_stockReconciliationList.get(i).getReasonDesc() + "");

                id = db.insert("ma_stockreconciliation", null, contentValues1);
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        } finally {
            if (db != null) {
                db.close();
            }
        }
        return id;
    }

    public void setMADocType(MADoctype maDocType, List<MARetailSites> maRetailSitesList) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long id = -1L;
        try {
            ContentValues contentValues1 = new ContentValues();

            contentValues1.put("PrevTcpCode", maDocType.getPrevTcpCode() + "");
            contentValues1.put("DocID", maDocType.getDocID() + "");
            contentValues1.put("AreaInchargeID", maDocType.getAreaInchargeID() + "");
            contentValues1.put("PrevTcpDate", maDocType.getPrevTcpDate() + "");
            contentValues1.put("DocName", maDocType.getDocName() + "");
            contentValues1.put("AreaInchargeDesc", maDocType.getAreaInchargeDesc() + "");
            contentValues1.put("s_dt", maDocType.getS_dt() + "");
            contentValues1.put("s_is_sync", maDocType.getS_is_sync() + "");
            contentValues1.put("s_long", maDocType.getS_long() + "");
            contentValues1.put("s_lat", maDocType.getS_lat() + "");

            id = db.insert("ma_doctype", null, contentValues1);
            setMARetailSites(maRetailSitesList, id, maDocType.getDocID());

        } catch (NumberFormatException e) {
            e.printStackTrace();
        } catch (Exception e) {
        } finally {
            if (db != null) {
                db.close();
            }
        }
    }

    public void setMARetailSites(List<MARetailSites> maRetailSitesList, Long id, String docID) {
        SQLiteDatabase db = this.getReadableDatabase();

        Long idd = -1L;
        try {
            for (int i = 0; i < maRetailSitesList.size(); i++) {
                ContentValues contentValues1 = new ContentValues();

                contentValues1.put("MA_DocType_id", id + "");
                contentValues1.put("DocID", docID);
                contentValues1.put("CostCentreID", maRetailSitesList.get(i).getCostCentreID() + "");
                contentValues1.put("CostCentreDesc", maRetailSitesList.get(i).getCostCentreDesc() + "");
                contentValues1.put("Location", maRetailSitesList.get(i).getLocation() + "");
                contentValues1.put("District", maRetailSitesList.get(i).getDistrict() + "");
                contentValues1.put("LastInspDate", maRetailSitesList.get(i).getLastInspDate() + "");
                contentValues1.put("s_date", maRetailSitesList.get(i).getS_is_sync() + "");
                contentValues1.put("s_is_sync", maRetailSitesList.get(i).getS_is_sync() + "");
                contentValues1.put("s_status", maRetailSitesList.get(i).getS_is_sync() + "");
                contentValues1.put("s_long", maRetailSitesList.get(i).getS_long() + "");
                contentValues1.put("s_lat", maRetailSitesList.get(i).getS_lat() + "");

                idd = db.insert("ma_retailsites", null, contentValues1);
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        } catch (Exception e) {
        } finally {
            if (db != null) {
                db.close();
            }
        }

    }

    public MA_TCP getLatestTCP() {

        MA_TCP ma_tcp = new MA_TCP();
        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        try {

            res = db.rawQuery("select *,date(TcpDate) orderTcpDate from ma_tcp where s_status <> -50 order by orderTcpDate desc limit 1", null);
            res.moveToFirst();
            if (res.isAfterLast() == false) {

                ma_tcp.setId(res.getInt(res.getColumnIndex("id")));
                ma_tcp.setServer_tcp_code(res.getString(res.getColumnIndex("Server_tcp_code")));
                ma_tcp.setAreaInchargeDesc(res.getString(res.getColumnIndex("AreaInchargeDesc")));

                ma_tcp.setStatus(res.getString(res.getColumnIndex("Status")));
                ma_tcp.setS_status(res.getInt(res.getColumnIndex("s_status")));

                ma_tcp.setTcpDesc(res.getString(res.getColumnIndex("TcpDesc")));
                Log.d("LatestTCP", "TCPdate:" + res.getString(res.getColumnIndex("TcpDate")));
                Log.d("LatestTCP", "orderTCPdate:" + res.getString(res.getColumnIndex("orderTcpDate")));
                ma_tcp.setTcpDate(res.getString(res.getColumnIndex("TcpDate")));

            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            if (db != null) {
                db.close();
            }
        }

        return ma_tcp;
    }

    public List<MARetailSites> getAllMARetailSits() {

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<MARetailSites> list = null;
        try {
            list = new ArrayList<MARetailSites>();
            res = db.rawQuery("select * from ma_retailsites ", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                MARetailSites maRetailSites = new MARetailSites();
                maRetailSites.setId(res.getInt(res.getColumnIndex("id")));
                maRetailSites.setMA_DocType_id(res.getInt(res.getColumnIndex("MA_DocType_id")));
                maRetailSites.setDocID(res.getString(res.getColumnIndex("DocID")));
                maRetailSites.setCostCentreID(res.getString(res.getColumnIndex("CostCentreID")));
                maRetailSites.setCostCentreDesc(res.getString(res.getColumnIndex("CostCentreDesc")));
                maRetailSites.setDistrict(res.getString(res.getColumnIndex("District")));
                maRetailSites.setLocation(res.getString(res.getColumnIndex("Location")));
                maRetailSites.setLastInspDate(res.getString(res.getColumnIndex("LastInspDate")));


                maRetailSites.setS_date(res.getString(res.getColumnIndex("s_date")));
                maRetailSites.setS_status(res.getInt(res.getColumnIndex("s_status")));
                maRetailSites.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                maRetailSites.setS_long(res.getString(res.getColumnIndex("s_long")));
                maRetailSites.setS_lat(res.getString(res.getColumnIndex("s_lat")));

                //TODO add all fields (SARFRAZ UPDATE)
                list.add(maRetailSites);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            if (db != null) {
                db.close();
            }
        }
        return list;
    }

    public List<MA_TCP_RetailSites> getAllMATCPRetailSitsTemp() {

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<MA_TCP_RetailSites> list = null;
        try {
            list = new ArrayList<MA_TCP_RetailSites>();
            res = db.rawQuery("select * from ma_tcp_retailsites ", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                MA_TCP_RetailSites maTCPRetailSites = new MA_TCP_RetailSites();
                maTCPRetailSites.setId(res.getInt(res.getColumnIndex("id")));
                maTCPRetailSites.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
                maTCPRetailSites.setServer_TCP_code(res.getString(res.getColumnIndex("Server_TCP_code")));
                maTCPRetailSites.setMA_RetailSites_id(res.getInt(res.getColumnIndex("MA_RetailSites_id")));
                maTCPRetailSites.setDocID(res.getString(res.getColumnIndex("DocID")));
                maTCPRetailSites.setDocName(res.getString(res.getColumnIndex("DocName")));
                maTCPRetailSites.setCostCentreID(res.getString(res.getColumnIndex("CostCentreID")));
                maTCPRetailSites.setCostCentreDesc(res.getString(res.getColumnIndex("CostCentreDesc")));
                maTCPRetailSites.setDistrict(res.getString(res.getColumnIndex("District")));
                maTCPRetailSites.setLocation(res.getString(res.getColumnIndex("Location")));
                maTCPRetailSites.setLastinspDate(res.getString(res.getColumnIndex("LastinspDate")));
                maTCPRetailSites.setLastInspCode(res.getString(res.getColumnIndex("LastInspCode")));
                maTCPRetailSites.setTourPlanning(res.getString(res.getColumnIndex("TourPlanning")));
                maTCPRetailSites.setVisitDate(res.getString(res.getColumnIndex("visitDate")));
                maTCPRetailSites.setTravelTime(res.getString(res.getColumnIndex("TravelTime")));
                maTCPRetailSites.setInspTime(res.getString(res.getColumnIndex("InspTime")));
                maTCPRetailSites.setKMs(res.getString(res.getColumnIndex("KMs")));
                maTCPRetailSites.setVisitPurpose(res.getString(res.getColumnIndex("VisitPurpose")));
                maTCPRetailSites.setTourOrderNo(res.getString(res.getColumnIndex("TourOrderNo")));
                maTCPRetailSites.setCocoSite(res.getString(res.getColumnIndex("CocoSite")));
                maTCPRetailSites.setInspectionDate(res.getString(res.getColumnIndex("InspectionDate")));

                maTCPRetailSites.setStatus(res.getString(res.getColumnIndex("Status")));
                maTCPRetailSites.setStatus_IE_1(res.getInt(res.getColumnIndex("Status_IE_1")));
                maTCPRetailSites.setStatus_IE_2(res.getInt(res.getColumnIndex("Status_IE_2")));
                maTCPRetailSites.setStatus_IE_3(res.getInt(res.getColumnIndex("Status_IE_3")));
                maTCPRetailSites.setStatus_IE_4(res.getInt(res.getColumnIndex("Status_IE_4")));
                maTCPRetailSites.setStatus_IE_5(res.getInt(res.getColumnIndex("Status_IE_5")));


                maTCPRetailSites.setS_date(res.getString(res.getColumnIndex("s_date")));
                maTCPRetailSites.setS_status(res.getInt(res.getColumnIndex("s_status")));
                maTCPRetailSites.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                maTCPRetailSites.setS_long(res.getString(res.getColumnIndex("s_long")));
                maTCPRetailSites.setS_lat(res.getString(res.getColumnIndex("s_lat")));

                //TODO add all fields (SARFRAZ UPDATE)
                list.add(maTCPRetailSites);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            if (db != null) {
                db.close();
            }
        }
        return list;
    }

    public void updateMeterReadingClosingValue(MA_Meterreading ma_meterreading, int rtsid) {


        SQLiteDatabase db = this.getReadableDatabase();

        try {
            ContentValues contentValues = new ContentValues();

            contentValues.put("To_date", ma_meterreading.getTo_date());
            contentValues.put("Closing", ma_meterreading.getClosing());
            contentValues.put("Sale", ma_meterreading.getSale());
            contentValues.put("s_status", TCP_STATUS_RETAIL_SITE.SAVED);
            contentValues.put("s_long", ma_meterreading.getS_long());
            contentValues.put("s_lat", ma_meterreading.getS_lat());

            int NumOfRowsUpdated = db.update("ma_meterreadings", contentValues, "id =" + ma_meterreading.getId(), null);

            if (NumOfRowsUpdated > 0) {
                // updateMARetailSiteStatus(rtsid, "Status_IE_1", 50);
                getMeaterReadingStatus(rtsid);
            }
            EventBus.getDefault().postSticky(new GenericEvent(EventType.updateSale));
            Log.d("DB", "updating");
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }

    public boolean updateRemarksOfStockReconociliationHeader(String remarks, MA_StockReconciliation ma_stockReconciliationList) {


//        SQLiteDatabase db = this.getReadableDatabase();
//        ContentValues contentValues = null;
//        Boolean res = false;
//        try {
//            contentValues = new ContentValues();
//            contentValues.put("remarks", remarks);
//            res = db.update("ma_stockreconciliation", contentValues, "RequestNo= '" + reqestid.trim() + "' AND ProductCode= '" + productcode.trim() + "' AND TestCode= '" + testcode + "' AND SampleId ='" + sampleid + "'", null) > 0;
//            res = true;
//        } catch (Exception e) {
//            e.printStackTrace();
//        } finally {
//
//            db.close();
//        }
//        return res;
//

        SQLiteDatabase db = this.getReadableDatabase();
        Boolean res = false;

        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put("remarks", remarks);
            res = db.update("ma_stockreconciliation", contentValues,
                    "MA_TCP_ID = '" + ma_stockReconciliationList.getMA_TCP_ID()
                            + "' AND Server_TCP_code= '" + ma_stockReconciliationList.getServer_TCP_code()
                            + "' AND MA_TCP_Retailsites_id= '" + ma_stockReconciliationList.getMA_TCP_Retailsites_id()
                            + "' AND CostCentreID= '" + ma_stockReconciliationList.getCostCentreID()
                            + "' AND ProductCode= '" + ma_stockReconciliationList.getProductCode() +"'", null) > 0;

           res = true;
            Log.d("MA_TCP_ID", String.valueOf(ma_stockReconciliationList.getMA_TCP_ID()));
            Log.d("Server_TCP_code", ma_stockReconciliationList.getServer_TCP_code());
            Log.d("MA_TCP_Retailsites_id", ma_stockReconciliationList.getMA_TCP_Retailsites_id());
            Log.d("CostCentreID", ma_stockReconciliationList.getCostCentreID());
            Log.d("ProductCode",ma_stockReconciliationList.getProductCode() );
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return res;
    }



    public int getMeaterReadingStatus(int rtsid) {

        int status = TCP_STATUS_RETAIL_SITE.TEMP;
        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        try {

            res = db.rawQuery("select * from ma_meterreadings where s_Status <= 0 and MA_TCP_Retailsites_id=" + rtsid, null);
            if (res != null && res.getCount() > 0) {
                status = TCP_STATUS_RETAIL_SITE.TEMP;
            } else {
                status = TCP_STATUS_RETAIL_SITE.SAVED;
                ContentValues contentValues = new ContentValues();
                contentValues.put("Status_IE_1", status);
                int NumOfRowsUpdated = db.update("ma_tcp_retailsites", contentValues, "id = " + rtsid, null);
                Log.d("No. of TCP Updated", NumOfRowsUpdated + "");
                /*                status = TCP_STATUS_RETAIL_SITE.COMPLETE;

                ContentValues contentValues1 = new ContentValues();
                contentValues1.put("Status", "200"); SARFRAZ KHAN

                int RowsUpdated = db.update("ma_tcp", contentValues1, "id = " + ma_tcp_id, null);
                Log.d("No. of TCP Updated", RowsUpdated + "");*/
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            if (db != null)
                db.close();
        }
        return status;
    }

    public String getTCPdate(int ma_tcp_id) {
        String tcpdate = "";
        Cursor res = null;
        try {
            SQLiteDatabase db = this.getReadableDatabase();
            res = db.rawQuery("select TcpDate from ma_TCP where id=" + ma_tcp_id, null);
            if (res != null && res.getCount() > 0) {
                tcpdate = res.getString(res.getColumnIndex("TcpDate"));

            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
        }
        return tcpdate;
    }

    public void addGenInspInfo(List<Point> pointList, List<Condition> conditionList, List<ActionPlan> actionPlanList, List<ParticularCategory> particularCategoryList) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long id = -1L;
        try {
//            ContentValues contentValues = new ContentValues();
//            contentValues.put("Score", "Select Points");
//            contentValues.put("Code", "-1");
//
//            id = db.insert("ma_points", null, contentValues);

            for (int i = 0; i < pointList.size(); i++) {
                ContentValues contentValues1 = new ContentValues();
                contentValues1.put("Code", pointList.get(i).getCode());
                contentValues1.put("Score", pointList.get(i).getScore());

                id = db.insert("ma_points", null, contentValues1);
            }

            for (int i = 0; i < conditionList.size(); i++) {
                ContentValues contentValues1 = new ContentValues();
                contentValues1.put("Code", conditionList.get(i).getCode());
                contentValues1.put("Desc", conditionList.get(i).getDesc());

                id = db.insert("ma_conditions", null, contentValues1);
            }

            for (int i = 0; i < actionPlanList.size(); i++) {
                ContentValues contentValues1 = new ContentValues();
                contentValues1.put("Code", actionPlanList.get(i).getCode());
                contentValues1.put("Desc", actionPlanList.get(i).getDesc());

                id = db.insert("ma_actionplan", null, contentValues1);
            }

            for (int i = 0; i < particularCategoryList.size(); i++) {
                ContentValues contentValues1 = new ContentValues();
                contentValues1.put("Type", particularCategoryList.get(i).getType());
                contentValues1.put("CategoryCode", particularCategoryList.get(i).getCategoryCode());
                contentValues1.put("CategoryDesc", particularCategoryList.get(i).getCategoryDesc());
                contentValues1.put("Code", particularCategoryList.get(i).getCode());
                contentValues1.put("Desc", particularCategoryList.get(i).getDesc());

                id = db.insert("ma_particularcategory", null, contentValues1);
                for (NestedActionPlan nActionPlan : particularCategoryList.get(i).getNestedActionPlan()) {
                    ContentValues contentValuesNAP = new ContentValues();
                    contentValuesNAP.put("PCode", particularCategoryList.get(i).getCode());
                    contentValuesNAP.put("Code", nActionPlan.getCode());
                    contentValuesNAP.put("Desc", nActionPlan.getDesc());
                    id = db.insert("ma_nestedactionplan", null, contentValuesNAP);

                }
                for (NestedCondition nConditions : particularCategoryList.get(i).getNestedConditions()) {
                    ContentValues contentValuesNC = new ContentValues();
                    contentValuesNC.put("PCode", particularCategoryList.get(i).getCode());
                    contentValuesNC.put("Code", nConditions.getCode());
                    contentValuesNC.put("Desc", nConditions.getDesc());
                    id = db.insert("ma_nestedconditions", null, contentValuesNC);

                }

            }


        } catch (NumberFormatException e) {
            e.printStackTrace();
        } catch (Exception e) {
        } finally {
            if (db != null) {
                db.close();
            }
        }
    }

    public void addTankCalibration(TankCalibration tankCalibration) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long id = -1L;
        try {

            /*for (int i = 0; i < pointList.size(); i++) {*/
            ContentValues contentValues1 = new ContentValues();
            contentValues1.put("SeqNo", tankCalibration.getSeqNo());
            contentValues1.put("Ltr", tankCalibration.getLtr());
            contentValues1.put("DipMM", tankCalibration.getDipMM());
            contentValues1.put("TankCode", tankCalibration.getTankCode());

            id = db.insert("ma_TankCalibrations", null, contentValues1);

            Log.d("DBHELPER", "TankCaliberationID=" + id.toString());

        } catch (NumberFormatException e) {
            e.printStackTrace();
        } catch (Exception e) {
        } finally {
            if (db != null) {
                db.close();
            }
        }

    }

    public void insertStockReconRIReasons(MA_StockReconReasons reasons) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long id = -1L;
        try {

            /*for (int i = 0; i < pointList.size(); i++) {*/
            ContentValues contentValues1 = new ContentValues();
            contentValues1.put("Desc", reasons.getDescription());
            contentValues1.put("Code", reasons.getCode());
            contentValues1.put("ForScreen", reasons.getForScreen());
            contentValues1.put("DocNo", reasons.getDocumentNo());

            id = db.insert("ma_stockrecon_reasons", null, contentValues1);

            Log.d("DBHELPER", "MA_StockReconReasonsID=" + id.toString());

        } catch (NumberFormatException e) {
            e.printStackTrace();
        } catch (Exception e) {
        } finally {
            if (db != null) {
                db.close();
            }
        }

    }

    public List<MA_StockReconReasons> getStockReconRIReasons(String forScreen) {

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<MA_StockReconReasons> list = null;
        try {
            list = new ArrayList<MA_StockReconReasons>();

            res = db.rawQuery("select * from ma_stockrecon_reasons where ForScreen = '" + forScreen + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                MA_StockReconReasons ma_stockReconReasons = new MA_StockReconReasons();
                ma_stockReconReasons.setDescription(res.getString(res.getColumnIndex("Desc")));
                ma_stockReconReasons.setCode(res.getString(res.getColumnIndex("Code")));

                list.add(ma_stockReconReasons);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            if (db != null)
                db.close();
        }
        return list;
    }

    public List<ParticularCategory> getParticularsCategory() {

//        db.execSQL(
//                "CREATE TABLE IF NOT EXISTS `ma_particularcategory` (\n" +
//                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//                        "  `Type` Text(20) DEFAULT NULL,\n" +
//                        "  `Code` Text(20) DEFAULT NULL,\n" +
//                        "  `Desc` Text(20) DEFAULT NULL\n" +
//                        ") ;"
        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<ParticularCategory> list = null;
        try {
            list = new ArrayList<ParticularCategory>();

            res = db.rawQuery("select * from ma_particularcategory ", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                ParticularCategory particularCategory = new ParticularCategory();
                particularCategory.setType(res.getString(res.getColumnIndex("Type")));
                particularCategory.setCode(res.getString(res.getColumnIndex("Code")));
                particularCategory.setDesc(res.getString(res.getColumnIndex("Desc")));

                list.add(particularCategory);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            if (db != null)
                db.close();
        }
        return list;
    }

    public List<Point> getPoints() {

//        db.execSQL(
//                "CREATE TABLE IF NOT EXISTS `ma_points` (\n" +
//                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//                        "  `Code` Text(20) DEFAULT NULL,\n" +
//                        "  `Score` Text(20) DEFAULT NULL\n" +
//                        ") ;"
//        );

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<Point> list = null;
        try {
            list = new ArrayList<Point>();

            res = db.rawQuery("select * from ma_points", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                Point point = new Point();
                point.setCode(res.getString(res.getColumnIndex("Code")));
                point.setScore(res.getString(res.getColumnIndex("Score")));

                list.add(point);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            if (db != null)
                db.close();
        }
        return list;
    }

    public List<ActionPlan> getActionPlan(String pCode) {
//        db.execSQL(
//                "CREATE TABLE IF NOT EXISTS `ma_actionplan` (\n" +
//                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//                        "  `Code` Text(20) DEFAULT NULL,\n" +
//                        "  `Desc` Text(20) DEFAULT NULL\n" +
//                        ") ;"
//        );
//


//        "CREATE TABLE IF NOT EXISTS `ma_nestedactionplan` (\n" +
//                "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//                "  `PCode` Text(20) DEFAULT NULL,\n" +
//                "  `Code` Text(20) DEFAULT NULL,\n" +
//                "  `Desc` Text(50) DEFAULT NULL\n" +
//                ") ;"


        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<ActionPlan> list = null;
        try {
            list = new ArrayList<ActionPlan>();

            res = db.rawQuery("select * from ma_nestedactionplan where PCode = '" + pCode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                ActionPlan actionPlan = new ActionPlan();
                actionPlan.setCode(res.getString(res.getColumnIndex("Code")));
                actionPlan.setDesc(res.getString(res.getColumnIndex("Desc")));

                list.add(actionPlan);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            if (db != null)
                db.close();
        }
        return list;
    }

    public List<Condition> getConditions(String pCode) {
//        db.execSQL(
//                "CREATE TABLE IF NOT EXISTS `ma_conditions` (\n" +
//                        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//                        "  `Code` Text(20) DEFAULT NULL,\n" +
//                        "  `Desc` Text(20) DEFAULT NULL\n" +
//                        ") ;"
//        );

//        "CREATE TABLE IF NOT EXISTS `ma_nestedconditions` (\n" +
//                "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//                "  `PCode` Text(20) DEFAULT NULL,\n" +
//                "  `Code` Text(20) DEFAULT NULL,\n" +
//                "  `Desc` Text(50) DEFAULT NULL\n" +
//                ") ;"

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<Condition> list = null;
        try {
            list = new ArrayList<Condition>();

            res = db.rawQuery("select * from ma_nestedconditions where PCode = '" + pCode + "'", null);
            res.moveToFirst();

            while (res.isAfterLast() == false) {

                Condition condition = new Condition();
                condition.setCode(res.getString(res.getColumnIndex("Code")));
                condition.setDesc(res.getString(res.getColumnIndex("Desc")));

                list.add(condition);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (res != null)
                res.close();
            if (db != null)
                db.close();
        }
        return list;
    }

    public List<MA_GI_Standard> getMA_GI_StandardList(int rtsid, int ma_tcp_id, String categoryID) {

//        "CREATE TABLE `ma_GI_Standard` (\n" +
//                "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//                "  `MA_TCP_ID` INTEGER(10) DEFAULT NULL,\n" +
//                "  `Server_TCP_code` TEXT(20) DEFAULT NULL,\n" +
//                "  `MA_TCP_RetailSite_id` INTEGER(20) DEFAULT NULL,\n" +
//                "  `CostCentreID` TEXT(20) DEFAULT NULL,\n" +
//                "  `MA_GI_id` INTEGER(20) DEFAULT NULL,\n" +
//                "\n" +
//                "  `CategoryGroup` TEXT(50) DEFAULT NULL,\n" +
//                "  `CategoryID` TEXT(50) DEFAULT NULL,\n" +
//                "  `CategoryName` TEXT(100) DEFAULT NULL,\n" +
//                "  `ParticularCode` TEXT(50) DEFAULT NULL,\n" +
//                "  `PartName` TEXT(100) DEFAULT NULL,\n" +
//                "  `Points` TEXT(100) DEFAULT NULL,\n" +
//                "  `ConditionCode` TEXT(50) DEFAULT NULL,\n" +
//                "  `Condition` TEXT(100) DEFAULT NULL,\n" +
//                "  `ActionPlanCode` TEXT(50) DEFAULT NULL,\n" +
//                "  `ActionPlan` TEXT(100) DEFAULT NULL,\n" +
//                "  `Remarks` TEXT(1000) DEFAULT NULL,\n" +
//                "\n" +
//                "  `Att_id` TEXT(50) DEFAULT NULL,\n" +
//                "  `Att_file` TEXT(100) DEFAULT NULL,\n" +
//                "  `Att_path` TEXT(200) DEFAULT NULL,\n" +
//                "  `Att_server_id` TEXT(50) DEFAULT NULL,\n" +
//                "  `Att_server_path` TEXT(200) DEFAULT NULL,\n" +
//                "    \n" +
//                "  `Status` TEXT(20) DEFAULT NULL,\n" +
//                "  `s_date` DATETIME DEFAULT CURRENT_TIMESTAMP,\n" +
//                "  `s_is_sync` INTEGER(20) DEFAULT NULL,\n" +
//                "  `s_status` INTEGER(20) DEFAULT NULL,\n" +
//                "  `s_long` TEXT(20) DEFAULT NULL,\n" +
//                "  `s_lat` TEXT(20) DEFAULT NULL\n" +
//                ") ;"
        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<MA_GI_Standard> list = null;
        try {
            list = new ArrayList<MA_GI_Standard>();


            res = db.rawQuery("select * from ma_GI_Standard where MA_TCP_ID = " + ma_tcp_id + " and MA_TCP_RetailSite_id = " + rtsid + " and CategoryID = '" + categoryID + "' order by CategoryID", null);
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                MA_GI_Standard ma_gi_standard = new MA_GI_Standard();
                ma_gi_standard.setId(res.getInt(res.getColumnIndex("id")));
                ma_gi_standard.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
                ma_gi_standard.setServer_TCP_code(res.getString(res.getColumnIndex("Server_TCP_code")));

                ma_gi_standard.setMA_TCP_RetailSite_id(res.getInt(res.getColumnIndex("MA_TCP_RetailSite_id")));
                ma_gi_standard.setCondition(res.getString(res.getColumnIndex("Condition")));
                ma_gi_standard.setActionPlan(res.getString(res.getColumnIndex("ActionPlan")));
                ma_gi_standard.setActionPlanCode(res.getString(res.getColumnIndex("ConditionCode")));
                ma_gi_standard.setPoints(res.getString(res.getColumnIndex("Points")));
                ma_gi_standard.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                ma_gi_standard.setParticularCode(res.getString(res.getColumnIndex("ParticularCode")));
                ma_gi_standard.setStatus(res.getString(res.getColumnIndex("Status")));
                ma_gi_standard.setPartName(res.getString(res.getColumnIndex("PartName")));
                ma_gi_standard.setAtt_path(res.getString(res.getColumnIndex("Att_path")));
                list.add(ma_gi_standard);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return list;
    }

    public List<MA_GI_Standard> getMA_GI_StandardListFromID(int ma_tcp_id) {

//        "CREATE TABLE `ma_GI_Standard` (\n" +
//                "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//                "  `MA_TCP_ID` INTEGER(10) DEFAULT NULL,\n" +
//                "  `Server_TCP_code` TEXT(20) DEFAULT NULL,\n" +
//                "  `MA_TCP_RetailSite_id` INTEGER(20) DEFAULT NULL,\n" +
//                "  `CostCentreID` TEXT(20) DEFAULT NULL,\n" +
//                "  `MA_GI_id` INTEGER(20) DEFAULT NULL,\n" +
//                "\n" +
//                "  `CategoryGroup` TEXT(50) DEFAULT NULL,\n" +
//                "  `CategoryID` TEXT(50) DEFAULT NULL,\n" +
//                "  `CategoryName` TEXT(100) DEFAULT NULL,\n" +
//                "  `ParticularCode` TEXT(50) DEFAULT NULL,\n" +
//                "  `PartName` TEXT(100) DEFAULT NULL,\n" +
//                "  `Points` TEXT(100) DEFAULT NULL,\n" +
//                "  `ConditionCode` TEXT(50) DEFAULT NULL,\n" +
//                "  `Condition` TEXT(100) DEFAULT NULL,\n" +
//                "  `ActionPlanCode` TEXT(50) DEFAULT NULL,\n" +
//                "  `ActionPlan` TEXT(100) DEFAULT NULL,\n" +
//                "  `Remarks` TEXT(1000) DEFAULT NULL,\n" +
//                "\n" +
//                "  `Att_id` TEXT(50) DEFAULT NULL,\n" +
//                "  `Att_file` TEXT(100) DEFAULT NULL,\n" +
//                "  `Att_path` TEXT(200) DEFAULT NULL,\n" +
//                "  `Att_server_id` TEXT(50) DEFAULT NULL,\n" +
//                "  `Att_server_path` TEXT(200) DEFAULT NULL,\n" +
//                "    \n" +
//                "  `Status` TEXT(20) DEFAULT NULL,\n" +
//                "  `s_date` DATETIME DEFAULT CURRENT_TIMESTAMP,\n" +
//                "  `s_is_sync` INTEGER(20) DEFAULT NULL,\n" +
//                "  `s_status` INTEGER(20) DEFAULT NULL,\n" +
//                "  `s_long` TEXT(20) DEFAULT NULL,\n" +
//                "  `s_lat` TEXT(20) DEFAULT NULL\n" +
//                ") ;"
        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<MA_GI_Standard> list = null;
        try {
            list = new ArrayList<MA_GI_Standard>();


            res = db.rawQuery("select * from ma_GI_Standard where MA_GI_id = " + ma_tcp_id, null);
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                MA_GI_Standard ma_gi_standard = new MA_GI_Standard();
                ma_gi_standard.setId(res.getInt(res.getColumnIndex("id")));
                ma_gi_standard.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
                ma_gi_standard.setCostCentreID(res.getString(res.getColumnIndex("CostCentreID")));

                ma_gi_standard.setMA_GI_id(res.getInt(res.getColumnIndex("MA_GI_id")));

                ma_gi_standard.setCategoryID(res.getString(res.getColumnIndex("CategoryID")));
                ma_gi_standard.setCategoryName(res.getString(res.getColumnIndex("CategoryName")));
                ma_gi_standard.setParticularCode(res.getString(res.getColumnIndex("ParticularCode")));
                ma_gi_standard.setPartName(res.getString(res.getColumnIndex("PartName")));
                ma_gi_standard.setPoints(res.getString(res.getColumnIndex("Points")));

                ma_gi_standard.setConditionCode(res.getString(res.getColumnIndex("ConditionCode")));
                ma_gi_standard.setCondition(res.getString(res.getColumnIndex("Condition")));
                ma_gi_standard.setActionPlanCode(res.getString(res.getColumnIndex("ActionPlanCode")));
                ma_gi_standard.setActionPlan(res.getString(res.getColumnIndex("ActionPlan")));

                ma_gi_standard.setRemarks(res.getString(res.getColumnIndex("Remarks")));

                ma_gi_standard.setStatus(res.getString(res.getColumnIndex("Status")));
                ma_gi_standard.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));

                ma_gi_standard.setAtt_server_path(res.getString(res.getColumnIndex("Att_server_path")));
                ma_gi_standard.setAtt_path(res.getString(res.getColumnIndex("Att_path")));
                list.add(ma_gi_standard);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return list;
    }


    public void updateGeneralInspection(MA_GI_Standard ma_gi_standard, int rsid) {

//        "CREATE TABLE `ma_GI_Standard` (\n" +
//                "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//                "  `MA_TCP_ID` INTEGER(10) DEFAULT NULL,\n" +
//                "  `Server_TCP_code` TEXT(20) DEFAULT NULL,\n" +
//                "  `MA_TCP_RetailSite_id` INTEGER(20) DEFAULT NULL,\n" +
//                "  `CostCentreID` TEXT(20) DEFAULT NULL,\n" +
//                "  `MA_GI_id` INTEGER(20) DEFAULT NULL,\n" +
//                "\n" +
//                "  `CategoryGroup` TEXT(50) DEFAULT NULL,\n" +
//                "  `CategoryID` TEXT(50) DEFAULT NULL,\n" +
//                "  `CategoryName` TEXT(100) DEFAULT NULL,\n" +
//                "  `ParticularCode` TEXT(50) DEFAULT NULL,\n" +
//                "  `PartName` TEXT(100) DEFAULT NULL,\n" +
//                "  `Points` TEXT(100) DEFAULT NULL,\n" +
//                "  `ConditionCode` TEXT(50) DEFAULT NULL,\n" +
//                "  `Condition` TEXT(100) DEFAULT NULL,\n" +
//                "  `ActionPlanCode` TEXT(50) DEFAULT NULL,\n" +
//                "  `ActionPlan` TEXT(100) DEFAULT NULL,\n" +
//                "  `Remarks` TEXT(1000) DEFAULT NULL,\n" +
//                "\n" +
//                "  `Att_id` TEXT(50) DEFAULT NULL,\n" +
//                "  `Att_file` TEXT(100) DEFAULT NULL,\n" +
//                "  `Att_path` TEXT(200) DEFAULT NULL,\n" +
//                "  `Att_server_id` TEXT(50) DEFAULT NULL,\n" +
//                "  `Att_server_path` TEXT(200) DEFAULT NULL,\n" +
//                "    \n" +
//                "  `Status` TEXT(20) DEFAULT NULL,\n" +
//                "  `s_date` DATETIME DEFAULT CURRENT_TIMESTAMP,\n" +
//                "  `s_is_sync` INTEGER(20) DEFAULT NULL,\n" +
//                "  `s_status` INTEGER(20) DEFAULT NULL,\n" +
//                "  `s_long` TEXT(20) DEFAULT NULL,\n" +
//                "  `s_lat` TEXT(20) DEFAULT NULL\n" +
//                ") ;"
        SQLiteDatabase db = this.getReadableDatabase();

        try {
            ContentValues contentValues = new ContentValues();

            //contentValues.put("CategoryID", ma_gi_standard.getCategoryID());
            //contentValues.put("CategoryName", ma_gi_standard.getCategoryName());
            contentValues.put("ParticularCode", ma_gi_standard.getParticularCode());
            contentValues.put("PartName", ma_gi_standard.getPartName());
            contentValues.put("Points", ma_gi_standard.getPoints());
//            contentValues.put("ParticularCode", ma_gi_standard.getParticularCode());
//            contentValues.put("PartName", ma_gi_standard.getPartName());
            contentValues.put("ActionPlan", ma_gi_standard.getActionPlan());
            contentValues.put("ActionPlanCode", ma_gi_standard.getActionPlanCode());
            contentValues.put("Condition", ma_gi_standard.getCondition());
            contentValues.put("ConditionCode", ma_gi_standard.getConditionCode());
            contentValues.put("Remarks", ma_gi_standard.getRemarks());
            contentValues.put("Att_path", ma_gi_standard.getAtt_path());
            contentValues.put("Att_server_path", ma_gi_standard.getAtt_server_path());

            if (ma_gi_standard.getRemarks() != null && ma_gi_standard.getPoints() != null && ma_gi_standard.getParticularCode() != null && ma_gi_standard.getActionPlan() != null && ma_gi_standard.getCondition() != null) {
                contentValues.put("s_status", TCP_STATUS_RETAIL_SITE.SAVED);
            }
            int NumOfRowsUpdated = db.update("ma_GI_Standard", contentValues, "id =" + ma_gi_standard.getId(), null);
            if (NumOfRowsUpdated > 0) {
                updateMARetailSiteStatus(rsid, "Status_IE_5", 50);
            }
            Log.d("DB", "updating");
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }

    public void updateGeneralInspectionMain(MA_GI_Main ma_gi_main, int rsid) {

//    "CREATE TABLE `ma_GI_Main` (\n" +
//            "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//            "  `MA_TCP_ID` INTEGER(10) DEFAULT NULL,\n" +
//            "  `Server_TCP_code` TEXT(20) DEFAULT NULL,\n" +
//            "  `MA_TCP_RetailSite_id` INTEGER(20) DEFAULT NULL,\n" +
//            "  `CostCentreID` TEXT(20) DEFAULT NULL,\n" +
//            "  `Comments` TEXT(1000) DEFAULT NULL,\n" +
//            "  `userAck` TEXT(1000) DEFAULT NULL,\n" +
//            "  `UA_img_id` TEXT(50) DEFAULT NULL,\n" +
//            "  `UA_img_file` TEXT(100) DEFAULT NULL,\n" +
//            "  `UA_img_path` TEXT(200) DEFAULT NULL,\n" +
//            "  `UA_server_id` TEXT(50) DEFAULT NULL,\n" +
//            "  `UA_server_path` TEXT(200) DEFAULT NULL,\n" +
//            //  "    \n" +
//            "  `Status` TEXT(20) DEFAULT NULL,\n" +
//            "  `s_date` DATETIME DEFAULT CURRENT_TIMESTAMP,\n" +
//            "  `s_is_sync` INTEGER(20) DEFAULT NULL,\n" +
//            "  `s_status` INTEGER(20) DEFAULT NULL,\n" +
//            "  `s_long` TEXT(20) DEFAULT NULL,\n" +
//            "  `s_lat` TEXT(20) DEFAULT NULL\n" +
//            ") ;"
        SQLiteDatabase db = this.getReadableDatabase();

        try {
            ContentValues contentValues = new ContentValues();

            contentValues.put("UA_img_path", ma_gi_main.getUA_img_path());
            contentValues.put("UA_server_path", ma_gi_main.getUA_server_path());


            int NumOfRowsUpdated = db.update("ma_GI_Main", contentValues, "id =" + ma_gi_main.getId(), null);
            if (NumOfRowsUpdated > 0) {
                updateMARetailSiteStatus(rsid, "Status_IE_5", 50);
            }
            Log.d("DB", "updating");
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }


    public MA_GI_Main getMA_GI_MainByRetailSite(int rsid) {

//    "CREATE TABLE `ma_GI_Main` (\n" +
//            "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//            "  `MA_TCP_ID` INTEGER(10) DEFAULT NULL,\n" +
//            "  `Server_TCP_code` TEXT(20) DEFAULT NULL,\n" +
//            "  `MA_TCP_RetailSite_id` INTEGER(20) DEFAULT NULL,\n" +
//            "  `CostCentreID` TEXT(20) DEFAULT NULL,\n" +
//            "  `Comments` TEXT(1000) DEFAULT NULL,\n" +
//            "  `userAck` TEXT(1000) DEFAULT NULL,\n" +
//            "  `UA_img_id` TEXT(50) DEFAULT NULL,\n" +
//            "  `UA_img_file` TEXT(100) DEFAULT NULL,\n" +
//            "  `UA_img_path` TEXT(200) DEFAULT NULL,\n" +
//            "  `UA_server_id` TEXT(50) DEFAULT NULL,\n" +
//            "  `UA_server_path` TEXT(200) DEFAULT NULL,\n" +
//            //  "    \n" +
//            "  `Status` TEXT(20) DEFAULT NULL,\n" +
//            "  `s_date` DATETIME DEFAULT CURRENT_TIMESTAMP,\n" +
//            "  `s_is_sync` INTEGER(20) DEFAULT NULL,\n" +
//            "  `s_status` INTEGER(20) DEFAULT NULL,\n" +
//            "  `s_long` TEXT(20) DEFAULT NULL,\n" +
//            "  `s_lat` TEXT(20) DEFAULT NULL\n" +
//            ") ;"
        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        MA_GI_Main ma_gi_main = null;
        try {


            res = db.rawQuery("select * from ma_GI_Main where MA_TCP_RetailSite_id = " + rsid, null);
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                ma_gi_main = new MA_GI_Main();
                ma_gi_main.setId(res.getInt(res.getColumnIndex("id")));
                ma_gi_main.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
                ma_gi_main.setCostCentreID(res.getString(res.getColumnIndex("CostCentreID")));


                ma_gi_main.setServer_TCP_code(res.getString(res.getColumnIndex("Server_TCP_code")));
                ma_gi_main.setMA_TCP_RetailSite_id(res.getInt(res.getColumnIndex("MA_TCP_RetailSite_id")));
                ma_gi_main.setComments(res.getString(res.getColumnIndex("Comments")));
                ma_gi_main.setUserAck(res.getString(res.getColumnIndex("userAck")));
                ma_gi_main.setUA_img_id(res.getString(res.getColumnIndex("UA_img_id")));

                ma_gi_main.setUA_img_file(res.getString(res.getColumnIndex("UA_img_file")));
                ma_gi_main.setUA_img_path(res.getString(res.getColumnIndex("UA_img_path")));
                ma_gi_main.setUA_server_id(res.getString(res.getColumnIndex("UA_server_id")));

                ma_gi_main.setUA_server_path(res.getString(res.getColumnIndex("UA_server_path")));
                ma_gi_main.setStatus(res.getString(res.getColumnIndex("Status")));
                ma_gi_main.setS_date(res.getString(res.getColumnIndex("s_date")));
                ma_gi_main.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                ma_gi_main.setS_status(res.getInt(res.getColumnIndex("s_status")));
                ma_gi_main.setS_long(res.getString(res.getColumnIndex("s_long")));
                ma_gi_main.setS_lat(res.getString(res.getColumnIndex("s_lat")));


                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return ma_gi_main;
    }


    public void updateTankDips(MA_TANKDIPS ma_tankdips, int rtid) {


        SQLiteDatabase db = this.getReadableDatabase();

        try {
            ContentValues contentValues = new ContentValues();

            contentValues.put("Dip_Stock_M", ma_tankdips.getDip_Stock_M());
            contentValues.put("Dip_Stock_L", ma_tankdips.getDip_Stock_L());
            contentValues.put("StockType", ma_tankdips.getStockType());
            contentValues.put("s_status", TCP_STATUS_RETAIL_SITE.SAVED);
            contentValues.put("s_long", ma_tankdips.getS_long());
            contentValues.put("s_lat", ma_tankdips.getS_lat());

            int NumOfRowsUpdated = db.update("ma_tankdips", contentValues, "id =" + ma_tankdips.getId(), null);
            if (NumOfRowsUpdated > 0) {
                updateMARetailSiteStatus(rtid, "Status_IE_2", 50);
            }
            Log.d("DB", "updating");
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            if (db != null)
                db.close();
        }
    }


    public void updateMARetailSiteStatus(int id, String statusKey, int status) {


        SQLiteDatabase db = this.getReadableDatabase();

        try {
            ContentValues contentValues = new ContentValues();

            contentValues.put(statusKey, status);

            int NumOfRowsUpdated = db.update("ma_tcp_retailsites", contentValues, "id =" + id, null);
            if (NumOfRowsUpdated > 0) {
                EventBus.getDefault().post(new GenericEvent(EventType.Refresh_Sales_Reconsilation));
            }
            Log.d("DB", "updating");
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            if (db != null)
                db.close();
        }
    }

    // Chages on 14-07-18 Start

    public void updateInspectionDateandRICommentsandSstatus(int id, String inspectionDate, String RI_comments, int s_status) {


        SQLiteDatabase db = this.getReadableDatabase();

        try {
            ContentValues contentValues = new ContentValues();

            contentValues.put("InspectionDate", inspectionDate);
            contentValues.put("Comment", RI_comments);
            contentValues.put("s_status", s_status);


            int NumOfRowsUpdated = db.update("ma_tcp_retailsites", contentValues, "id =" + id, null);
            if (NumOfRowsUpdated > 0) {
                EventBus.getDefault().post(new GenericEvent(EventType.REFRESH_MY_TCP_LIST));
            }
            Log.d("DB", "updating");
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            if (db != null)
                db.close();
        }
    }


    // Chages on 14-07-18 End

    public List<Category> getCatagoryListStandard(int rtsid, int ma_tcp_id) {


        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<Category> list = null;
        try {
            list = new ArrayList<Category>();


            res = db.rawQuery("select Distinct CategoryID , CategoryName from ma_GI_Standard where MA_TCP_ID = " + ma_tcp_id + " and MA_TCP_RetailSite_id = " + rtsid, null);
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                Category ma_gi_standard = new Category();
                ma_gi_standard.setCategoryID(res.getString(res.getColumnIndex("CategoryID")));
                ma_gi_standard.setCategoryName(res.getString(res.getColumnIndex("CategoryName")));
                list.add(ma_gi_standard);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return list;
    }

    public List<Category> getCatagoryListEquipment(int rtsid, int ma_tcp_id) {


        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<Category> list = null;
        try {
            list = new ArrayList<Category>();


            res = db.rawQuery("select * from ma_GI_Standard where MA_TCP_ID = " + ma_tcp_id, null);//TODO fix it
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                Category ma_gi_standard = new Category();
                ma_gi_standard.setCategoryID(res.getString(res.getColumnIndex("CategoryID")));
                ma_gi_standard.setCategoryName(res.getString(res.getColumnIndex("CategoryName")));
                list.add(ma_gi_standard);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return list;
    }

    public List<MA_GI_Equipment> getMA_GI_EquipmentList(String mainCode, int rtsiteid, int ma_tcp_id) {

//        "CREATE TABLE `ma_GI_Equipment` (\n" +
//                "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//                "  `MA_TCP_ID` INTEGER(10) DEFAULT NULL,\n" +
//                "  `Server_TCP_code` TEXT(20) DEFAULT NULL,\n" +
//                "  `MA_TCP_RetailSite_id` INTEGER(20) DEFAULT NULL,\n" +
//                "  `CostCentreID` TEXT(20) DEFAULT NULL,\n" +
//                "  `MA_GI_id` INTEGER(20) DEFAULT NULL,\n" +
//                //     "\n" +
//                "  `MainCode` TEXT(50) DEFAULT NULL,\n" +
//                "  `MainDesc` TEXT(100) DEFAULT NULL,\n" +
//                "  `FixAssetCode` TEXT(50) DEFAULT NULL,\n" +
//                "  `FixAssetDesc` TEXT(100) DEFAULT NULL,\n" +
//                "  `Ownership` TEXT(100) DEFAULT NULL,\n" +
//                "  `ItemChecked` TEXT(100) DEFAULT NULL,\n" +
//                "  `Remarks` TEXT(1000) DEFAULT NULL,\n" +
//                //     "\n" +
//                "  `Att_id` TEXT(50) DEFAULT NULL,\n" +
//                "  `Att_file` TEXT(100) DEFAULT NULL,\n" +
//                "  `Att_path` TEXT(200) DEFAULT NULL,\n" +
//                "  `Att_server_id` TEXT(50) DEFAULT NULL,\n" +
//                "  `Att_server_path` TEXT(200) DEFAULT NULL,\n" +
//                //      "    \n" +
//                "  `SerialNo` TEXT(100) DEFAULT NULL,\n" +
//                "  `Status` TEXT(20) DEFAULT NULL,\n" +
//                "  `s_date` DATETIME DEFAULT CURRENT_TIMESTAMP,\n" +
//                "  `s_is_sync` INTEGER(20) DEFAULT NULL,\n" +
//                "  `s_status` INTEGER(20) DEFAULT NULL,\n" +
//                "  `s_long` TEXT(20) DEFAULT NULL,\n" +
//                "  `s_lat` TEXT(20) DEFAULT NULL\n" +
//                ") ;"
        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<MA_GI_Equipment> list = null;
        try {
            list = new ArrayList<MA_GI_Equipment>();


            res = db.rawQuery("select * from ma_GI_Equipment where MA_TCP_ID = " + ma_tcp_id + " and MA_TCP_RetailSite_id = " + rtsiteid + " and MainCode = '" + mainCode + "' ", null);
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                MA_GI_Equipment mA_GI_Equipment = new MA_GI_Equipment();
                mA_GI_Equipment.setId(res.getInt(res.getColumnIndex("id")));
                mA_GI_Equipment.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
                mA_GI_Equipment.setServer_TCP_code(res.getString(res.getColumnIndex("Server_TCP_code")));
                mA_GI_Equipment.setCostCentreID(res.getString(res.getColumnIndex("CostCentreID")));
                mA_GI_Equipment.setMA_GI_id(res.getInt(res.getColumnIndex("MA_GI_id")));
                mA_GI_Equipment.setMainCode(res.getString(res.getColumnIndex("MainCode")));
                mA_GI_Equipment.setMainDesc(res.getString(res.getColumnIndex("MainDesc")));
                mA_GI_Equipment.setFixAssetCode(res.getString(res.getColumnIndex("FixAssetCode")));

                mA_GI_Equipment.setFixAssetDesc(res.getString(res.getColumnIndex("FixAssetDesc")));
                mA_GI_Equipment.setOwnership(res.getString(res.getColumnIndex("Ownership")));
                mA_GI_Equipment.setItemChecked(res.getString(res.getColumnIndex("ItemChecked")));
                mA_GI_Equipment.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                mA_GI_Equipment.setAtt_id(res.getString(res.getColumnIndex("Att_id")));
                mA_GI_Equipment.setAtt_file(res.getString(res.getColumnIndex("Att_file")));
                mA_GI_Equipment.setAtt_path(res.getString(res.getColumnIndex("Att_path")));
                mA_GI_Equipment.setAtt_server_path(res.getString(res.getColumnIndex("Att_server_id")));
                mA_GI_Equipment.setAtt_server_id(res.getString(res.getColumnIndex("Att_server_id")));
                mA_GI_Equipment.setAtt_server_path(res.getString(res.getColumnIndex("Att_server_path")));
                mA_GI_Equipment.setSerialNo(res.getString(res.getColumnIndex("SerialNo")));
                mA_GI_Equipment.setStatus(res.getString(res.getColumnIndex("Status")));
                mA_GI_Equipment.setS_date(res.getString(res.getColumnIndex("s_date")));
                mA_GI_Equipment.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                mA_GI_Equipment.setS_status(res.getInt(res.getColumnIndex("s_status")));
                mA_GI_Equipment.setS_long(res.getString(res.getColumnIndex("s_long")));
                mA_GI_Equipment.setS_lat(res.getString(res.getColumnIndex("s_lat")));

                list.add(mA_GI_Equipment);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return list;
    }

    //    public List<MA_GI_Equipment> getMA_GI_EquipmentList(int rtsiteid, int ma_tcp_id) {
//
////        "CREATE TABLE `ma_GI_Equipment` (\n" +
////                "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
////                "  `MA_TCP_ID` INTEGER(10) DEFAULT NULL,\n" +
////                "  `Server_TCP_code` TEXT(20) DEFAULT NULL,\n" +
////                "  `MA_TCP_RetailSite_id` INTEGER(20) DEFAULT NULL,\n" +
////                "  `CostCentreID` TEXT(20) DEFAULT NULL,\n" +
////                "  `MA_GI_id` INTEGER(20) DEFAULT NULL,\n" +
////                //     "\n" +
////                "  `MainCode` TEXT(50) DEFAULT NULL,\n" +
////                "  `MainDesc` TEXT(100) DEFAULT NULL,\n" +
////                "  `FixAssetCode` TEXT(50) DEFAULT NULL,\n" +
////                "  `FixAssetDesc` TEXT(100) DEFAULT NULL,\n" +
////                "  `Ownership` TEXT(100) DEFAULT NULL,\n" +
////                "  `ItemChecked` TEXT(100) DEFAULT NULL,\n" +
////                "  `Remarks` TEXT(1000) DEFAULT NULL,\n" +
////                //     "\n" +
////                "  `Att_id` TEXT(50) DEFAULT NULL,\n" +
////                "  `Att_file` TEXT(100) DEFAULT NULL,\n" +
////                "  `Att_path` TEXT(200) DEFAULT NULL,\n" +
////                "  `Att_server_id` TEXT(50) DEFAULT NULL,\n" +
////                "  `Att_server_path` TEXT(200) DEFAULT NULL,\n" +
////                //      "    \n" +
////                "  `SerialNo` TEXT(100) DEFAULT NULL,\n" +
////                "  `Status` TEXT(20) DEFAULT NULL,\n" +
////                "  `s_date` DATETIME DEFAULT CURRENT_TIMESTAMP,\n" +
////                "  `s_is_sync` INTEGER(20) DEFAULT NULL,\n" +
////                "  `s_status` INTEGER(20) DEFAULT NULL,\n" +
////                "  `s_long` TEXT(20) DEFAULT NULL,\n" +
////                "  `s_lat` TEXT(20) DEFAULT NULL\n" +
////                ") ;"
//        Cursor res = null;
//        SQLiteDatabase db = this.getReadableDatabase();
//        List<MA_GI_Equipment> list = null;
//        try {
//            list = new ArrayList<MA_GI_Equipment>();
//
//
//            res = db.rawQuery("select * from ma_GI_Equipment where MA_TCP_ID = " + ma_tcp_id + " and MA_TCP_RetailSite_id = " + rtsiteid, null);
//            res.moveToFirst();
//            while (res.isAfterLast() == false) {
//                MA_GI_Equipment mA_GI_Equipment = new MA_GI_Equipment();
//                mA_GI_Equipment.setId(res.getInt(res.getColumnIndex("id")));
//                mA_GI_Equipment.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
//                mA_GI_Equipment.setServer_TCP_code(res.getString(res.getColumnIndex("Server_TCP_code")));
//                mA_GI_Equipment.setCostCentreID(res.getString(res.getColumnIndex("CostCentreID")));
//                mA_GI_Equipment.setMA_GI_id(res.getInt(res.getColumnIndex("MA_GI_id")));
//                mA_GI_Equipment.setMainCode(res.getString(res.getColumnIndex("MainCode")));
//                mA_GI_Equipment.setMainDesc(res.getString(res.getColumnIndex("MainDesc")));
//                mA_GI_Equipment.setFixAssetCode(res.getString(res.getColumnIndex("FixAssetCode")));
//
//                mA_GI_Equipment.setFixAssetDesc(res.getString(res.getColumnIndex("FixAssetDesc")));
//                mA_GI_Equipment.setOwnership(res.getString(res.getColumnIndex("Ownership")));
//                mA_GI_Equipment.setItemChecked(res.getString(res.getColumnIndex("ItemChecked")));
//                mA_GI_Equipment.setRemarks(res.getString(res.getColumnIndex("Remarks")));
//                mA_GI_Equipment.setAtt_id(res.getString(res.getColumnIndex("Att_id")));
//                mA_GI_Equipment.setAtt_file(res.getString(res.getColumnIndex("Att_file")));
//                mA_GI_Equipment.setAtt_path(res.getString(res.getColumnIndex("Att_path")));
//                mA_GI_Equipment.setAtt_server_path(res.getString(res.getColumnIndex("Att_server_id")));
//                mA_GI_Equipment.setAtt_server_id(res.getString(res.getColumnIndex("Att_server_id")));
//                mA_GI_Equipment.setAtt_server_path(res.getString(res.getColumnIndex("Att_server_path")));
//                mA_GI_Equipment.setSerialNo(res.getString(res.getColumnIndex("SerialNo")));
//                mA_GI_Equipment.setStatus(res.getString(res.getColumnIndex("Status")));
//                mA_GI_Equipment.setS_date(res.getString(res.getColumnIndex("s_date")));
//                mA_GI_Equipment.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
//                mA_GI_Equipment.setS_status(res.getInt(res.getColumnIndex("s_status")));
//                mA_GI_Equipment.setS_long(res.getString(res.getColumnIndex("s_long")));
//                mA_GI_Equipment.setS_lat(res.getString(res.getColumnIndex("s_lat")));
//
//                list.add(mA_GI_Equipment);
//                res.moveToNext();
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        } finally {
//            if (db != null)
//                db.close();
//        }
//        return list;
//    }
    public List<EquipmentConditionHeader> getMA_GI_EquipmentListHeader(int rtsiteid, int ma_tcp_id) {


        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<EquipmentConditionHeader> list = null;
        try {
            list = new ArrayList<EquipmentConditionHeader>();

            res = db.rawQuery("select  Distinct MainCode , MainDesc from ma_GI_Equipment where MA_TCP_ID = " + ma_tcp_id + " and MA_TCP_RetailSite_id = " + rtsiteid, null);
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                EquipmentConditionHeader equipmentConditionHeader = new EquipmentConditionHeader();

                equipmentConditionHeader.setMainCode(res.getString(res.getColumnIndex("MainCode")));
                equipmentConditionHeader.setDescription(res.getString(res.getColumnIndex("MainDesc")));

                list.add(equipmentConditionHeader);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return list;
    }

    public List<MA_GI_Equipment> getMA_GI_EquipmentListFromID(int ma_tcp_id) {

//        "CREATE TABLE `ma_GI_Equipment` (\n" +
//                "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//                "  `MA_TCP_ID` INTEGER(10) DEFAULT NULL,\n" +
//                "  `Server_TCP_code` TEXT(20) DEFAULT NULL,\n" +
//                "  `MA_TCP_RetailSite_id` INTEGER(20) DEFAULT NULL,\n" +
//                "  `CostCentreID` TEXT(20) DEFAULT NULL,\n" +
//                "  `MA_GI_id` INTEGER(20) DEFAULT NULL,\n" +
//                //     "\n" +
//                "  `MainCode` TEXT(50) DEFAULT NULL,\n" +
//                "  `MainDesc` TEXT(100) DEFAULT NULL,\n" +
//                "  `FixAssetCode` TEXT(50) DEFAULT NULL,\n" +
//                "  `FixAssetDesc` TEXT(100) DEFAULT NULL,\n" +
//                "  `Ownership` TEXT(100) DEFAULT NULL,\n" +
//                "  `ItemChecked` TEXT(100) DEFAULT NULL,\n" +
//                "  `Remarks` TEXT(1000) DEFAULT NULL,\n" +
//                //     "\n" +
//                "  `Att_id` TEXT(50) DEFAULT NULL,\n" +
//                "  `Att_file` TEXT(100) DEFAULT NULL,\n" +
//                "  `Att_path` TEXT(200) DEFAULT NULL,\n" +
//                "  `Att_server_id` TEXT(50) DEFAULT NULL,\n" +
//                "  `Att_server_path` TEXT(200) DEFAULT NULL,\n" +
//                //      "    \n" +
//                "  `SerialNo` TEXT(100) DEFAULT NULL,\n" +
//                "  `Status` TEXT(20) DEFAULT NULL,\n" +
//                "  `s_date` DATETIME DEFAULT CURRENT_TIMESTAMP,\n" +
//                "  `s_is_sync` INTEGER(20) DEFAULT NULL,\n" +
//                "  `s_status` INTEGER(20) DEFAULT NULL,\n" +
//                "  `s_long` TEXT(20) DEFAULT NULL,\n" +
//                "  `s_lat` TEXT(20) DEFAULT NULL\n" +
//                ") ;"
        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<MA_GI_Equipment> list = null;
        try {
            list = new ArrayList<MA_GI_Equipment>();


            res = db.rawQuery("select * from ma_GI_Equipment where MA_GI_id = " + ma_tcp_id, null);
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                MA_GI_Equipment mA_GI_Equipment = new MA_GI_Equipment();
                mA_GI_Equipment.setId(res.getInt(res.getColumnIndex("id")));
                mA_GI_Equipment.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
                mA_GI_Equipment.setServer_TCP_code(res.getString(res.getColumnIndex("Server_TCP_code")));
                mA_GI_Equipment.setCostCentreID(res.getString(res.getColumnIndex("CostCentreID")));
                mA_GI_Equipment.setMA_GI_id(res.getInt(res.getColumnIndex("MA_GI_id")));
                mA_GI_Equipment.setMainCode(res.getString(res.getColumnIndex("MainCode")));
                mA_GI_Equipment.setMainDesc(res.getString(res.getColumnIndex("MainDesc")));
                mA_GI_Equipment.setFixAssetCode(res.getString(res.getColumnIndex("FixAssetCode")));

                mA_GI_Equipment.setFixAssetDesc(res.getString(res.getColumnIndex("FixAssetDesc")));
                mA_GI_Equipment.setOwnership(res.getString(res.getColumnIndex("Ownership")));
                mA_GI_Equipment.setItemChecked(res.getString(res.getColumnIndex("ItemChecked")));
                mA_GI_Equipment.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                mA_GI_Equipment.setAtt_id(res.getString(res.getColumnIndex("Att_id")));
                mA_GI_Equipment.setAtt_file(res.getString(res.getColumnIndex("Att_file")));
                mA_GI_Equipment.setAtt_path(res.getString(res.getColumnIndex("Att_path")));
                mA_GI_Equipment.setAtt_server_path(res.getString(res.getColumnIndex("Att_server_id")));
                mA_GI_Equipment.setAtt_server_id(res.getString(res.getColumnIndex("Att_server_id")));
                mA_GI_Equipment.setAtt_server_path(res.getString(res.getColumnIndex("Att_server_path")));
                mA_GI_Equipment.setSerialNo(res.getString(res.getColumnIndex("SerialNo")));
                mA_GI_Equipment.setStatus(res.getString(res.getColumnIndex("Status")));
                mA_GI_Equipment.setS_date(res.getString(res.getColumnIndex("s_date")));
                mA_GI_Equipment.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                mA_GI_Equipment.setS_status(res.getInt(res.getColumnIndex("s_status")));
                mA_GI_Equipment.setS_long(res.getString(res.getColumnIndex("s_long")));
                mA_GI_Equipment.setS_lat(res.getString(res.getColumnIndex("s_lat")));

                list.add(mA_GI_Equipment);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return list;
    }

    public List<MA_GI_Main> getMA_GI_Main(int ma_tcp_id) {

/*         "CREATE TABLE `ma_GI_Main` (\n" +
        "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
                "  `MA_TCP_ID` INTEGER(10) DEFAULT NULL,\n" +
                "  `Server_TCP_code` TEXT(20) DEFAULT NULL,\n" +
                "  `MA_TCP_RetailSite_id` INTEGER(20) DEFAULT NULL,\n" +
                "  `CostCentreID` TEXT(20) DEFAULT NULL,\n" +
                "  `Comments` TEXT(1000) DEFAULT NULL,\n" +
                "  `userAck` TEXT(1000) DEFAULT NULL,\n" +
                "  `UA_img_id` TEXT(50) DEFAULT NULL,\n" +
                "  `UA_img_file` TEXT(100) DEFAULT NULL,\n" +
                "  `UA_img_path` TEXT(200) DEFAULT NULL,\n" +
                "  `UA_server_id` TEXT(50) DEFAULT NULL,\n" +
                "  `UA_server_path` TEXT(200) DEFAULT NULL,\n" +
                //  "    \n" +
                "  `Status` TEXT(20) DEFAULT NULL,\n" +
                "  `s_date` DATETIME DEFAULT CURRENT_TIMESTAMP,\n" +
                "  `s_is_sync` INTEGER(20) DEFAULT NULL,\n" +
                "  `s_status` INTEGER(20) DEFAULT NULL,\n" +
                "  `s_long` TEXT(20) DEFAULT NULL,\n" +
                "  `s_lat` TEXT(20) DEFAULT NULL\n" +
                ") ;"
                */
        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<MA_GI_Main> list = null;
        try {
            list = new ArrayList<MA_GI_Main>();


            res = db.rawQuery("select * from ma_GI_Main where MA_TCP_RetailSite_id = " + ma_tcp_id, null);
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                MA_GI_Main mA_GI_Main = new MA_GI_Main();

                mA_GI_Main.setUserAck(res.getString(res.getColumnIndex("userAck")));
                mA_GI_Main.setComments(res.getString(res.getColumnIndex("Comments")));
                mA_GI_Main.setId(res.getInt(res.getColumnIndex("id")));
                mA_GI_Main.setUA_img_path(res.getString(res.getColumnIndex("UA_img_path")));//Sarfraz
                mA_GI_Main.setUA_server_path(res.getString(res.getColumnIndex("UA_server_path")));//

                mA_GI_Main.setS_long(res.getString(res.getColumnIndex("s_long")));
                mA_GI_Main.setS_lat(res.getString(res.getColumnIndex("s_lat")));

                list.add(mA_GI_Main);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return list;
    }


    public BigDecimal getProductToatlMetterReading(String product_Code, MA_TCP_RetailSites ma_tcp_retailSites) {
        Cursor res = null;
        BigDecimal total = BigDecimal.valueOf(0);
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            res = db.rawQuery("select * from ma_meterreadings where MA_TCP_ID = " + ma_tcp_retailSites.getMA_TCP_ID() + " and Product_code = " + product_Code, null);//TODO fix it
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                //Long sales = Long.parseLong(res.getString(res.getColumnIndex("Sale")));
                BigDecimal sales = new BigDecimal(res.getString(res.getColumnIndex("Sale")));

                total = total.add(sales);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return total;
    }

    public void updateGeneralInspectionEquipment(MA_GI_Equipment mA_GI_Equipment) {

//        "CREATE TABLE `ma_GI_Equipment` (\n" +
//                "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//                "  `MA_TCP_ID` INTEGER(10) DEFAULT NULL,\n" +
//                "  `Server_TCP_code` TEXT(20) DEFAULT NULL,\n" +
//                "  `MA_TCP_RetailSite_id` INTEGER(20) DEFAULT NULL,\n" +
//                "  `CostCentreID` TEXT(20) DEFAULT NULL,\n" +
//                "  `MA_GI_id` INTEGER(20) DEFAULT NULL,\n" +
//                //     "\n" +
//                "  `MainCode` TEXT(50) DEFAULT NULL,\n" +
//                "  `MainDesc` TEXT(100) DEFAULT NULL,\n" +
//                "  `FixAssetCode` TEXT(50) DEFAULT NULL,\n" +
//                "  `FixAssetDesc` TEXT(100) DEFAULT NULL,\n" +
//                "  `Ownership` TEXT(100) DEFAULT NULL,\n" +
//                "  `ItemChecked` TEXT(100) DEFAULT NULL,\n" +
//                "  `Remarks` TEXT(1000) DEFAULT NULL,\n" +
//                //     "\n" +
//                "  `Att_id` TEXT(50) DEFAULT NULL,\n" +
//                "  `Att_file` TEXT(100) DEFAULT NULL,\n" +
//                "  `Att_path` TEXT(200) DEFAULT NULL,\n" +
//                "  `Att_server_id` TEXT(50) DEFAULT NULL,\n" +
//                "  `Att_server_path` TEXT(200) DEFAULT NULL,\n" +
//                //      "    \n" +
//                "  `SerialNo` TEXT(100) DEFAULT NULL,\n" +
//                "  `Status` TEXT(20) DEFAULT NULL,\n" +
//                "  `s_date` DATETIME DEFAULT CURRENT_TIMESTAMP,\n" +
//                "  `s_is_sync` INTEGER(20) DEFAULT NULL,\n" +
//                "  `s_status` INTEGER(20) DEFAULT NULL,\n" +
//                "  `s_long` TEXT(20) DEFAULT NULL,\n" +
//                "  `s_lat` TEXT(20) DEFAULT NULL\n" +
//                ") ;"
        SQLiteDatabase db = this.getReadableDatabase();

        try {
            ContentValues contentValues = new ContentValues();

            contentValues.put("ItemChecked", mA_GI_Equipment.getItemChecked());
            contentValues.put("Remarks", mA_GI_Equipment.getRemarks());
            contentValues.put("Att_path", mA_GI_Equipment.getAtt_path());
            contentValues.put("Att_server_path", mA_GI_Equipment.getAtt_server_path());

            if (mA_GI_Equipment.getRemarks() != null && mA_GI_Equipment.getAtt_path() != null) {
                contentValues.put("Status", TCP_STATUS_RETAIL_SITE.SAVED);
            }
            int NumOfRowsUpdated = db.update("ma_GI_Equipment", contentValues, "id =" + mA_GI_Equipment.getId(), null);
            if (NumOfRowsUpdated > 0) {
                updateMARetailSiteStatus(mA_GI_Equipment.getMA_TCP_RetailSite_id(), "Status_IE_5", 50);
            }
            Log.d("DB", "updating");
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            db.close();
        }
    }

    public int getMMToLitters(String tankCode, String mm) {

//        "CREATE TABLE IF NOT EXISTS  `ma_TankCalibrations` (\n" +
//                "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n" +
//                "  `SeqNo` Text(20) DEFAULT NULL,\n" +
//                "  `Ltr` Text(20) DEFAULT NULL,\n" +
//                "  `DipMM` Text(20) DEFAULT NULL,\n" +
//                "  `TankCode` Text(20) DEFAULT NULL\n" +
//                ") ;"
        Cursor res = null;
        int litters = 0;
        SQLiteDatabase db = this.getReadableDatabase();
        try {


            // String query="select * from ma_TankCalibrations";
            String query = "select * from ma_TankCalibrations where TankCode = '" + tankCode + "' and DipMM = " + mm;
            res = db.rawQuery(query, null);//TODO fix it
            res.moveToFirst();
            while (res.isAfterLast() == false) {

                litters = Integer.parseInt(res.getString(res.getColumnIndex("Ltr")));

                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return litters;
    }

    public String getRetailSiteName(int rtsid) {
        Cursor res = null;
        String name = null;
        SQLiteDatabase db = this.getReadableDatabase();
        try {


            // String query="select * from ma_TankCalibrations";
            String query = "select * from ma_tcp_retailsites where id = " + rtsid;
            res = db.rawQuery(query, null);//TODO fix it
            res.moveToFirst();
            while (res.isAfterLast() == false) {

                name = res.getString(res.getColumnIndex("CostCentreDesc"));

                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return name;
    }

    public void updateGIMainComment(int rtsid, String s) {
        SQLiteDatabase db = this.getReadableDatabase();

        try {
            ContentValues contentValues = new ContentValues();

            contentValues.put("Comments", s);

            contentValues.put("s_long", CommonUtilities.longitude);
            contentValues.put("s_lat", CommonUtilities.latitude);

            int NumOfRowsUpdated = db.update("ma_GI_Main", contentValues, "MA_TCP_RetailSite_id =" + rtsid, null);
            Log.d("DB", "updating");
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
    }

    public String getGIMainComment(int rtsid) {
        Cursor res = null;
        String comment = null;
        SQLiteDatabase db = this.getReadableDatabase();
        try {


            // String query="select * from ma_TankCalibrations";
            String query = "select * from ma_GI_Main where MA_TCP_RetailSite_id = " + rtsid;
            res = db.rawQuery(query, null);//TODO fix it
            res.moveToFirst();
            while (res.isAfterLast() == false) {

                comment = res.getString(res.getColumnIndex("Comments"));

                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return comment;
    }

    public List<MA_GI_Equipment> getMA_GI_EquipmentListForUploadImages() {

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<MA_GI_Equipment> list = null;
        try {
            list = new ArrayList<MA_GI_Equipment>();


            res = db.rawQuery("select * from ma_GI_Equipment where (Att_server_path IS NULL or Att_server_path = '' ) and ( Att_path not null or Att_path <> '') ", null);
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                MA_GI_Equipment mA_GI_Equipment = new MA_GI_Equipment();
                mA_GI_Equipment.setId(res.getInt(res.getColumnIndex("id")));
                mA_GI_Equipment.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
                mA_GI_Equipment.setServer_TCP_code(res.getString(res.getColumnIndex("Server_TCP_code")));
                mA_GI_Equipment.setCostCentreID(res.getString(res.getColumnIndex("CostCentreID")));
                mA_GI_Equipment.setMA_GI_id(res.getInt(res.getColumnIndex("MA_GI_id")));
                mA_GI_Equipment.setMainCode(res.getString(res.getColumnIndex("MainCode")));
                mA_GI_Equipment.setMainDesc(res.getString(res.getColumnIndex("MainDesc")));
                mA_GI_Equipment.setFixAssetCode(res.getString(res.getColumnIndex("FixAssetCode")));

                mA_GI_Equipment.setFixAssetDesc(res.getString(res.getColumnIndex("FixAssetDesc")));
                mA_GI_Equipment.setOwnership(res.getString(res.getColumnIndex("Ownership")));
                mA_GI_Equipment.setItemChecked(res.getString(res.getColumnIndex("ItemChecked")));
                mA_GI_Equipment.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                mA_GI_Equipment.setAtt_id(res.getString(res.getColumnIndex("Att_id")));
                mA_GI_Equipment.setAtt_file(res.getString(res.getColumnIndex("Att_file")));
                mA_GI_Equipment.setAtt_path(res.getString(res.getColumnIndex("Att_path")));
                mA_GI_Equipment.setAtt_server_path(res.getString(res.getColumnIndex("Att_server_id")));
                mA_GI_Equipment.setAtt_server_id(res.getString(res.getColumnIndex("Att_server_id")));
                mA_GI_Equipment.setAtt_server_path(res.getString(res.getColumnIndex("Att_server_path")));
                mA_GI_Equipment.setStatus(res.getString(res.getColumnIndex("Status")));
                mA_GI_Equipment.setS_date(res.getString(res.getColumnIndex("s_date")));
                mA_GI_Equipment.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                mA_GI_Equipment.setS_status(res.getInt(res.getColumnIndex("s_status")));
                mA_GI_Equipment.setS_long(res.getString(res.getColumnIndex("s_long")));
                mA_GI_Equipment.setS_lat(res.getString(res.getColumnIndex("s_lat")));
                mA_GI_Equipment.setMA_TCP_RetailSite_id(res.getInt(res.getColumnIndex("MA_TCP_RetailSite_id")));

                list.add(mA_GI_Equipment);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return list;
    }

    public List<MA_GI_Standard> getMA_GI_StandardListForUploadImages() {


        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<MA_GI_Standard> list = null;
        try {
            list = new ArrayList<MA_GI_Standard>();


            res = db.rawQuery("select * from ma_GI_Standard where ( Att_server_path IS NULL  or Att_server_path = '' ) and ( Att_path not null  or Att_path <> '' ) ", null);
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                MA_GI_Standard ma_gi_standard = new MA_GI_Standard();
                ma_gi_standard.setId(res.getInt(res.getColumnIndex("id")));
                ma_gi_standard.setCondition(res.getString(res.getColumnIndex("Condition")));
                ma_gi_standard.setActionPlan(res.getString(res.getColumnIndex("ActionPlan")));
                ma_gi_standard.setActionPlanCode(res.getString(res.getColumnIndex("ConditionCode")));
                ma_gi_standard.setPoints(res.getString(res.getColumnIndex("Points")));
                ma_gi_standard.setRemarks(res.getString(res.getColumnIndex("Remarks")));
                ma_gi_standard.setParticularCode(res.getString(res.getColumnIndex("ParticularCode")));
                ma_gi_standard.setStatus(res.getString(res.getColumnIndex("Status")));
                ma_gi_standard.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
                ma_gi_standard.setPartName(res.getString(res.getColumnIndex("PartName")));
                ma_gi_standard.setMA_TCP_RetailSite_id(res.getInt(res.getColumnIndex("MA_TCP_RetailSite_id")));
                ma_gi_standard.setAtt_path(res.getString(res.getColumnIndex("Att_path")));
                list.add(ma_gi_standard);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return list;
    }


    public List<MA_GI_Main> getSignatureListForUploadImages() {
//        "CREATE TABLE `ma_GI_Main` (\n" +
//                "  `id` Integer NOT NULL PRIMARY KEY AUTOINCREMENT ,\n" +
//                "  `MA_TCP_ID` INTEGER(10) DEFAULT NULL,\n" +
//                "  `Server_TCP_code` TEXT(20) DEFAULT NULL,\n" +
//                "  `MA_TCP_RetailSite_id` INTEGER(20) DEFAULT NULL,\n" +
//                "  `CostCentreID` TEXT(20) DEFAULT NULL,\n" +
//                "  `Comments` TEXT(1000) DEFAULT NULL,\n" +
//                "  `userAck` TEXT(1000) DEFAULT NULL,\n" +
//                "  `UA_img_id` TEXT(50) DEFAULT NULL,\n" +
//                "  `UA_img_file` TEXT(100) DEFAULT NULL,\n" +
//                "  `UA_img_path` TEXT(200) DEFAULT NULL,\n" +
//                "  `UA_server_id` TEXT(50) DEFAULT NULL,\n" +
//                "  `UA_server_path` TEXT(200) DEFAULT NULL,\n" +
//                //  "    \n" +
//                "  `Status` TEXT(20) DEFAULT NULL,\n" +
//                "  `s_date` DATETIME DEFAULT CURRENT_TIMESTAMP,\n" +
//                "  `s_is_sync` INTEGER(20) DEFAULT NULL,\n" +
//                "  `s_status` INTEGER(20) DEFAULT NULL,\n" +
//                "  `s_long` TEXT(20) DEFAULT NULL,\n" +
//                "  `s_lat` TEXT(20) DEFAULT NULL\n" +
//                ") ;"

        Cursor res = null;
        SQLiteDatabase db = this.getReadableDatabase();
        List<MA_GI_Main> list = null;
        try {
            list = new ArrayList<MA_GI_Main>();


            res = db.rawQuery("select * from ma_GI_Main where ( UA_server_path IS NULL  or UA_server_path = '' ) and ( UA_img_path not null  or UA_img_path <> '' ) ", null);
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                MA_GI_Main ma_gi_main = new MA_GI_Main();
                ma_gi_main.setId(res.getInt(res.getColumnIndex("id")));
                ma_gi_main.setMA_TCP_ID(res.getInt(res.getColumnIndex("MA_TCP_ID")));
                ma_gi_main.setCostCentreID(res.getString(res.getColumnIndex("CostCentreID")));


                ma_gi_main.setServer_TCP_code(res.getString(res.getColumnIndex("Server_TCP_code")));
                ma_gi_main.setMA_TCP_RetailSite_id(res.getInt(res.getColumnIndex("MA_TCP_RetailSite_id")));
                ma_gi_main.setComments(res.getString(res.getColumnIndex("Comments")));
                ma_gi_main.setUserAck(res.getString(res.getColumnIndex("userAck")));
                ma_gi_main.setUA_img_id(res.getString(res.getColumnIndex("UA_img_id")));

                ma_gi_main.setUA_img_file(res.getString(res.getColumnIndex("UA_img_file")));
                ma_gi_main.setUA_img_path(res.getString(res.getColumnIndex("UA_img_path")));
                ma_gi_main.setUA_server_id(res.getString(res.getColumnIndex("UA_server_id")));

                ma_gi_main.setUA_server_path(res.getString(res.getColumnIndex("UA_server_path")));
                ma_gi_main.setStatus(res.getString(res.getColumnIndex("Status")));
                ma_gi_main.setS_date(res.getString(res.getColumnIndex("s_date")));
                ma_gi_main.setS_is_sync(res.getInt(res.getColumnIndex("s_is_sync")));
                ma_gi_main.setS_status(res.getInt(res.getColumnIndex("s_status")));
                ma_gi_main.setS_long(res.getString(res.getColumnIndex("s_long")));
                ma_gi_main.setS_lat(res.getString(res.getColumnIndex("s_lat")));
                list.add(ma_gi_main);
                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return list;
    }

    public PointHelper getTotalPointsForRetailSite(int rtsid, int to) {
        Cursor res = null;
        double total = 0;
        double outOff = 0;
        PointHelper pointHelper = new PointHelper();
        pointHelper.setTotal(0);
        pointHelper.setOutOff(0);

        SQLiteDatabase db = this.getReadableDatabase();
        try {
            res = db.rawQuery("select Points from ma_GI_Standard where MA_TCP_RetailSite_id = " + rtsid, null);//TODO fix it
            res.moveToFirst();
            while (!res.isAfterLast()) {
                String strPoints = (res.getString(res.getColumnIndex("Points")));
                if (!strPoints.equalsIgnoreCase("-") && !strPoints.equalsIgnoreCase("0") && !strPoints.equalsIgnoreCase("")) {
                    double tempDouble = 0;
                    try {
                        tempDouble = Double.parseDouble(strPoints);
                        total = total + tempDouble;
                        pointHelper.setTotal(total);
                        outOff = outOff + to;
                        pointHelper.setOutOff(outOff);
                    } catch (NumberFormatException e) {
                        e.printStackTrace();
                    }


                } else {
                    outOff = outOff + to;
                    pointHelper.setOutOff(outOff);
                }

                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return pointHelper;
    }

    public boolean checkPointStatus(int rtsid) {
        Cursor res = null;
        boolean status = false;
        PointHelper pointHelper = new PointHelper();
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            res = db.rawQuery("select * from ma_GI_Standard where MA_TCP_RetailSite_id = " + rtsid, null);//TODO fix it
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                String strPoints = (res.getString(res.getColumnIndex("Points")));
                String strCondition = (res.getString(res.getColumnIndex("Condition")));
                String strActionPlan = (res.getString(res.getColumnIndex("ActionPlan")));

                if (strPoints == null || strPoints.equalsIgnoreCase("")) {
                    status = false;
                    return status;
                } else if (strPoints != null && !strPoints.equalsIgnoreCase("N/A") && (strCondition == null || strCondition.equalsIgnoreCase(""))) {
                    status = false;
                    return status;
                } else if (strPoints != null && !strPoints.equalsIgnoreCase("N/A") && (strActionPlan == null || strActionPlan.equalsIgnoreCase(""))) {
                    status = false;
                    return status;
                } else {
                    status = true;
                }

                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return status;
    }
    /*public boolean checkPointStatus(int rtsid) {
        Cursor res = null;
        boolean status=false;
        PointHelper pointHelper=new PointHelper();
        SQLiteDatabase db = this.getReadableDatabase();
        try {
            res = db.rawQuery("select Points from ma_GI_Standard where MA_TCP_RetailSite_id = " + rtsid, null);//TODO fix it
            res.moveToFirst();
            while (res.isAfterLast() == false) {
                String strPoints = (res.getString(res.getColumnIndex("Points")));
                if (strPoints==null || strPoints.equalsIgnoreCase("")) {
                    status= false;
                }else {
                    status=true;
                }

                res.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return status;
    }*/

    public int insertFromFile(Context context, int resourceId) throws IOException {
        // Reseting Counter
        int result = 0;
        // Open the resource
        SQLiteDatabase db = this.getReadableDatabase();

        InputStream insertsStream = context.getResources().openRawResource(resourceId);
        BufferedReader insertReader = new BufferedReader(new InputStreamReader(insertsStream));

        // Iterate through lines (assuming each insert has its own line and theres no other stuff)

        while (insertReader.ready()) {
            try {
                String insertStmt = insertReader.readLine();
                db.execSQL(insertStmt);
                result++;
            } catch (Exception e) {
                e.printStackTrace();
            }

        }

        insertReader.close();
        if (db != null)
            db.close();
        // returning number of inserted rows
        return result;
    }


    //TODO:=======================================Locator apl==============================================
    public Long insertFillStation(ListFillStations fillstations) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("CusCode", fillstations.getCusCode());
            contentValues.put("HobPrice", fillstations.getHobPrice());
            contentValues.put("HSDPrice", fillstations.getHSDPrice());
            contentValues.put("District", fillstations.getDistrict());
            contentValues.put("CusDesc", fillstations.getCusDesc());
            contentValues.put("SupremPrice", fillstations.getSupremPrice());
            contentValues.put("Lati", fillstations.getLati());
            contentValues.put("CNGPrice", fillstations.getCNGPrice());
            contentValues.put("longi", fillstations.getLongi());
            contentValues.put("CusAddress", fillstations.getCusAddress());
            contentValues.put("region", fillstations.getRegion());
            contentValues.put("subregion", fillstations.getSubregion());

            idInsert = db.insert("FillingStations", null, contentValues);
            Log.d("", "");
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return idInsert;
    }

    //TODO:=======================================Locator apl fueltype==============================================
    public Long insertFuelType(RFuelType fueltype, String cuscode) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("cuscode", cuscode);
            if (fueltype.getHOBC97().equalsIgnoreCase("1")) {
                contentValues.put("HOBC97", "HOBC97");
            } else {
                contentValues.put("HOBC97", "");
            }
            if (fueltype.getCNG().equalsIgnoreCase("1")) {
                contentValues.put("CNG", "CNG");
            } else {
                contentValues.put("CNG", "");
            }
            if (fueltype.getSuperem().equalsIgnoreCase("1")) {
                contentValues.put("Superem", "SUPEREME");
            } else {
                contentValues.put("Superem", "");
            }
            if (fueltype.getDiesel().equalsIgnoreCase("1")) {
                contentValues.put("Diesel", "DIESEL");
            } else {
                contentValues.put("Diesel", "");
            }

            idInsert = db.insert("FuelTypes", null, contentValues);
            Log.d("", "");
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return idInsert;
    }

    //TODO:=======================================Locator apl services==============================================
    public Long insertServices(RServices services, String cuscode) {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;
        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("cuscode", cuscode);
            contentValues.put("ServiceCode", services.getServiceCode());
            contentValues.put("ServiceDes", services.getServiceDes());

            idInsert = db.insert("Services", null, contentValues);
            Log.d("", "");
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }
        return idInsert;
    }


    public List<Fillingstations> getAllFillingStations() {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = null;
        Fillingstations rec = null;
        List<Fillingstations> allFillingStations = new ArrayList<Fillingstations>();

        String sqlquery = "SELECT * FROM FillingStations f,FuelTypes ft WHERE f.CusCode = ft.cuscode";
        cursor = db.rawQuery(sqlquery, null);
        cursor.moveToFirst();
        while (!cursor.isAfterLast()) {
            rec = new Fillingstations(cursor);

            rec.getCusCode();
            rec.getCNGPrice();
            rec.getCusAddress();
            rec.getCusDesc();
            rec.getDistrict();
            rec.getHobPrice();
            rec.getHSDPrice();
            rec.getLati();
            rec.getLongi();
            rec.getSupremPrice();
            rec.getSuperem();
            rec.getDiesel();
            rec.getHOBC97();
            rec.getCNG();
            rec.getRegion();
            rec.getSubregion();


            allFillingStations.add(rec);
            cursor.moveToNext();
        }
        cursor.close();
        return allFillingStations;
    }

    public Fillingstations getFillingStationsById(String cuscode) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = null;
        Fillingstations rec = null;
        Fillingstations FillingStations = new Fillingstations();

        String sqlquery = "SELECT * FROM FillingStations where CusCode=" + cuscode;
        cursor = db.rawQuery(sqlquery, null);
        cursor.moveToFirst();
        while (!cursor.isAfterLast()) {
            rec = new Fillingstations(cursor);

            rec.getCusCode();
            rec.getCNGPrice();
            rec.getCusAddress();
            rec.getCusDesc();
            rec.getDistrict();
            rec.getHobPrice();
            rec.getHSDPrice();
            rec.getLati();
            rec.getLongi();
            rec.getSupremPrice();
            rec.getRegion();
            rec.getSubregion();


            cursor.moveToNext();
        }
        cursor.close();
        return rec;
    }


//         db.execSQL("CREATE TABLE \"FillingStations\" (\n" +
//                 "\t\"id\"\tINTEGER PRIMARY KEY AUTOINCREMENT,\n" +
//                 "\"CusCode\"\tTEXT,"+
//                 "\t\"HobPrice\"\tTEXT,\n" +
//                 "\t\"HSDPrice\"\tTEXT,\n" +
//                 "\t\"District\"\tTEXT,\n" +
//                 "\t\"CusDesc\"\tTEXT,\n" +
//                 "\t\"SupremPrice\"\tTEXT,\n" +
//                 "\t\"Lati\"\tTEXT,\n" +
//                 "\t\"CNGPrice\"\tTEXT,\n" +
//                 "\t\"longi\"\tTEXT,\n" +
//                 "\t\"CusAddress\"\tTEXT\n" +
//                 ");");
//
//         db.execSQL("CREATE TABLE \"FuelTypes\" (\n" +
//                 "\t\"id\"\tINTEGER PRIMARY KEY AUTOINCREMENT,\n" +
//                 "\t\"cuscode\"\tTEXT,\n" +
//                 "\t\"HOBC97\"\tTEXT,\n" +
//                 "\t\"CNG\"\tTEXT,\n" +
//                 "\t\"Superem\"\tTEXT,\n" +
//                 "\t\"Diesel\"\tTEXT\n" +
//                 ");");
//
//         db.execSQL("CREATE TABLE \"Services\" (\n" +
//                 "\t\"id\"\tINTEGER PRIMARY KEY AUTOINCREMENT,\n" +
//                 "\t\"cuscode\"\tTEXT,\n" +
//                 "\t\"ServiceCode\"\tTEXT,\n" +
//                 "\t\"ServiceDes\"\tTEXT\n" +
//                 ");");

    public List<Fillingstations> searchWithKeyword(String toSearch) {
        SQLiteDatabase db = this.getReadableDatabase();

        Cursor cursor = null;
        Fillingstations rec = null;
        List<Fillingstations> allFillingStations = new ArrayList<Fillingstations>();
        String TableName;
        String sqlquery = "";
        //query for region
        if (toSearch.contains("r:") && String.valueOf(toSearch.charAt(0)).equalsIgnoreCase("r")) {
            String region = toSearch.substring(2);
            sqlquery += "SELECT f.*,ft.* FROM FillingStations f left join FuelTypes ft on f.CusCode = ft.cuscode where ";
            sqlquery += "f.region LIKE '%" + region + "%'";
            //query for subregion
        } else if (toSearch.contains("sr:") && String.valueOf(toSearch.charAt(0)).equalsIgnoreCase("s")) {
            String subregionstring = toSearch.substring(3);
            sqlquery += "SELECT f.*,ft.* FROM FillingStations f left join FuelTypes ft on f.CusCode = ft.cuscode where ";
            sqlquery += "f.subregion LIKE '%" + subregionstring + "%'";

        } else {
            //query for generic search
            sqlquery += "SELECT f.*,ft.* FROM FillingStations f left join FuelTypes ft on f.CusCode = ft.cuscode where ";
            sqlquery += "f.HobPrice LIKE '%" + toSearch + "%' or " +
                    "f.HSDPrice LIKE '%" + toSearch + "%' or " +
                    "f.District LIKE '%" + toSearch + "%' or " +
                    "f.CusDesc LIKE '%" + toSearch + "%' or " +
                    "f.SupremPrice LIKE '%" + toSearch + "%' or " +
                    "f.Lati LIKE '%" + toSearch + "%' or " +
                    "f.CNGPrice LIKE '%" + toSearch + "%' or " +
                    "f.longi LIKE '%" + toSearch + "%' or " +
                    "f.CusAddress LIKE '%" + toSearch + "%' or " +
                    "f.region LIKE '%" + toSearch + "%' or " +
                    "f.subregion LIKE '%" + toSearch + "%' or " +
                    "ft.HOBC97 LIKE '%" + toSearch + "%' or " +
                    "ft.CNG LIKE '%" + toSearch + "%' or " +
                    "ft.Superem LIKE '%" + toSearch + "%' or " +
                    "ft.Diesel LIKE '%" + toSearch + "%'";
        }

        cursor = db.rawQuery(sqlquery, null);
        cursor.moveToFirst();
        while (!cursor.isAfterLast()) {
            rec = new Fillingstations(cursor);

            rec.getCusCode();
            rec.getCNGPrice();
            rec.getCusAddress();
            rec.getCusDesc();
            rec.getDistrict();
            rec.getHobPrice();
            rec.getHSDPrice();
            rec.getLati();
            rec.getLongi();
            rec.getSupremPrice();
            rec.getHOBC97();
            rec.getCNG();
            rec.getDiesel();
            rec.getSuperem();
            rec.getRegion();
            rec.getSubregion();

            allFillingStations.add(rec);
            cursor.moveToNext();
        }
        cursor.close();

        if (allFillingStations.size() == 0) {

            String query = "SELECT f.* FROM FillingStations f left join Services s on f.CusCode = s.cuscode where ";
            query += "s.ServiceDes LIKE '" + toSearch + "' group by f.CusCode ";


            cursor = db.rawQuery(query, null);
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {
                rec = new Fillingstations(cursor);

                rec.getCusCode();
                rec.getCNGPrice();
                rec.getCusAddress();
                rec.getCusDesc();
                rec.getDistrict();
                rec.getHobPrice();
                rec.getHSDPrice();
                rec.getLati();
                rec.getLongi();
                rec.getSupremPrice();
                rec.getHOBC97();
                rec.getCNG();
                rec.getDiesel();
                rec.getSuperem();
                rec.getRegion();
                rec.getSubregion();

                allFillingStations.add(rec);
                cursor.moveToNext();
            }
            cursor.close();


        }

        return allFillingStations;
    }


    public List<Fillingstations> searchDynamic(List<String> data) {
        SQLiteDatabase db = this.getReadableDatabase();

        Cursor cursor = null;
        Fillingstations rec = null;
        List<Fillingstations> allFillingStations = new ArrayList<Fillingstations>();
        String TableName;


        String sqlquery = "";
        sqlquery += "SELECT * FROM SearchedFillingStations where 1 = 1 ";
        if (!data.get(2).equalsIgnoreCase("0")) {
            sqlquery += "and HOBC97 LIKE '%" + data.get(2) + "%'";
        }
        if (!data.get(3).equalsIgnoreCase("0")) {
            sqlquery += "and CNG LIKE '%" + data.get(3) + "%'";
        }
        if (!data.get(1).equalsIgnoreCase("0")) {
            sqlquery += "and Diesel LIKE '%" + data.get(1) + "%'";
        }
        if (!data.get(0).equalsIgnoreCase("0")) {
            sqlquery += "and Superem LIKE '%" + data.get(0) + "%'";
        }
        if (!data.get(4).equalsIgnoreCase("0")) {
            sqlquery += "and Services LIKE '%" + data.get(4) + "%'";
        }
        if (!data.get(5).equalsIgnoreCase("0")) {
            sqlquery += "and Services LIKE '%" + data.get(5) + "%'";
        }
        if (!data.get(6).equalsIgnoreCase("0")) {
            sqlquery += "and Services LIKE '%" + data.get(6) + "%'";
        }
        if (!data.get(7).equalsIgnoreCase("0")) {
            sqlquery += "and Services LIKE '%" + data.get(7) + "%'";
        }
        if (!data.get(8).equalsIgnoreCase("0")) {
            sqlquery += "and Services LIKE '%" + data.get(8) + "%'";
        }
        if (!data.get(9).equalsIgnoreCase("0")) {
            sqlquery += "and Services LIKE '%" + data.get(9) + "%'";
        }
        if (!data.get(10).equalsIgnoreCase("0")) {
            sqlquery += "and Services LIKE '%" + data.get(10) + "%'";
        }
        if (!data.get(11).equalsIgnoreCase("0")) {
            sqlquery += "and Services LIKE '%" + data.get(11) + "%'";
        }
        if (!data.get(12).equalsIgnoreCase("0")) {
            sqlquery += " ORDER BY SupremPrice";
        }
        if (!data.get(13).equalsIgnoreCase("0")) {
            sqlquery += " ORDER BY HSDPrice";
        }
        if (!data.get(14).equalsIgnoreCase("0")) {
            sqlquery += " ORDER BY HobPrice";
        }
        if (!data.get(15).equalsIgnoreCase("0")) {
            sqlquery += " ORDER BY CNGPrice";
        }

        cursor = db.rawQuery(sqlquery, null);
        cursor.moveToFirst();
        while (!cursor.isAfterLast()) {
            rec = new Fillingstations(cursor);

            rec.getCusCode();
            rec.getCNGPrice();
            rec.getCusAddress();
            rec.getCusDesc();
            rec.getDistrict();
            rec.getHobPrice();
            rec.getHSDPrice();
            rec.getLati();
            rec.getLongi();
            rec.getSupremPrice();
            rec.getHOBC97();
            rec.getCNG();
            rec.getDiesel();
            rec.getSuperem();

            allFillingStations.add(rec);
            cursor.moveToNext();
        }
        cursor.close();

      /*  if(allFillingStations.size() == 0){

            String query = "SELECT f.* FROM SearchedFillingStations f left join Services s on f.CusCode = s.cuscode where ";
            query +="s.ServiceDes LIKE '"+  data.get(4) +"' or "+
                    "s.ServiceDes LIKE '"+  data.get(5) +"' or "+
                    "s.ServiceDes LIKE '"+  data.get(6) +"' or "+
                    "s.ServiceDes LIKE '"+  data.get(7) +"' or "+
                    "s.ServiceDes LIKE '"+  data.get(8) +"' or "+
                    "s.ServiceDes LIKE '"+  data.get(9) +"' or "+
                    "s.ServiceDes LIKE '"+  data.get(10) +"' or "+
                    "s.ServiceDes LIKE '"+  data.get(11) +"' group by f.CusCode ";


            cursor = db.rawQuery(query, null);
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {
                rec = new Fillingstations(cursor);

                rec.getCusCode();
                rec.getCNGPrice();
                rec.getCusAddress();
                rec.getCusDesc();
                rec.getDistrict();
                rec.getHobPrice();
                rec.getHSDPrice();
                rec.getLati();
                rec.getLongi();
                rec.getSupremPrice();
                rec.getHOBC97();
                rec.getCNG();
                rec.getDiesel();
                rec.getSuperem();

                allFillingStations.add(rec);
                cursor.moveToNext();
            }
            cursor.close();


        }*/

        return allFillingStations;
    }

    public List<String> getServices(String id) {
        SQLiteDatabase db = this.getReadableDatabase();

        Cursor cursor = null;
        Services rec = null;
        List<String> services = new ArrayList<String>();
        String TableName;


        String sqlquery = "";
        sqlquery += "SELECT * FROM Services where ";
        sqlquery += "cuscode ='" + id + "'";

        cursor = db.rawQuery(sqlquery, null);
        cursor.moveToFirst();
        while (!cursor.isAfterLast()) {
            rec = new Services(cursor);

            rec.getId();
            rec.getCuscode();
            rec.getServiceCode();
            rec.getServiceDes();

            services.add(rec.getServiceDes());
            cursor.moveToNext();
        }
        cursor.close();


        return services;
    }


    public Long insertSearchedFillingStations(Fillingstations fillingstationsList) {


        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;

        try {

            ContentValues contentValues = new ContentValues();
            contentValues.put("id", fillingstationsList.getId());
            contentValues.put("CusCode", fillingstationsList.getCusCode());
            contentValues.put("HobPrice", fillingstationsList.getHobPrice());
            contentValues.put("HSDPrice", fillingstationsList.getHSDPrice());
            contentValues.put("District", fillingstationsList.getDistrict());
            contentValues.put("CusDesc", fillingstationsList.getCusDesc());
            contentValues.put("SupremPrice", fillingstationsList.getSupremPrice());
            contentValues.put("Lati", fillingstationsList.getLati());
            contentValues.put("CNGPrice", fillingstationsList.getCNGPrice());
            contentValues.put("longi", fillingstationsList.getLongi());
            contentValues.put("CusAddress", fillingstationsList.getCusAddress());
            contentValues.put("HOBC97", fillingstationsList.getHOBC97());
            contentValues.put("CNG", fillingstationsList.getCNG());
            contentValues.put("Diesel", fillingstationsList.getDiesel());
            contentValues.put("Superem", fillingstationsList.getSuperem());
            List<String> services = this.getServices(fillingstationsList.getCusCode());
            String csv = "";
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
                csv = String.join(",", services);
            } else {
                csv = android.text.TextUtils.join(",", services);
            }
            contentValues.put("Services", csv);

            idInsert = db.insert("SearchedFillingStations", null, contentValues);


        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public Long deleteSearchedTable() {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;

        try {

            db.execSQL("DELETE FROM SearchedFillingStations");


        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public Long deleteFillingStation() {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;

        try {

            db.execSQL("DELETE FROM FillingStations");


        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public Long deleteServices() {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;

        try {

            db.execSQL("DELETE FROM Services");


        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    public Long deleteFuels() {

        SQLiteDatabase db = this.getReadableDatabase();
        Long idInsert = -1L;

        try {

            db.execSQL("DELETE FROM FuelTypes");


        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (db != null)
                db.close();
        }

        return idInsert;
    }

    // chamber no 3 RMTitle 3 auto 1926
    public String getCurrentSubTotal(String chamberNo, String RMTitle, String AutoDocNo) {
        ArrayList<Reason> reasonsList = new ArrayList<>();

        String selectQueryReasons = "SELECT  RM.RMTitle, Sum(R.RTotal) Total FROM  FAChamber FAC, ReasonsMaster RM, Reasons R  WHERE RM.FACid = FAC.FACid AND RM.FARMid = R.FARMid AND  RM.RMTitle  = '" + RMTitle + "' AND  R.AutoDocNo  = '" + AutoDocNo + "'  AND  FAC.ChamberNo  = '" + chamberNo + "'  ";
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryReasons, null);
        String subtotal = "0";
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {

                subtotal = Double.toString(cursor.getDouble(cursor.getColumnIndex("Total")));
                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return subtotal + "";

    }

    public String getCurrentGrandTotal(String RMTitle, String AutoDocNo) {
        ArrayList<Reason> reasonsList = new ArrayList<>();

        String selectQueryReasons = "SELECT  RM.RMTitle, Sum(R.RTotal) Total FROM  ReasonsMaster RM, Reasons R  WHERE RM.FARMid = R.FARMid AND  RM.RMTitle  = '" + RMTitle + "' AND  R.AutoDocNo  = '" + AutoDocNo + "' ";
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQueryReasons, null);
        String total = "0";
        try {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {

                total = Double.toString(cursor.getDouble(cursor.getColumnIndex("Total")));
                cursor.moveToNext();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cursor.close();
            db.close();
        }
        return total + "";
    }
}
